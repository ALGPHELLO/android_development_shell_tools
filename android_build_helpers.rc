#!/bin/bash
#
# Copyright 2015-2017 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === Standalone Source Helper ===
# source <(curl -Ls https://github.com/AdrianDC/android_development_shell_tools/raw/master/android_build_helpers.rc)

# === Make with Jobs ===
function makej()
{
  # Usage: makej <parameters> (Helper to 'make -jPROCESSORS')
  make -j"$(grep -c ^processor /proc/cpuinfo)" "${@}";
}

# === Make with Jobs and SCHED_BATCH ===
function makes()
{
  # Usage: makes <parameters> (Helper to 'make -jPROCESSORS' with SCHED_BATCH)

  # Variables
  local ret;
  local time_diff;
  local time_hours;
  local time_minutes;
  local time_seconds;
  local time_string;

  # Store compilation start time
  time_diff=$(date +%s);

  # Makes with SCHED_BATCH and all processors
  schedtool -B -n 10 -e ionice -n 7 make -j"$(grep -c ^processor /proc/cpuinfo)" "${@}";
  ret=${?};

  # Calculate compilation times
  time_diff=$(($(date +%s) - time_diff));
  time_seconds=$((time_diff % 60));
  time_diff=$((time_diff / 60));
  time_minutes=$((time_diff % 60));
  time_hours=$((time_diff / 60));

  # Build success or failure log
  echo '';
  if [ $ret -eq 0 ] ; then
    echo -en ' \e[1;32m';
    time_string='makes: Completed in';
  else
    echo -en ' \e[1;31m';
    time_string='makes: Failed after';
  fi;

  # Build time log
  if [ ${time_hours} -gt 0 ]; then
    time_string=$(printf "${time_string} %02g:%02g:%02g (hh:mm:ss)" ${time_hours} ${time_minutes} ${time_seconds});
  elif [ ${time_minutes} -gt 0 ] ; then
    time_string=$(printf "${time_string} %02g:%02g (mm:ss)" ${time_minutes} ${time_seconds});
  elif [ ${time_seconds} -gt 0 ] ; then
    time_string=$(printf "${time_string} %s seconds" ${time_seconds});
  fi;

  # Finish build log
  echo -e " #### ${time_string} ####\e[0m";
  echo '';

  # Export result as BUILD_RESULT
  export BUILD_RESULT=${time_string};
}
