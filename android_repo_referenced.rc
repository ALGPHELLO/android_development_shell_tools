#!/bin/bash
# ======================================
#   Developed by Adrian DC - 2015-2017
# ======================================

# === Repo References Variables ===
export android_development_shell_tools_referenced_aosp='huashan blue sony';
export android_development_shell_tools_referenced_lineage='huashan blue sony dora z3 lx fusion3';

# === Repo Referenced AOSP Devices ===
function reporeferencedaosp()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: reporeferencedaosp <"command_to_run"> <"device1 device2 ..."> (AOSP referenced repo commands launcher)';
    echo '';
    return;
  fi;

  # Variables
  local repocommon;
  local command_to_run=${1};
  local referenced_devices=${2:-${android_development_shell_tools_referenced_aosp}};

  # Execute on common repo
  cdaosp;
  source ./build/envsetup.sh;
  repocommon=$(pwd);
  ${command_to_run};

  # Walk through devices
  for device in ${referenced_devices}; do

    # Select and verify the path existence
    cdaosp ${device};
    if [ ! "$(pwd)" = "${repocommon}" ]; then

      # Execute on device repo
      source ./build/envsetup.sh;
      ${command_to_run};

    fi;

  done;
}

# === Repo Referenced LineageOS Devices ===
function reporeferencedlineage()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: reporeferencedlineage <"command_to_run"> <"device1 device2 ..."> (LineageOS referenced repo commands launcher)';
    echo '';
    return;
  fi;

  # Variables
  local repocommon;
  local command_to_run=${1};
  local referenced_devices=${2:-${android_development_shell_tools_referenced_lineage}};

  # Execute on common repo
  cdlineage;
  source ./build/envsetup.sh;
  repocommon=$(pwd);
  ${command_to_run};

  # Walk through devices
  for device in ${referenced_devices}; do

    # Select and verify the path existence
    cdlineage ${device};
    if [ ! "$(pwd)" = "${repocommon}" ]; then

      # Execute on device repo
      source ./build/envsetup.sh;
      ${command_to_run};

    fi;

  done;
}

# === Repo References Updater ===
function reporefupdate()
{
  # Usage: reporefupdate (Upload new projects manifests)

  # Path backup
  local current_dir=$(pwd);

  # Detect and update AOSP references
  for project in sony8960_n sony8960_o sony8960_master sonyaosp aospcaf; do
    cddevaosp ${project};
    if [ ${?} -eq 0 ] && git add -N * && ! git diff-index --quiet HEAD --; then
      echo '';
      echo " Updating AOSP ${project} references...";
      git add -Ap;
      if ! git diff --cached --quiet; then
        git commit --amend --no-edit;
        gitpu origin local_manifests y;
      fi;
    fi;
  done;

  # Detect and update LineageOS references
  for project in sony8960 sony8996 sonysodp; do
    cddevlineage ${project};
    if [ ${?} -eq 0 ] && git add -N * && ! git diff-index --quiet HEAD --; then
      echo '';
      echo " Updating LineageOS ${project} references...";
      git add -Ap;
      if ! git diff --cached --quiet; then
        git commit --amend --no-edit;
        gitpu origin local_manifests y;
      fi;
    fi;
  done;

  # Detect and update common manifests references
  cddev 'android_development_manifests';
  if [ ${?} -eq 0 ] && git add -N * && ! git diff-index --quiet HEAD --; then
    echo '';
    echo " Updating common manifests references...";
    git add -Ap;
    if ! git diff --cached --quiet; then
      git commit --amend --no-edit;
      gitpu origin local_manifests y;
    fi;
  fi;

  # Detect and update MultiROM references
  cddevmrom;
  if [ ${?} -eq 0 ] && git add -N * && ! git diff-index --quiet HEAD --; then
    echo '';
    echo " Updating MultiROM references...";
    git add -Ap;
    if ! git diff --cached --quiet; then
      git commit --amend --no-edit;
      gitpu origin local_manifests y;
    fi;
  fi;

  # Detect and update TWRP references
  cddevtwrp;
  if [ ${?} -eq 0 ] && git add -N * && ! git diff-index --quiet HEAD --; then
    echo '';
    echo " Updating TWRP references...";
    git add -Ap;
    if ! git diff --cached --quiet; then
      git commit --amend --no-edit;
      gitpu origin local_manifests y;
    fi;
  fi;

  # Path restore
  cd ${current_dir};
}

# === Repo References Syncer ===
function reporefsync()
{
  # Usage: reporefsync (Download new projects manifests)

  # Path backup
  local current_dir=$(pwd);

  # Fetch and update AOSP references
  for project in sony8960_n sony8960_o sony8960_master sonyaosp aospcaf; do
    cddevaosp ${project};
    if [ ${?} -eq 0 ]; then
      echo '';
      echo " Syncing AOSP ${project} references...";
      git fetch origin local_manifests;
      git diff FETCH_HEAD;
      git reset FETCH_HEAD;
      git stash -u;
    fi;
  done;

  # Fetch and update LineageOS references
  for project in sony8960 sony8996 sonysodp; do
    cddevlineage ${project};
    if [ ${?} -eq 0 ]; then
      echo '';
      echo " Syncing LineageOS ${project} references...";
      git fetch origin local_manifests;
      git diff FETCH_HEAD;
      git reset FETCH_HEAD;
      git stash -u;
    fi;
  done;

  # Fetch and update common manifests references
  cddev 'android_development_manifests';
  if [ ${?} -eq 0 ]; then
    echo '';
    echo " Syncing common manifests references...";
    git fetch origin local_manifests;
    git diff FETCH_HEAD;
    git reset FETCH_HEAD;
    git stash -u;
  fi;

  # Fetch and update MultiROM references
  cddevmrom;
  if [ ${?} -eq 0 ]; then
    echo '';
    echo " Syncing MultiROM references...";
    git fetch origin local_manifests;
    git diff FETCH_HEAD;
    git reset FETCH_HEAD;
    git stash -u;
  fi;

  # Fetch and update TWRP references
  cddevtwrp;
  if [ ${?} -eq 0 ]; then
    echo '';
    echo " Syncing TWRP references...";
    git fetch origin local_manifests;
    git diff FETCH_HEAD;
    git reset FETCH_HEAD;
    git stash -u;
  fi;

  # Path restore
  cd ${current_dir};
}

# === Repo Referenced Linker ===
function reporeflinker()
{
  # Usage: reporeflinker (Helper to symlink local_manifests to Developments)

  # Variables
  local cnt;
  local key;
  local options;
  local project;
  local target;

  # Development path
  local dev_path=$(getand)/Development;
  local path=$(pwd);

  # Access local_manifests
  croot;
  cdlocman;
  echo '';

  # Handle local_manifests files to link
  for file in roomservice.xml untracked.xml; do

    # Ignore actual files and not symlinks
    if [ -f "${file}" ] && [ ! -L "${file}" ]; then
      echo " reporeflinker: '${file}' already exists, ignoring.";
      continue;
    fi;

    # Delete remaining symlinks
    rm -f ./${file};

    # Create projects selector list
    cnt=0;
    options=('None');
    project='';
    echo '';
    echo -e " \e[1;37m[ Select a project for '${file}' ]\e[0m";
    echo '';
    echo "   ${cnt}: ${options[${cnt}]}";
    for project in ${dev_path}/*; do
      cnt=$((${cnt} + 1));
      options[${cnt}]=${project##*/};
      echo "   ${cnt}: ${options[${cnt}]}";
    done;
    echo '';
    printf " \e[1;33mProject to use [0 to ${cnt}] :\e[0m ";
    read key;
    echo '';
    if [ ${key} -gt 0 ] && [ ${key} -le ${cnt} ]; then
      project=${options[${key}]};
    else
      project='';
    fi;

    # If project provided
    if [ ! -z "${project}" ]; then

      # Create targets selector list
      cnt=0;
      options=('None');
      echo '';
      echo -e " \e[1;37m[ Select manifest target for '${file}' ]\e[0m";
      echo '';
      echo "   ${cnt}: ${options[${cnt}]}";
      for target in ${dev_path}/${project}/*.xml; do
        cnt=$((${cnt} + 1));
        options[${cnt}]=${target##*/};
        echo "   ${cnt}: ${options[${cnt}]}";
      done;
      echo '';
      printf " \e[1;33mmanifest target to use [0 to ${cnt}] :\e[0m ";
      read key;
      echo '';
      if [ ${key} -gt 0 ] && [ ${key} -le ${cnt} ]; then
        target=${options[${key}]};

        # Generate symlink to file
        printf ' ';
        ln -fsv ${dev_path}/${project}/${target} ./${file};
        echo '';

      fi;
    fi;
  done;

  # Return to current path
  cd "${path}";
  echo '';
}
