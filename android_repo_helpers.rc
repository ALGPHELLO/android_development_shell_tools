#!/bin/bash
# ======================================
#   Developed by Adrian DC - 2015-2016
# ======================================

# === Repo Root Directory ===
function repor()
{
  local repodir=${PWD};
  while [[ "${repodir}" != '/' && ! -d "${repodir}/.repo" ]]; do
    repodir=$(readlink -f "${repodir}/..");
  done;
  if [ -d "${repodir}/.repo" ]; then
    cd ${repodir};
  fi;
}

# === Repo Environment Starter for LineageOS ===
function repos()
{
  # Variables
  local currentdir=${PWD};
  local device=${1:-huashan};

  # Repo root, sources and breakfast
  repor;
  if [ -f ./build/envsetup.sh ]; then
    source ./build/envsetup.sh;
    croot;
    breakfast ${device};
  else
    echo "Android Repo not found...";
  fi;

  # Return to current folder
  cd "${currentdir}";
}

# === Repo Environment Starter for AOSP ===
function reposaosp()
{
  local currentdir=${PWD}; repor;
  if [ -f ./build/envsetup.sh ]; then
    local device=${1:-huashan};
    source ./build/envsetup.sh; croot;
    lunch aosp_${device}-userdebug;
  else
    echo "Android Repo not found...";
  fi;
  cd "${currentdir}";
}

# === Roomservice Manifest ===
function reporoomserv()
{
  cwd=$(pwd);
  repor;
  mkdir -p .repo/local_manifests/;
  gedit .repo/local_manifests/roomservice.xml .repo/manifest.xml;
  cd "${cwd}";
}

# === Repo Sync Project ===
alias reposi='repo sync .';

# === Repo Sync Efficiently ===
function reposy()
{
  repo sync -j$(grep -c ^processor /proc/cpuinfo) \
            --current-branch \
            --detach \
            -f \
            --force-broken \
            --force-sync \
            -c \
            --no-clone-bundle\
            --no-tags \
            ${@};
}

# === Repo Branch Sync ===
function reposybranch()
{
  echo '';
  repo forall -c 'echo '';
                  echo " Project ${REPO_PROJECT} : ${REPO_REMOTE}/${REPO_RREV##*/}";
                  git fetch ${REPO_REMOTE} ${REPO_RREV##*/};
                  git checkout ${REPO_RREV##*/};';
  echo '';
}

# === Repo Prune ===
function repoprune()
{
  echo '';
  local tmpfile=$(mktemp);
  repo forall -c "echo '';
                  echo \" Project \${REPO_PROJECT} : \${REPO_REMOTE}/\${REPO_RREV##*/}\";
                  git prune HEAD 2> ${tmpfile};
                  while read line; do
                    line=refs\${line#*refs};
                    echo \"  Removing \${line}\";
                    rm -rf .git/\${line};
                  done < ${tmpfile}; return;";
  rm -f ${tmpfile};
  echo '';
}

# === Repo Heads Cleaner ===
function repoheadscleaner()
{
  echo '';
  repo forall -c 'echo " Project ${REPO_PROJECT} : ${REPO_REMOTE}/${REPO_RREV##*/}";
                  git show-ref 2>&1 >/dev/null | \
                    while read line; do
                     refs_path=$(echo ${line} | sed "s/.*\(refs.*\) does.*/\1/");
                     echo "  Deleting ${refs_path}...";
                     rm .git/${refs_path} .git/logs/${refs_path};
                   done;';
  echo '';
}

# === Repo AOSP Syncer ===
function reposyaosp()
{
  cwd=$(pwd);
  repor;
  cdaosp;
  reposy;
  cd "${cwd}";
  repor;
  reposy;
  cd "${cwd}";
}

# === Repo LineageOS Syncer ===
function reposylineage()
{
  cwd=$(pwd);
  repor;
  cdlineage;
  reposy;
  cd "${cwd}";
  repor;
  reposy;
  cd "${cwd}";
}

# === Repo Sync Clean ===
function reposycl()
{
  repo forall -c 'echo "Cleaning project ${REPO_PROJECT}"; \
                  git rebase --abort >/dev/null 2>&1; \
                  git stash -u >/dev/null 2>&1; \
                  git reset --hard HEAD >/dev/null 2>&1;';
  repo sync -j$(grep -c ^processor /proc/cpuinfo) --current-branch --detach -f --force-broken --force-sync -c --no-clone-bundle --no-tags;
}

# === Repo CCache Status/Setter ===
function repocache()
{
  # Variables & repo root
  local currentdir=$(pwd);
  repor;

  # Update the maximum on input (example 20G)
  if [ ! -z "${1}" ]; then
    ./prebuilts/misc/linux-x86/ccache/ccache -M ${1};
  fi;

  # Study the CCache
  watch -n 1 -d "./prebuilts/misc/linux-x86/ccache/ccache" -s;

  # Restore path
  cd ${currentdir}/;
}

# === Repo Branch ===
function repogetbranch()
{
  # Variables
  local branch='';
  local infos=$(repo info . 2>&1);

  # Repo detection
  if [[ ! "${infos}" =~ 'repo to be installed' ]] && [[ ! "${infos}" =~ 'sudo apt' ]]; then
    branch=$(echo "${infos}" \
          | grep -i 'Manifest branch' \
          | head -n 1 \
          | sed 's/.*\/heads\/\(.*\)/\1/');
  fi;

  # Recent remotes
  if [ -z "${branch}" ] || [[ "${branch}" =~ 'Manifest' ]]; then
    branch=$(git 'for-each-ref' --sort=committerdate refs/remotes/ \
           | grep "$(githubusername)\|origin\|xperia" \
           | head -n 1 \
           | sed 's/.*remotes\/[^\/]*\/\(.*\)/\1/');
  fi;

  # Default failsafe
  if [ -z "${branch}" ] || [[ "${branch}" =~ 'Manifest' ]]; then
    branch='cm-14.1';
  fi;

  # Output result
  echo "${branch}";
}

# === Repo CCache Cleaner ===
alias repocleancache='if [ ! -z "${CCACHE_DIR}" ]; then rm -rfv "${CCACHE_DIR}/"*; fi';
