#!/bin/bash
# ======================================
#   Developed by Adrian DC - 2015-2016
# ======================================

# === Build paths ===
export bash_android_bbootimg=${bash_android_dir}/android_tools/bbootimg;
export bash_android_mkboot=${bash_android_dir}/android_mkboot;

# === Kernel Fast Builder ===
function fboota()
{
  # Usage
  if [ ! "$(type -t croot 2> /dev/null)" = 'function' ] || [ -z "${TARGET_PRODUCT}" ]; then
    echo '';
    echo ' Usage: fboota [unsecure,sep,full,init,inject]';
    echo '  Details: fboota needs the envbuild and lunch variables';
    echo '';
    return;
  fi;

  # Variables
  local cwd=$(pwd);
  local device=$(repogetdevice);
  local device_common='';
  local params=${1};
  local tmpfile=$(mktemp);

  # Build environment
  croot;
  export USE_NINJA=false;

  # Header & root holder
  echo '';
  echo -e ' \e[1;37m[ Fast Kernel Builder by Adrian DC - 2016 ]\e[0m';
  echo '';
  if [[ ! "${params}" =~ 'noflash' ]] && [[ ! "${params}" =~ 'zip' ]]; then
    sudo printf '';
  fi;

  # Output cleaner
  rm -fv ./out/target/product/${device}/boot.*;
  rm -fv ./out/target/product/${device}/*.cpio;
  rm -fv ./out/target/product/${device}/*.fs;
  rm -fv ./out/target/product/${device}/*.img;
  echo '';

  # Unsecure adb changes
  if [[ "${params}" =~ 'unsecure' ]]; then
    local fileslist="./build/core/main.mk \
                     ./out/target/product/${device}/root/default.prop \
                     ./out/target/product/${device}/recovery/root/default.prop \
                     ./out/target/product/${device}/ota_temp/\*/RAMDISK/default.prop \
                     ./out/target/product/${device}/obj/PACKAGING/target_files_intermediates/\*/\*/RAMDISK/default.prop";
    for file in ${fileslist}; do
      echo "Unsecuring ${file}";
      sed -i 's/ro.adb.secure=1/ro.adb.secure=0/' ${file};
      sed -i 's/ro.secure=1/ro.secure=0/' ${file};
      sed -i 's/persist.sys.usb.config=none/persist.sys.usb.config=mtp,adb/g' ${file};
    done;
  fi;

  # Force init rebuild
  if [[ "${params}" =~ 'init' ]]; then
    rm -rf ./out/target/product/${device}/obj/EXECUTABLES/init_intermediates;
    rm -f ./out/target/product/${device}/root/init.real;
    rm -f ./out/target/product/${device}/root/init;
  fi;

  # Sepolicies builder
  if [[ "${params}" =~ 'sep' ]]; then
    if [ -d ./system/sepolicy ]; then
      mmm -B -j$(grep -c ^processor /proc/cpuinfo) ./system/sepolicy/;
    else
      mmm -B -j$(grep -c ^processor /proc/cpuinfo) ./external/sepolicy/;
    fi;
  fi;

  # Ramdisk files builder
  export USE_NINJA=false;
  if ls ./device/*/${device}/rootdir/Android.mk 1> /dev/null 2>&1; then
    mmm ./device/*/${device}/rootdir/;
  fi;

  # Ramdisk common files builder
  device_common=$(cat ./device/*/${device}/device.mk \
                | grep 'inherit-product' \
                | grep 'device' \
                | sed 's/.*\(device.*\)\/[^\/]*)/\1/');
  if [ ! -z "${device_common}" ]; then
    mmm ./${device_common}/rootdir/;
  fi;

  # Bootimage builder
  if [[ ! "${params}" =~ 'full' ]] && $(mms -v >/dev/null 2>&1); then
    mms bootimage | tee ${tmpfile};
  else
    make -j$(grep -c ^processor /proc/cpuinfo) bootimage | tee ${tmpfile};
  fi;
  export USE_NINJA=;

  # Unsecure adb changes
  if [[ "${params}" =~ 'unsecure' ]]; then
    for file in ${fileslist}; do
      echo "Resecuring ${file}";
      sed -i 's/ro.adb.secure=0/ro.adb.secure=1/' ${file};
      sed -i 's/ro.secure=0/ro.secure=1/' ${file};
      sed -i 's/persist.sys.usb.config=mtp,adb/persist.sys.usb.config=none/' ${file};
    done;
  fi;

  # Bootimage file path
  BootImg=$(grep -a '.*image.*boot\.img' ${tmpfile} \
          | head -1 \
          | sed 's/.*: \(.*boot\.img\).*/\1/g');

  # Inject kernel inside bootimage
  if [[ "${params}" =~ 'inject' ]]; then

    # Use the fbootk function
    fbootk $(dirname ${BootImg})/kernel;

  # Zip the bootimage
  elif [[ "${params}" =~ 'zip' ]] && [ ! -z "${BootImg}" ] && [ -f "${BootImg}" ]; then
    bootzip ${device} "${BootImg}";

  # Flash the bootimage to the device
  elif [[ ! "${params}" =~ 'noflash' ]] && [ ! -z "${BootImg}" ] && [ -f "${BootImg}" ]; then

    # Detect modules
    ModulesDir=$(grep -a '.*system/lib/.*' ${tmpfile} \
               | head -n 1 \
               | sed 's/.* \(\S*system\/lib\/modules\S*\);.*/\1/g');
    Modules=$(grep -a '.*INSTALL .*\.ko.*' ${tmpfile} \
            | sed 's/.*INSTALL \(.*\.ko\).*/\1/g' \
            | uniq);

    # Waiting to get adb
    echo '';
    echo '';
    echo -e " \e[1;37m[ Waiting for adb root... ]\e[0m";
    echo '';
    timeout 10 adb 'wait-for-device';

    # Handle kernel modules
    if [ ! -z "${Modules}" ]; then
      adb remount;
      timeout 10 adb 'wait-for-device';
      for Module in ${Modules[*]}; do
        ModuleFile=$(basename "${Module}");
        adb push "${ModulesDir}/${ModuleFile}" "/system/lib/modules/${ModuleFile}";
      done;
    fi;

    # Flash new bootimage
    echo '';
    echo -e " \e[1;37m[ Bootloader ${BootImg}... ]\e[0m";
    export PackageResult="${BootImg}";
    echo '';
    sudo adb reboot bootloader;
    timeout 20 sudo fastboot flash boot "${BootImg}";
    timeout 5 sudo fastboot reboot;
    echo '';

  fi;

  # End of process
  export USE_NINJA=;
  rm -f ${tmpfile};
  cd ${cwd};
  echo '';
}

# === Kernel Flasher ===
function fboot()
{
  sudo adb reboot bootloader;
  if [ ! -z "${1}" ]; then
    local file=$(echo "${1}" | sed 's/file:\/\/\(.*\)/\1/');
    sudo fastboot flash boot "${file}";
  else
    sudo fastboot flash boot boot.img;
  fi;
  sudo fastboot reboot;
}

# === System Flasher ===
function fboots()
{
  sudo adb reboot bootloader;
  if [ ! -z "${1}" ]; then
    local file=$(echo "${1}" | sed 's/file:\/\/\(.*\)/\1/');
    sudo fastboot flash system "${file}";
  else
    sudo fastboot flash system system.img;
  fi;
}

# === Fastboot Reboot ===
function fbootr()
{
  sudo fastboot reboot;
}

# === Kernel Informations ===
function fbooti()
{
  # Variables
  local partitiontarget=$(androidpartitionstarget boot);

  # Kernel informations
  adbro;
  adb push "${bash_android_bbootimg}" /bbootimg;
  adb shell 'chmod +x /bbootimg; chmod 755 /bbootimg';
  adb shell 'chmod +x /bbootimg; chmod 755 /bbootimg';
  adb shell /bbootimg -i ${partitiontarget};
}

# === FOTA Informations ===
function adbfotainfos()
{
  # Variables
  local partitiontarget=$(androidpartitionstarget fota);

  # FOTA informations
  adbro;
  adb push "${bash_android_bbootimg}" /bbootimg;
  adb shell 'chmod +x /bbootimg; chmod 755 /bbootimg';
  adb shell 'chmod +x /bbootimg; chmod 755 /bbootimg';
  adb shell /bbootimg -i ${partitiontarget};
}

# === Kernel Injector ===
function fbootk()
{
  # Usage
  if [ -z "${1}" ] || [ ! -f "${1}" ]; then
    echo '  Usage: fbootk kernelpath [bool_fota]';
    return;
  fi;

  # Variables
  local partitiontarget=;
  if [ ! -z "${2}" ]; then
    partitiontarget=$(androidpartitionstarget fota);
  else
    partitiontarget=$(androidpartitionstarget boot);
  fi;

  # Kernel injection
  adbro;
  adb push "${1}" /tmpkernel;
  adb push "${bash_android_bbootimg}" /bbootimg;
  adb shell 'chmod +x /bbootimg; chmod 755 /bbootimg';
  adb shell 'chmod +x /bbootimg; chmod 755 /bbootimg';
  adb shell /bbootimg -i ${partitiontarget};
  adb shell /bbootimg -u ${partitiontarget} -k /tmpkernel;
  if [ ! -z "${2}" ]; then
    adb reboot recovery;
  fi;
}

# === Kernel Modules Pusher ===
function fbootmodules()
{
  # Modules Pusher
  for module_file in $(find ${KernelSources} -name *.ko); do
    adb push ${module_file} /system/lib/modules/;
  done;
}

# === Kernel Flasher ===
function fbooto()
{
  sudo adb reboot bootloader;
  if [ ! -z "${1}" ]; then
    sudo fastboot flash boot "${1}";
  else
    sudo fastboot flash boot boot.img;
  fi;
}

# === Recovery Flasher ===
function frecovery()
{
  sudo adb reboot bootloader;
  if [ ! -z "${1}" ]; then
    sudo fastboot flash recovery "${1}";
  else
    sudo fastboot flash recovery boot.img;
  fi;
  sudo fastboot reboot;
}

# === ADB Bootimage Pusher ===
function adbbootpush()
{
  # Variables
  local boot=$(androidpartitionstarget boot);

  # Installer
  adb push ${1} /sdcard/boot.img;
  adbsu "dd if=/dev/zero of=${boot}";
  adbsu "dd if=/sdcard/boot.img of=${boot}";
  adbsu 'rm -f /sdcard/boot.img';
}

# === ADB FOTA Pusher ===
function adbfotapush()
{
  # Variables
  local fota=$(androidpartitionstarget fota);

  # Installer
  adb push ${1} /sdcard/fota.img;
  adbsu "dd if=/dev/zero of=${fota}";
  adbsu "dd if=/sdcard/fota.img of=${fota}";
  adbsu 'rm -f /sdcard/fota.img';
  #adb reboot recovery;
}

# === ADB Recovery Pusher ===
function adbrecoverypush()
{
  # Variables
  local recovery=$(androidpartitionstarget recovery);

  # Installer
  adb push ${1} /sdcard/recovery.img;
  adbsu "dd if=/dev/zero of=${recovery}";
  adbsu "dd if=/sdcard/recovery.img of=${recovery}";
  adbsu 'rm -f /sdcard/recovery.img';
  #adb reboot recovery;
}

# === MKBoot Tools ===
function mkboottools()
{
  # Usage
  if [ -z "${1}" ] || [ ! -f "${1}" ]; then
    echo '  Usage: mkboottools boot.img';
    return;
  fi;

  # Variables
  local boot_file="${1}";
  local out_folder="${2}";

  # Extraction
  if [ -z "${out_folder}" ]; then
    out_folder=$(mktemp -d);
  fi;

  # Unpack
  rm -rf "${out_folder}";
  ${bash_android_mkboot}/mkboot "${1}" "${out_folder}";

  # Edition mode
  if [ -z "${2}" ]; then

    # Edit
    nemo "${out_folder}";
    echo '';
    printf ' Press Enter to continue [ENTER] ';
    read key;
    echo '';

    # Repack
    if [ ! -f "${1}.old" ]; then
      cp "${1}" "${1}.old";
    fi;
    rm -f "${1}.tmp";
    mv "${1}" "${1}.tmp";
    ${bash_android_mkboot}/mkboot "${out_folder}" "${1}";
    if [ -f "${1}.tmp" ]; then
      rm -f "${1}.tmp";
    fi;
    rm -rf "${out_folder}";

  fi;

  # End of process
  echo '';
}

# === Kernel Injector Zip ===
function kernelinjectorzip()
{
  # Usage
  if [ -z "${2}" ] || [ ! -f "${2}" ]; then
    echo '';
    echo ' usage: kernelinjectorzip device kernel_file_path [kernel_sources_for_modules]';
    echo '';
    return;
  fi;

  # Variables
  local CurDir=$(pwd);
  local PhoneName="${1}";
  local KernelFile=$(readlink -f "${2}");
  local KernelSources=$(readlink -f "${3}");
  local OutFile="kernel-injector-"$(date +'%Y%m%d')"-${PhoneName}.zip";
  local TargetFile="$(xdg-user-dir DESKTOP)/${OutFile}";
  local TmpDir=$(mktemp -d);

  # Partitions
  export ANDROID_DEVICE_TARGET="${PhoneName}";
  local BootPartition=$(androidpartitionstarget boot);
  local SystemPartition=$(androidpartitionstarget system);

  # Generate zip and updater-script files
  cd "${TmpDir}/";
  mkdir -p ./META-INF/com/google/android/;
  mkdir -p ./scripts/;
  cp "${bash_flashable_android_base}" "${TargetFile}.unsigned.zip";
  cp "${bash_updater_kernel_injector}" ./META-INF/com/google/android/updater-script;
  cp -rfv "${bash_scripts_kernel_injector}/"* ./scripts/;
  sed -i "s/ANDROID_SYSTEM_PARTITION/${SystemPartition//\//\\\/}/" ./META-INF/com/google/android/updater-script;
  sed -i "s/ANDROID_BOOT_PARTITION/${BootPartition//\//\\\/}/" ./scripts/bootdev;
  zip -g "${TargetFile}.unsigned.zip" ./META-INF/com/google/android/updater-script;
  zip -g "${TargetFile}.unsigned.zip" ./scripts/*;

  # Pack kernel file
  cp "${KernelFile}" ./scripts/kernel;
  zip -g "${TargetFile}.unsigned.zip" ./scripts/kernel;

  # Modules
  if [ ! -z "${KernelSources}" ]; then
    mkdir -p ./system/lib/modules/;
    for module_file in $(find ${KernelSources} -name *.ko); do
      cp ${module_file} ./system/lib/modules/;
    done;
    zip -g "${TargetFile}.unsigned.zip" './system/lib/modules/'*;
  fi;

  # Zip signature
  signzip "${TargetFile}.unsigned.zip" "${TargetFile}";

  # End of work
  rm -rf "${TmpDir}";
  cd "${CurDir}";

  # Result
  echo '';
  echo -e " \e[1;37mPackage File:\e[0m ${TargetFile}";
  echo '';
}

# === Boot Zip Packer ===
function bootzip()
{
  # Usage
  if [ -z "${2}" ] || [ ! -f "${2}" ]; then
    echo '';
    echo ' usage: bootzip device boot_img_path';
    echo '';
    return;
  fi;

  # Variables
  local CurDir=$(pwd);
  local PhoneName="${1}";
  local BootFile=$(readlink -f "${2}");
  local OutFile="boot-"$(date +'%Y%m%d')"-${PhoneName}.zip";
  local TargetFile="$(xdg-user-dir DESKTOP)/${OutFile}";
  local TmpDir=$(mktemp -d);

  # Partitions
  local BootPartition=$(androidpartitionstarget boot);

  # Generate zip and updater-script files
  cd "${TmpDir}/";
  mkdir -p ./META-INF/com/google/android/;
  cp "${bash_flashable_android_base}" "${OutFile}.unsigned.zip";
  cp "${bash_updater_flash_boot}" ./META-INF/com/google/android/updater-script;
  sed -i "s/ANDROID_BOOT_PARTITION/${BootPartition//\//\\\/}/" ./META-INF/com/google/android/updater-script;
  zip -g "${OutFile}.unsigned.zip" ./META-INF/com/google/android/updater-script;

  # Pack bootimage file
  cp "${BootFile}" "${TmpDir}/boot.img";
  zip -g "${OutFile}.unsigned.zip" 'boot.img';

  # Zip signature
  signzip "${TmpDir}/${OutFile}.unsigned.zip" "${TmpDir}/${OutFile}";
  cp "${TmpDir}/${OutFile}" "${TargetFile}";

  # End of work
  echo '';
  echo -e " \e[1;36mPackage File:\e[0m ${TargetFile}";
  export PackageResult="${TargetFile}";
  echo '';

  # End of process
  rm -rf "${TmpDir}";
  cd "${CurDir}";
}
