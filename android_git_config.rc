#!/bin/bash
#
# Copyright 2015-2018 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === Standalone Source Helper ===
# source <(curl -Ls https://github.com/AdrianDC/android_development_shell_tools/raw/master/android_git_config.rc)

# === GitHub Username ===
function githubusername()
{
  # Usage: githubusername (GitHub username getter)

  # GitHub Credentials
  export GitEMail='user.name@gmail.com';
  export GitFullName='Full Name';
  export GitUserName='Username';

  # Create .bash_android.github.rc with the exports to override the credentials
  if [ -f "${ANDROID_DEVELOPMENT_SHELL_TOOLS_WORKSPACE:-${HOME}}/.bash_android.github.rc" ]; then
    source "${ANDROID_DEVELOPMENT_SHELL_TOOLS_WORKSPACE:-${HOME}}/.bash_android.github.rc";
  fi;

  # Return username
  echo "${GitUserName}";
}

# === Git Config Editor ===
function gitconfeditor()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: gitconfeditor <app_name> (Configure Git editor application)';
    echo '';
    return;
  fi;

  # Select option
  case "${1}" in
    notepad++)
      git config --global core.editor 'notepad++ -multiInst -notabbar -nosession -noPlugin';;
    nano|vim|*)
      git config --global core.editor "${1}";;
  esac;

  # Display option
  echo '';
  echo -n ' gitconfeditor: core.editor = ';
  git config --global --get core.editor;
  echo '';
}

# === Git Config Merge Tool ===
function gitconfmergetool()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: gitconfmergetool <app_name> (Configure Git merge tool handling)';
    echo '';
    return;
  fi;

  # Set option
  git config --global merge.tool "${1}";

  # Display option
  echo '';
  echo -n ' gitconfmergetool: merge.tool = ';
  git config --global --get merge.tool;
  echo '';
}

# === Git Config File CR/LF ===
function gitconffilecrlf()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: gitconffilecrlf <true/false/input> (Configure Git file CR/LF EOL handling)';
    echo '';
    return;
  fi;

  # Select option
  case "${1}" in
    false|input|true)
      git config --global core.autocrlf "${1}";;
    *)
      echo '';
      echo " Error: Option '${1}' not recognized";
  esac;

  # Display option
  echo '';
  echo -n ' gitconffilecrlf: core.autocrlf = ';
  git config --global --get core.autocrlf;
  echo '';
}

# === Git Config File Permissions ===
function gitconffileperms()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: gitconffileperms <true/false> (Configure Git file permissions handling)';
    echo '';
    return;
  fi;

  # Select option
  case "${1}" in
    false|true)
      git config --global core.filemode "${1}";;
    *)
      echo '';
      echo " Error: Option '${1}' not recognized";
  esac;

  # Display option
  echo '';
  echo -n ' gitconffileperms: core.filemode = ';
  git config --global --get core.filemode;
  echo '';
}

# === Git Config Colors ===
function gitconfcolors()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: gitconfcolors <true/false/always> (Configure Git colors handling)';
    echo '';
    return;
  fi;

  # Select option
  case "${1}" in
    always|false|true)
      git config --global color.ui "${1}";;
    *)
      echo '';
      echo " Error: Option '${1}' not recognized";
  esac;

  # Display option
  echo '';
  echo -n ' gitconfcolors: color.ui = ';
  git config --global --get color.ui;
  echo '';
}

# === Git Config Pager ===
function gitconfpager()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: gitconfpager <less/more/false> (Configure Git pager handling)';
    echo '';
    return;
  fi;

  # Select option
  case "${1}" in
    false)
      git config --global core.pager '';;
    less|more)
      git config --global core.pager "${1}";;
    *)
      echo '';
      echo " Error: Option '${1}' not recognized";
  esac;

  # Display option
  echo '';
  echo -n ' gitconfpager: core.pager = ';
  git config --global --get core.pager;
  echo '';
}

# === Git Config Credentials ===
function gitconfcredentials()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: gitconfcredentials <cache/store/wincred> (Configure Git credentials handling)';
    echo '';
    return;
  fi;

  # Select option
  case "${1}" in
    cache|store|wincred)
      git config --global credential.helper "${1}";;
    *)
      echo '';
      echo " Error: Option '${1}' not recognized";
  esac;

  # Display option
  echo '';
  echo -n ' gitconfcredentials: credential.helper = ';
  git config --global --get credential.helper;
  echo '';
}

# === Git Config GPG Key ===
function gitconfgpgkey()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: gitconfgpgkey <gpg_key_id> (Configure Git GPG signing key)';
    echo '';
    return;
  fi;

  # Set option
  git config --global user.signingkey "${1}";

  # Display option
  echo '';
  echo -n ' gitconfgpgkey: user.signingkey = ';
  git config --global --get user.signingkey;
  echo '';
}

# === Git Config Conflicts Repeat ===
function gitconfconflictsrepeat()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: gitconfconflictsrepeat <true/false> (Configure Git conflicts repeated handling)';
    echo '';
    return;
  fi;

  # Select option
  case "${1}" in
    false|true)
      git config --global rerere.enabled "${1}";;
    *)
      echo '';
      echo " Error: Option '${1}' not recognized";
  esac;

  # Display option
  echo '';
  echo -n ' gitconfconflictsrepeat: rerere.enabled = ';
  git config --global --get rerere.enabled;
  echo '';
}

# === Git Config GPG Signature ===
function gitconfgpgsignature()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: gitconfgpgsignature <true/false> (Configure Git GPG signature usage)';
    echo '';
    return;
  fi;

  # Select option
  case "${1}" in
    false|true)
      git config --global commit.gpgsign "${1}";;
    *)
      echo '';
      echo " Error: Option '${1}' not recognized";
  esac;

  # Display option
  echo '';
  echo -n ' gitconfgpgsignature: commit.gpgsign = ';
  git config --global --get commit.gpgsign;
  echo '';
}

# === Git Config Helpers ===
alias gpglist='gpg --list-secret-keys --keyid-format LONG';
alias gpgsilent='echo "no-tty" >> ~/.gnupg/gpg.conf';
alias githi='git update-index --assume-unchanged';
alias gitsh='git update-index --no-assume-unchanged';

# === Git GPG Parameter ===
function gitgpgparam()
{
  # Usage: gitgpgparam (Returns the GPG signature flag if enabled)

  # Returns the GPG signature flag if enabled
  if [ "$(git config --global --get commit.gpgsign)" = 'true' ]; then
    echo '-S';
  fi;
}

# === Git Filtered Helper ===
function gitfilter()
{
  # Usage: gitfilter <parameters> (Use git commands with filters)

  # Use git commands with filters
  function git() { "$(which 'git')" -c core.fileMode=false -c core.autocrlf=true "${@}"; };
  if [ "${1:0:3}" = 'git' ]; then
    "${@}";
  else
    git "${@}";
  fi;
  unset -f git;
}

# === Git Unfiltered Helper ===
function gitnofilter()
{
  # Usage: gitnofilter <parameters> (Use git commands without filters)

  # Use git commands without filters
  function git() { "$(which 'git')" -c core.fileMode=true -c core.autocrlf=false "${@}"; };
  if [ "${1:0:3}" = 'git' ]; then
    "${@}";
  else
    git "${@}";
  fi;
  unset -f git;
}
