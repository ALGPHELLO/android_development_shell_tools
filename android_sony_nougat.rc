#!/bin/bash
# ======================================
#   Developed by Adrian DC - 2015-2016
# ======================================

# === SONY Nougat Patcher ===
function sonynpatcher()
{
  # Repo root
  if [ -z "$(type -t croot)" ]; then
    while [ ! -e './build/envsetup.sh' ]; do
      cd ../;
    done;
    source ./build/envsetup.sh;
  fi;
  croot;

  # ==========================================================
  # Constants
  local projects_paths='
    build
    external/toybox
    hardware/qcom/audio
    hardware/qcom/display
    hardware/qcom/media
    packages/apps/Music
    system/core
    ';

  # ==========================================================
  # Variables
  local git_revs_count;
  local git_revs_count_local;
  local path_branch;
  local project_github;
  local project_unfinished;

  # Projects loader
  for path in ${1:-${projects_paths}}; do

    # Project selection
    path_branch=${path//\//_};
    echo '';
    echo " === ${path} [${path_branch}] ===";
    croot;
    cd ${path}/;

    # Targets selection
    project_github='https://github.com/AdrianDC/aosp_development_sonyaosp.git';

    # Loop until project ready
    project_unfinished=1;
    while [ ${project_unfinished} -eq 1 ]; do

      # Fetch and compare
      git fetch ${project_github} ${path_branch};
      git_revs_count=$(git rev-list --left-right --count HEAD...FETCH_HEAD | tail -n 1);
      git_revs_count_local=$(echo "${git_revs_count}" | awk '{ print $1 }');
      git_revs_count_remote=$(echo "${git_revs_count}" | awk '{ print $2 }');
      echo " Differences: ${git_revs_count}";

      # Handle unupdated projects
      if [ ${git_revs_count_local} -ne 0 ]; then
        echo '';
        printf '  > Rebase onto newest changes [y/N] ? ';
        read key;

        # Rebase the tree
        if [[ "${key}" == 'y' ]] || [[ "${key}" == 'Y' ]]; then
          git cherry-pick --abort;
          git cherry-pick FETCH_HEAD~${git_revs_count_remote}..FETCH_HEAD;
          aospprojectpusher;
        fi;

      # Project is ready, break the loop
      else
        project_unfinished=0;
      fi;

    done;

    # Cleanup
    git reset --hard FETCH_HEAD;
    git stash -u;

  done;

  # ==========================================================
  # repo root
  echo '';
  croot;
}

# === SONY Nougat Rebaser ===
function sonynrebaser()
{
  # Repo root
  if [ -z "$(type -t croot)" ]; then
    while [ ! -e './build/envsetup.sh' ]; do
      cd ../;
    done;
    source ./build/envsetup.sh;
  fi;
  croot;

  # ==========================================================
  # Constants
  local projects_paths='
    device/sony/common::master
    device/sony/common-init::master
    device/sony/common-headers::aosp/LA.UM.5.5.r1
    device/sony/common-kernel::aosp/LA.UM.5.5.r1
    device/sony/dora::master
    device/sony/tone::master
    kernel/sony/msm::aosp/LA.UM.5.5.r1
    vendor/qcom/prebuilt::master
    vendor/sony::master
    ';

  # ==========================================================
  # Variables
  local git_revs_count;
  local git_revs_count_local;
  local path_name;
  local path_branch;
  local project_github;
  local project_unfinished;
  local push_command;

  # Projects loader
  for project in ${1:-${projects_paths}}; do

    # Project selection
    path_branch=${project#*::};
    path=${project%::*};
    echo '';
    echo " === ${path} [${path_branch}] ===";
    croot;

    # Ignore non-git projects
    if [ ! -d ${path}/.git ]; then
      echo '  .git project not found, ignoring...';
      continue;
    fi;
    cd ${path}/;

    # Loop until project ready
    project_unfinished=1;
    while [ ${project_unfinished} -eq 1 ]; do

      # Check origin remote
      git ls-remote --exit-code origin >/dev/null 2>&1;
      if [ $? -ne 0 ]; then
        gitraos;
        continue;
      fi;

      # Check private remote
      git ls-remote --exit-code AdrianDC >/dev/null 2>&1;
      if [ $? -ne 0 ]; then
        gitraa;
        continue;
      fi;

      # Fetch and compare
      git fetch origin ${path_branch};
      git_revs_count=$(git rev-list --left-right --count HEAD...FETCH_HEAD | tail -n 1);
      git_revs_count_local=$(echo "${git_revs_count}" | awk '{ print $1 }');
      git_revs_count_remote=$(echo "${git_revs_count}" | awk '{ print $2 }');
      echo " Differences: ${git_revs_count}";

      # Handle unupdated projects
      if [ ${git_revs_count_remote} -ne 0 ]; then
        echo '';
        printf '  > Rebase onto newest changes [y/N] ? ';
        read key;

        # Rebase the tree
        if [[ "${key}" == 'y' ]] || [[ "${key}" == 'Y' ]]; then
          git rebase --abort;
          git rebase FETCH_HEAD;
          push_command="git push -f AdrianDC HEAD:refs/heads/${path_branch}";
          echo '';
          printf "  > ${push_command} [Enter] ? ";
          read key;
          echo '';
          ${push_command};
        fi;

      # Project is ready, break the loop
      else
        project_unfinished=0;
      fi;

    done;

    # Cleanup
    git reset --hard HEAD;
    git stash -u;

  done;

  # ==========================================================
  # repo root
  echo '';
  croot;
}
