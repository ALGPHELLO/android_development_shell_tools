#!/bin/bash
#
# Copyright 2015-2018 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === Standalone Source Helper ===
# source <(curl -Ls https://github.com/AdrianDC/android_development_shell_tools/raw/master/android_host_edit.rc)

# === Edit Replace Match ===
function editreplacematch()
{
  # Usage
  if [ -z "${3}" ]; then
    echo '';
    echo ' Usage: editreplacematch <"match_line"> <"to_write"> <"files"> (Edit by replacing matches)';
    echo '';
    return;
  fi;

  # Variables
  local match_line=${1};
  local to_write=${2};
  local files=("${@:3}");

  # Replace
  sed -i "s/\(^.*${match_line}.*\)/${to_write}/g" "${files[@]}";
}

# === Edit Remove Match ===
function editremovematch()
{
  # Usage
  if [ -z "${2}" ]; then
    echo '';
    echo ' Usage: editremovematch <"match_line"> <"files"> (Edit by removing matches)';
    echo '';
    return;
  fi;

  # Variables
  local match_line=${1};
  local files=("${@:2}");

  # Remove
  sed -i "/^.*${match_line}.*/d" "${files[@]}";
}

# === Edit Remove Up To Match ===
function editremoveupto()
{
  # Usage
  if [ -z "${2}" ]; then
    echo '';
    echo ' Usage: editremoveupto <"match_line"> <"files"> (Edit by removing lines up to first match)';
    echo '';
    return;
  fi;

  # Variables
  local match_line=${1};
  local files=("${@:2}");

  # Remove up to match
  sed -i "/^.*${match_line}.*/,\$!d" "${files[@]}";
}

# === Edit Insert Above ===
function editinsertabove()
{
  # Usage
  if [ -z "${3}" ]; then
    echo '';
    echo ' Usage: editinsertabove <"match_line"> <"to_insert"> <"files"> (Edit by inserting above)';
    echo '';
    return;
  fi;

  # Variables
  local match_line=${1};
  local to_insert=${2};
  local files=("${@:3}");

  # Insert above
  sed -i "s/\(^.*${match_line}.*\)/${to_insert}\n\1/g" "${files[@]}";
}

# === Edit Insert Below ===
function editinsertbelow()
{
  # Usage
  if [ -z "${3}" ]; then
    echo '';
    echo ' Usage: editinsertbelow <"match_line"> <"to_insert"> <"files"> (Edit by inserting below)';
    echo '';
    return;
  fi;

  # Variables
  local match_line=${1};
  local to_insert=${2};
  local files=("${@:3}");

  # Insert below
  sed -i "s/\(^.*${match_line}.*\)/\1\n${to_insert}/g" "${files[@]}";
}

# === Edit Replace Multiline ===
function editreplacemultiline()
{
  # Usage
  if [ -z "${4}" ]; then
    echo '';
    echo ' Usage: editreplacemultiline <"match_first"> <"match_last"> <"replace"> <"files"> (Edit by replacing multiple lines)';
    echo '';
    return;
  fi;

  # Variables
  local match_first=${1};
  local match_last=${2};
  local replace=${3};
  local files=("${@:4}");

  # Replace section from first to last
  sed -i "/${match_first}/{:a; N; /${match_last}/!ba; s/${match_first}.*${match_last}/${replace}/; };" "${files[@]}";
}

# === Edit Trim Output ===
function edittrimoutput()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: edittrimoutput <"files"> (Edit by triming output line rewrites)';
    echo '';
    return;
  fi;

  # Trim output line rewrites
  sed -i 's/\r[^\n]*\r/\r/g' "${@}";
  sed -i 's/\(\r\|'$'\033''\[K\)//g' "${@}";
  sed -Ei 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' "${@}";
}
