#!/bin/bash
#
# Copyright 2015-2017 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === Standalone Source Helper ===
# source <(curl -Ls https://github.com/AdrianDC/android_development_shell_tools/raw/master/android_adb_tools.rc)
# source <(curl -Ls https://github.com/AdrianDC/android_development_shell_tools/raw/master/android_adb_installers.rc)

# === ADB File Pusher ===
function adbpushfile()
{
  # Usage
  if [ -z "${1}" ] || [ -z "${2}" ]; then
    echo '';
    echo ' Usage: adbpushfile <file_path> <file_target> (Push files through adb)';
    echo '';
    return;
  fi;

  # Variables
  local filepath=${1};
  local filetarget=${2};
  local filedir;

  # Debug target file
  echo -e "\e[1;36m # ${filetarget}";
  echo -en '\e[1;33m | ';
  adb shell "ls -l '${filetarget}'";

  # Push file to target
  if [ -f "${filepath}" ]; then
    echo -en '\e[1;32m |';
    adb push "${filepath}" "${filetarget}";

  # Create symlink on target
  elif [ -L "${filepath}" ]; then
    filedir=$(dirname "${filetarget}");
    filepath=$(readlink "${filepath}");
    echo -en '\e[1;32m |';
    adb shell "mkdir -p '${filedir}'";
    adb shell "ln -fs '${filepath}' '${filetarget}'";
    adb shell "ls -l '${filetarget}'" | tr -s ' ' | cut -d' ' -f 9-;

  # Debug missing file
  else
    echo -e "\e[1;31m | ${filepath} does not exist...";
  fi;

  # Restore colours
  echo -e '\e[0m';
}

# === ADB System File Listener / Installer ===
function adbif()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: adbif <command...> (Modules build listener and installed)';
    echo '';
    return;
  fi;

  # Variables
  local repo_top;
  local tmp_file;
  local tmp_installs;

  # Execute input command
  tmp_file=$(mktemp);
  "${@}" | tee "${tmp_file}";
  echo '';

  # Find new files
  repo_top=$(gettop 2> /dev/null);
  tmp_installs=$(grep -a 'target/product/[^\/]*/system' "${tmp_file}" \
               | sort \
               | uniq);

  # Install new files
  for file_path in ${tmp_installs[*]}; do
    echo "${file_path}";
    if [[ "${file_path}" == *'/system'* ]] && [[ ! "${file_path}" == *'/NOTICE_FILES'* ]]; then
      file_path=$(echo -n "${file_path}" | tail -1 \
                | sed 's/\x1B\[[0-9;]*[JKmsu]//g' \
                | sed 's/.*\/\([^\[]*.zip\).*/\1/g');
      if [ ! -f "${file_path}" ]; then
        file_path="${repo_top}/${file_path}";
      fi;
      if [ -f "${file_path}" ]; then
        adbpf "${file_path}";
      fi;
    fi;
  done;

  # End of process
  rm -f "${tmp_file}";
  echo '';
}

# === ADB System File Listener / Lister ===
function adbil()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: adbil <command...> (Modules build listener and lister)';
    echo '';
    return;
  fi;

  # Variables
  local tmp_file;
  local tmp_installs;

  # Execute input command
  tmp_file=$(mktemp);
  "${@}" | tee "${tmp_file}";
  echo '';

  # Find new files
  tmp_installs=$(grep -a "target/product/[^\/]*/system" "${tmp_file}" \
               | sort \
               | uniq);

  # List new files
  for file_path in ${tmp_installs[*]}; do
    if [[ "${file_path}" == *'/system'* ]] && [[ ! "${file_path}" == *'/NOTICE_FILES'* ]]; then
      file_path=$(echo -n "${file_path}" | tail -1 \
                | sed 's/\x1B\[[0-9;]*[JKmsu]//g' \
                | sed 's/.*\/\([^\[]*.zip\).*/\1/g');
      if [ -f "${file_path}" ]; then
        echo '';
        echo -e " \e[1;36m${file_path}\e[0m";
      fi;
    fi;
  done;

  # End of process
  rm -f "${tmp_file}";
  echo '';
}

# === ADB File Installer Helpers ===
alias adbi='adbro; adbif';

# === ADB Filer Pusher ===
function adbpf()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: adbpf <file_paths> (Advanced recursive adb files pusher)';
    echo '';
    return;
  fi;

  # Variables
  local filepath=;
  local filepathext=;
  local filepathtest=;
  local filetarget=;

  # Input files
  if [ -z "${recursive_call}" ]; then
    echo '';
  fi;
  for filepath in "${@}"; do

    # Extract full paths
    if [ -L "$(pwd)/${filepath}" ]; then
      filepath=$(pwd)/${filepath};
    elif [ -L "${filepath}" ]; then
      filepath=${filepath};
    else
      filepath=$(readlink -f "${filepath}");
    fi;
    filepathtest=${filepath};
    filepathext=${filepathtest##*.};

    # Iterate sub-folders
    if [ -d "${filepath}" ]; then
      recursive_call=true;
      adbpf "${filepath}/"*;
      recursive_call=;

    # Handle files
    else

      # Detect file targets
      if [ "${filepathext}" = 'mk' ] || [ "${filepathext}" = 'py' ]; then
        continue;
      fi;
      if [[ "${filepathtest}" == *'proprietary'* ]]; then
        filetarget=$(echo -n "${filepathtest}" | sed "s/.*proprietary\(.*\)/\/system\1/g");
        filepathtest=${filetarget};
      fi;
      if [[ "${filepathtest}" == *'vendor/'* ]]; then
        filetarget=$(echo -n "${filepathtest}" | sed "s/.*vendor\/\(.*\)/\/system\/vendor\/\1/g");
        filepathtest=${filetarget};
      fi;
      if [[ "${filepathtest}" == *'configs'* ]]; then
        filetarget=$(echo -n "${filepathtest}" | sed "s/.*configs\(.*\)/\/system\/etc\1/g");
        filepathtest=${filetarget};
      fi;
      if [[ "${filepathtest}" == *'system/'* ]]; then
        filetarget=$(echo -n "${filepathtest}" | sed "s/.*\(system\/.*\)/\/\1/g");
        filepathtest=${filetarget};
      fi;
      if [[ "${filepathtest}" == "${filepath}" ]]; then
        if [[ "${filepathtest}" == *'.xml'* ]] || [[ "${filepathtest}" == *'.conf'* ]]; then
          filetarget=/system/etc/$(basename "${filepath}");
        elif [[ "${filepathtest}" == *'.so'* ]]; then
          filetarget=/system/lib/$(basename "${filepath}");
        else
          filetarget=$(echo -n "${filepath}" | sed "s/.*\(system.*\)/\/\1/g");
        fi;
      fi;

      # Push file
      adbpushfile "${filepath}" "${filetarget}";
    fi;
  done;
}

# === ADB Pushes ===
alias adbp='adbro; adbpf';
alias adbpu='adbro; adbpushfile';

# === ADB Sideload Helper ===
function adbside()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: adbside <file_zip> [boot_reboot] (adb sideload helper)';
    echo '';
    return;
  fi;

  # Initialize adb
  echo '';
  adb devices;

  # Reboot to recovery if needed
  if ! timeout 2 sh -c "adb devices | grep -q 'recovery\|sideload'" 2> /dev/null; then
    echo -e '\e[1;33madbside: Rebooting to recovery\e[0m';
    adb reboot recovery;
  fi;

  # Wait for an adb recovery
  while true; do
    if timeout .5 sh -c "adb devices | grep -q 'recovery\|sideload'" 2> /dev/null; then
      break;
    fi;
    echo -e '\e[1;33madbside: Waiting for recovery or sideload\e[0m';
    sleep 2;
  done;

  # Wait for an adb sideload
  while true; do
    if timeout .5 sh -c "adb devices | grep -q 'sideload'" 2> /dev/null; then
      break;
    fi;

    # Start twrp sideload
    echo -e '\e[1;33madbside: Waiting for sideload\e[0m';
    adb shell twrp sideload;
    sleep 2;
  done;

  # Sideload the file
  adb sideload "${1}";

  # Wait for an adb recovery
  while true; do
    if timeout .5 sh -c "adb devices | grep -q 'recovery'" 2> /dev/null; then
      break;
    fi;
    echo -e '\e[1;33madbside: Waiting for recovery\e[0m';
    sleep 2;
  done;

  # Reboot to Android if requested
  if [ ! -z "${2}" ]; then
    echo -e '\e[1;33madbside: Rebooting to Android\e[0m';
    adb shell reboot;
  fi;
  echo '';
}

# === ADB Force Optimization ===
function adbu()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: adbu <package_name> (Force optimization of a package)';
    echo '';
    return;
  fi;

  # Variables
  local pid;

  # Introduction
  echo '';
  echo " [ Launching '${1}' ]";
  echo '';

  # Optimize
  echo '    Optimizing...';
  sudo adb "${2}" shell pm force-dex-opt "${1}";

  # Force close
  echo '    Killing...';
  sudo adb "${2}" shell pkill "${1}";
  pid=$(sudo adb shell ps | grep "${1}" | awk '{ print $2 }');
  sudo adb shell kill "${pid}" > /dev/null;
  echo '';
}

# === ADB Git Commit Pusher ===
function adbgitpf()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: adbgitpf <commit_sha1> (Push files through adb from commit)';
    echo '';
    return;
  fi;

  # Variables
  local file_path;
  local status;
  local tmpfile;

  # Push files through adb from commit
  adbro;
  tmpfile=$(mktemp);
  git diff-tree --no-commit-id --name-status -r "${1}" >"${tmpfile}";
  while read -r line; do
    status=$(echo "${line}" | awk '{ print $1 }');
    file_path=$(echo "${line}" | awk '{ print $2 }');
    if [[ "${status}" == *'D'* ]] || [[ "${file_path}" == *'.mk'* ]]; then
      continue;
    fi;
    adbpf "${file_path}";
  done < "${tmpfile}";
  rm -f "${tmpfile}";
}

# === MultiROM File Pusher ===
function adbpmrom()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: adbpmrom <file> (MultiROM file pusher)';
    echo '';
    return;
  fi;

  # Variables
  local filepath=${1};
  local filetarget;

  # Target file selection
  if [ ! -z "${2}" ]; then
    filetarget=/sdcard/multirom/${2}/${1};
  else
    filetarget=/sdcard/multirom/${1};
  fi;

  # Push file
  adbpushfile "${filepath}" "${filetarget}";
}

# === MultiROM Encryption File Pusher ===
function adbpmromenc()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: adbpmromenc <file> (MultiROM encryption file pusher)';
    echo '';
    return;
  fi;

  # MultiROM encryption file pusher
  adbpmrom "${1}" enc;
}

# === ADB apk Installers ===
function adbapkinstall()
{
  # Usage: adbapkinstall (Install all available apk files)

  # Install all available apk files
  for file in *.apk; do
    echo "-- ${file} --";
    adb install "${file}";
  done;
}
