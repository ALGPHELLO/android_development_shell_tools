#!/bin/bash
# ======================================
#   Developed by Adrian DC - 2015-2017
# ======================================

# === ADB File Pusher ===
function adbpushfile()
{
  # Usage
  if [ -z "${1}" ] || [ -z "${2}" ]; then
    echo '';
    echo ' usage: adbpushfile <file_path> <file_target>';
    echo '';
    return;
  fi;

  # Variables
  local filepath=${1};
  local filetarget=${2};

  # Debug target file
  printf '\e[1;36m # '${filetarget}'\n';
  printf '\e[1;33m | ';
  adb shell "ls -l '${filetarget}'";

  # Push file to target
  if [ -f "${filepath}" ]; then
    printf '\e[1;32m |';
    adb push "${filepath}" "${filetarget}";

  # Create symlink on target
  elif [ -L "${filepath}" ]; then
    printf '\e[1;32m |';
    adb shell "mkdir -p '$(dirname ${filetarget})'";
    adb shell "ln -fs '$(readlink ${filepath})' '${filetarget}'";
    adb shell "ls -l '${filetarget}'" | tr -s ' ' | cut -d' ' -f 9-;

  # Debug missing file
  else
    printf "\e[1;31m | ${filepath} does not exist...\n";
  fi;

  # Restore colours
  printf '\e[0m\n';
}

# === ADB System File Listener / Installer ===
function adbif()
{
  # Variables
  local repo_top=$(gettop 2> /dev/null);
  local tmp_file=$(mktemp);

  # Execute input command
  ${@} | tee ${tmp_file};
  echo '';

  # Find new files
  local tmp_installs=$(grep -a 'target/product/[^\/]*/system' ${tmp_file} \
                     | sort \
                     | uniq);

  # Install new files
  for file_path in ${tmp_installs[*]}; do
    echo ${file_path};
    if [[ "${file_path}" =~ '/system' && ! "${file_path}" =~ '/NOTICE_FILES' ]]; then
      file_path=$(printf "${file_path}" | tail -1 \
                | sed 's/\x1B\[[0-9;]*[JKmsu]//g' \
                | sed 's/.*\/\([^\[]*.zip\).*/\1/g');
      if [ ! -f "${file_path}" ]; then
        file_path="${repo_top}/${file_path}";
      fi;
      if [ -f "${file_path}" ]; then
        adbpf "${file_path}";
      fi;
    fi;
  done;

  # End of process
  rm -f ${tmp_file};
  echo '';
}

# === ADB System File Listener / Lister ===
function adbil()
{
  # Variables
  local tmp_file=$(mktemp);

  # Execute input command
  ${@} | tee ${tmp_file};
  echo '';

  # Find new files
  local tmp_installs=$(grep -a "target/product/[^\/]*/system" ${tmp_file} \
                     | sort \
                     | uniq);

  # List new files
  for file_path in ${tmp_installs[*]}; do
    if [[ "${file_path}" =~ '/system' && ! "${file_path}" =~ '/NOTICE_FILES' ]]; then
      file_path=$(printf "${file_path}" | tail -1 \
                | sed 's/\x1B\[[0-9;]*[JKmsu]//g' \
                | sed 's/.*\/\([^\[]*.zip\).*/\1/g');
      if [ -f "${file_path}" ]; then
        echo '';
        echo -e " \e[1;36m${file_path}\e[0m";
      fi;
    fi;
  done;

  # End of process
  rm -f ${tmp_file};
  echo '';
}

# === ADB File Installer Helpers ===
function adbi()  { adbro; adbif ${@}; }
function adbii() { adbif ${@}; }

# === ADB Filer Pusher ===
function adbpf()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: adbpf <file_paths>';
    echo '';
    return;
  fi;

  # Variables
  local filepath='';
  local filepathext='';
  local filepathtest='';
  local filetarget='';
  local filepaths="${@}";

  # Input files
  if [ -z "${recursive_call}" ]; then
    echo '';
  fi;
  for filepath in ${filepaths}; do

    # Extract full paths
    if [ -L "$(pwd)/${filepath}" ]; then
      filepath="$(pwd)/${filepath}";
    elif [ -L "${filepath}" ]; then
      filepath="${filepath}";
    else
      filepath=$(readlink -f "${filepath}");
    fi;
    filepathtest=${filepath};
    filepathext=${filepathtest##*.};

    # Iterate sub-folders
    if [ -d "${filepath}" ]; then
      recursive_call=true;
      adbpf "${filepath}/"*;
      recursive_call=;

    # Handle files
    else

      # Detect file targets
      if [ "${filepathext}" = 'mk' ] || [ "${filepathext}" = 'py' ]; then
        continue;
      fi;
      if [[ "${filepathtest}" =~ 'proprietary' ]]; then
        filetarget=$(printf "${filepathtest}" | sed "s/.*proprietary\(.*\)/\/system\1/g");
        filepathtest=${filetarget};
      fi;
      if [[ "${filepathtest}" =~ 'vendor/' ]]; then
        filetarget=$(printf "${filepathtest}" | sed "s/.*vendor\/\(.*\)/\/system\/vendor\/\1/g");
        filepathtest=${filetarget};
      fi;
      if [[ "${filepathtest}" =~ 'configs' ]]; then
        filetarget=$(printf "${filepathtest}" | sed "s/.*configs\(.*\)/\/system\/etc\1/g");
        filepathtest=${filetarget};
      fi;
      if [[ "${filepathtest}" =~ 'system/' ]]; then
        filetarget=$(printf "${filepathtest}" | sed "s/.*\(system\/.*\)/\/\1/g");
        filepathtest=${filetarget};
      fi;
      if [[ "${filepathtest}" == "${filepath}" ]]; then
        if [[ "${filepathtest}" =~ '.xml' ]] || [[ "${filepathtest}" =~ '.conf' ]]; then
          filetarget="/system/etc/"$(basename ${filepath});
        elif [[ "${filepathtest}" =~ '.so' ]]; then
          filetarget="/system/lib/"$(basename ${filepath});
        else
          filetarget=$(printf "${filepath}" | sed "s/.*\(system.*\)/\/\1/g");
        fi;
      fi;

      # Push file
      adbpushfile "${filepath}" "${filetarget}";
    fi;
  done;
}

# === ADB Pushes ===
alias adbp='adbro; adbpf';

# === MultiROM File Pusher ===
function adbpmrom()
{
  # Variables
  local filepath="${1}";
  local filetarget;

  # Target file selection
  if [ ! -z "${2}" ]; then
    filetarget="/sdcard/multirom/${2}/${1}";
  else
    filetarget="/sdcard/multirom/${1}";
  fi;

  # Push file
  adbpushfile "${filepath}" "${filetarget}";
}

# === MultiROM Encryption File Pusher ===
function adbpmromenc()
{
  adbpmrom "${1}" enc;
}

# === ADB apk Installers ===
function adbapkinstall()
{
  # Install all available apk files
  for file in *.apk; do
    echo "-- ${file} --";
    adb install "${file}";
  done;
}
