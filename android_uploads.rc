#!/bin/bash
# ======================================
#   Developed by Adrian DC - 2015-2016
# ======================================

# === File Uploader ===
function fileupl()
{
  # Variables
  local path="${1}";
  local target="${2}";

  # File full path
  if [ -f "${path}" ]; then
    path=$(readlink -f "${path}");
  fi;

  # Upload file to target
  $(getbash)/android_upload_basketbuild.sh "${path}" "${target}";
}

# === Dev File Uploader ===
function devupl()
{
  # Variables
  local filepath="${1}";
  if [ -z "${filepath}" ] && [ -f "${PackageResult}" ]; then
    filepath="${PackageResult}";
  fi;

  # File upload to Development
  fileupl "${filepath}" 'Development';
}

# === Private File Uploader ===
function privupl()
{
  # Variables
  local filepath="${1}";
  if [ -z "${filepath}" ] && [ -f "${PackageResult}" ]; then
    filepath="${PackageResult}";
  fi;

  # File upload to .private
  fileupl "${filepath}" '.private';
}

# === TWRP File Uploader ===
function twrpbupl()
{
  # Variables
  local device="${1}";
  local name="${device^}";

  # File uploads to TWRP
  fileupl twrp-3.0.*-r*-boot-${device}.img "${name}/TWRP-Recovery";
  fileupl twrp-3.0.*-r*-fota-${device}.zip "${name}/TWRP-Recovery";
}

# === Make and upload ===
function mmmupl()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: mmmupl packageorpath';
    echo '';
    return;
  fi;

  # Build and upload to Development
  mmmzip "${1}";
  devupl "${PackageResult}";
}

# === Bootimage File Uploader ===
function devuplboot()
{
  # Variables
  local cwd=$(pwd);
  local device="${1}";
  croot;

  # Rename and upload
  mv "./out/target/product/${device}/boot.img" "./out/target/product/${device}/boot-${device}.img";
  devupl "./out/target/product/${device}/boot-${device}.img";

  # Restore path
  cd "${cwd}/";
}

# === ROM Device Upload ===
function devuplrom()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: devuplrom device [folder_path]';
    echo '';
    return;
  fi;

  # Variables
  local cwd=$(pwd);
  local device="${1}";
  local upload="${2}";
  local target=$(codenametotarget "${device}");
  local romfiles;
  local romfile;
  if [ -z "${upload}" ]; then
    upload="Development";
  fi;

  # ROM detection
  croot;
  romfiles=$(find "./out/target/product/${device}/"*"${device}"*".zip" \
                  "./out/target/product/${device}/"*"${target}"*".zip" \
                  -mtime -1 | sort);
  romfile='';
  for romfiletest in ${romfiles}; do
    if [ -f "${romfiletest}.md5sum" ]; then
      romfile="${romfiletest}";
    fi;
  done;
  if [ -z "${romfile}" ]; then
    romfile=$(echo "${romfiles}" | head -n1 | awk '{ print $NF }');
  fi;

  # ROM upload
  if [ ! -z "${romfile}" ]; then
    fileupl "${romfile}" "${upload}";
    export bash_android_uploaded_file="${romfile}";
  else
    export bash_android_uploaded_file='';
  fi;

  # End of process
  cd "${cwd}";
}

# === Adaptive Device Upload ===
function autodevupl()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: autodevupl device [folder_path [file_path]]';
    echo '';
    return;
  fi;

  # Variables
  local rom_device="${1}";
  local rom_phone="${rom_device^}";
  local rom_target="${2}";
  local rom_files="${3}";

  # Target not final
  if [[ ! "${rom_target}" =~ "${rom_phone}" ]]; then

    # LineageOS
    if [[ "${rom_target}" =~ 'lineage' ]]; then
      rom_target="${rom_phone}/LineageOS-14.1";

    # Development
    else
      rom_target='Development';
    fi;
  fi;

  # Upload files
  if [ -z "${rom_files}" ]; then
    devuplrom "${rom_device}" "${rom_target}";
  else
    fileupl "${rom_files}" "${rom_target}";
  fi;
}

# === Pushbullet ROM Status ===
function pushbrom()
{
  # Access ROM root
  local cwd=$(pwd);
  croot;

  # Variables
  local device="${1}";
  local rom="${2:-ROM}";

  # ROM file
  romfile=$(find "./out/target/product/${device}/"*"${device}"*".zip" -mmin -30 | tail -n 1);
  if [ ! -z "${romfile}" ]; then
     pushb "${rom} for ${device} ready";
  else
     pushb "${rom} for ${device} failed";
  fi;

  # Restore ROM path
  cd "${cwd}";
}
