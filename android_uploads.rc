#!/bin/bash
# ======================================
#   Developed by Adrian DC - 2015-2017
# ======================================

# === File Uploader Mega.nz ===
function fileupl()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: fileupl <file_path> [target_folder]';
    echo '';
    return;
  fi;

  # Ignore missing credentials
  if [ ! -f ~/.megarc ]; then
    echo '';
    echo ' megatools: ~/.megarc is missing, please read megatools documentation';
    echo '';
    return;
  fi;

  # Variables
  local path="${1}";
  local target="${2:-Development}";
  local time_start=$(date +%s);
  local time_span;

  # Load path from PackageResult
  if [ -z "${path}" ] && [ -f "${PackageResult}" ]; then
    path="${PackageResult}";
  fi;

  # File full path
  if [ -f "${path}" ]; then
    path=$(readlink -f "${path}");
  fi;

  # Detect main target inclusion
  if [[ ! "${target}" =~ '/Root/' ]]; then
    target="/Root/Android/${target}";
  fi;

  # Upload header informations
  echo '';
  echo -e " \e[1;33m[ Uploading to the server - Path '${target}' ]\e[0m";

  # Use AndroidFiles to save the file
  if [ ! -z "${ANDROID_FILES_PATH}" ] && [[ "${target}" =~ 'Root/Android' ]]; then
    androidfilesadd "${path}" "${target#/Root/Android/}";
  fi;

  # Remove local megatools cache
  rm -rf /tmp/*.megatools.cache;

  # Upload file to target
  echo '';
  megarm "${target}/$(basename ${path})" 2>/dev/null;
  megamkdir "${target}" 2>/dev/null;
  megaput --path "${target}" "${path}";

  # Reload mega.nz account
  meganzreload;

  # Show upload time
  time_span=$(($(date +%s)-${time_start}));
  echo -e " \e[1;37m[ Upload done in ${time_span} secs ]\e[0m";
  echo '';
}

# === Fast File Uploader ===
function fastupl()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: fastupl <device_name> [none/zip/bootimage] (Make zip and upload)';
    echo '';
    return;
  fi;

  # File upload to Private
  fileupl "${1}" '/Root/Private';

  # File download command
  local filename=$(basename "${1}");
  local cmd="fileget '/Root/Private/${filename}';";

  # Additional install commands
  if [ "${2}" = 'zip' ]; then
    cmd="${cmd} adbside '${filename}' true;";
  elif [ "${2}" = 'bootimage' ]; then
    cmd="${cmd} fboot '${filename}';";
  fi;

  # Command outputs
  echo -e '  \e[1;32mDirect download:\e[0m';
  echo "${cmd}" | xclip -selection c;
  echo "   ${cmd}";
  echo '';
}

# === Make and upload ===
function mmmupl()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: mmmupl <package_or_path> [bool_partial_build] (Make zip and upload)';
    echo '';
    return;
  fi;

  # Build and package zip
  export MMMZIP_BUILD_PARTIAL=${2:-true};
  mmmzip "${1}";
  export MMMZIP_BUILD_PARTIAL=;

  # Upload to Private
  fastupl "${PackageResult}" 'zip';
}

# === Bootimage File Uploader ===
function devuplboot()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: devuplboot <device> (Upload ROM bootimage)';
    echo '';
    return;
  fi;

  # Variables
  local cwd=$(pwd);
  local device="${1}";
  croot;

  # Rename and upload
  mv "./out/target/product/${device}/boot.img" "./out/target/product/${device}/boot-${device}.img";
  fileupl "./out/target/product/${device}/boot-${device}.img";

  # Restore path
  cd "${cwd}/";
}

# === ROM Device Upload ===
function devuplrom()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: devuplrom <device> [folder_path] (Upload ROM build)';
    echo '';
    return;
  fi;

  # Variables
  local cwd=$(pwd);
  local device="${1}";
  local upload="${2}";
  local target=$(codenametotarget "${device}");
  local romfiles;
  local romfile;
  if [ -z "${upload}" ]; then
    upload="Development";
  fi;

  # ROM detection
  croot;
  romfiles=$(find "./out/target/product/${device}/"*"${device}"*".zip" \
                  "./out/target/product/${device}/"*"${target}"*".zip" \
                  -mtime -1 | sort);
  romfile='';
  for romfiletest in ${romfiles}; do
    if [ -f "${romfiletest}.md5sum" ]; then
      romfile="${romfiletest}";
    fi;
  done;
  if [ -z "${romfile}" ]; then
    romfile=$(echo "${romfiles}" | head -n1 | awk '{ print $NF }');
  fi;

  # ROM upload
  if [ ! -z "${romfile}" ]; then
    fileupl "${romfile}" "${upload}";
    export bash_android_uploaded_file="${romfile}";
  else
    export bash_android_uploaded_file='';
  fi;

  # End of process
  cd "${cwd}";
}

# === Pushbullet ROM Status ===
function pushbrom()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: pushbrom <device_name> [rom_name] (Notify build success)';
    echo '';
    return;
  fi;

  # Access ROM root
  local cwd=$(pwd);
  croot;

  # Variables
  local device="${1}";
  local rom="${2:-ROM}";
  local host=$(hostname);

  # ROM file
  romfile=$(find "./out/target/product/${device}/"*"${device}"*".zip" -mmin -30 | tail -n 1);
  if [ ! -z "${romfile}" ]; then
     pushb "${host}: ${rom} for ${device} ready";
  else
     pushb "${host}: ${rom} for ${device} failed";
  fi;

  # Restore ROM path
  cd "${cwd}";
}

# === File Downloader Mega.nz ===
function fileget()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: fileget <remote_path> [boot_remove_remote] (Download from MEGA.nz)';
    echo '';
    return;
  fi;

  # Ignore missing credentials
  if [ ! -f ~/.megarc ]; then
    echo '';
    echo ' megatools: ~/.megarc is missing, please read megatools documentation';
    echo '';
    return;
  fi;

  # Variables
  local path="${1}";
  local remove_remote="${2}";
  local file_name=$(basename "${path}");
  local time_start=$(date +%s);
  local time_span;

  # Detect main target inclusion
  if [[ ! "${path}" =~ '/Root/' ]]; then
    path="/Root/Android/${path}";
  fi;

  # Upload header informations
  echo '';
  echo -e " \e[1;33m[ Download from the server - Path '${path#/Root/Android/}' ]\e[0m";

  # Remove local megatools cache
  rm -rf /tmp/*.megatools.cache;

  # Save local file
  if [ -f "${file_name}" ]; then
    rm -f "${file_name}.tmp";
    mv "${file_name}" "${file_name}.tmp";
  fi;

  # Download file from target
  echo '';
  megaget --path ./ "${path}";

  # Delete remote file
  if [ "${remove_remote}" = 'true' ] && [ -f "${file_name}" ]; then
    megarm "${path}";
  fi;

  # Clean saved file
  if [ -f "${file_name}" ]; then
    rm -f "${file_name}.tmp";

  # Warn about failed download
  else
    echo '';
    echo -e " \e[1;31m[ Download failed ]\e[0m";
    echo '';
    return;
  fi;

  # Show download time
  echo '';
  time_span=$(($(date +%s)-${time_start}));
  echo -e " \e[1;37m[ Download done in ${time_span} secs ]\e[0m";
  echo '';
}

# === AndroidFiles Adder ===
function androidfilesadd()
{
  # Usage
  if [ -z "${2}" ]; then
    echo '';
    echo ' Usage: androidfilesadd <file_path> <target_folder> (Add file to AndroidFiles)';
    echo '';
    return;
  fi;

  # Check ANDROID_FILES_PATH is defined
  if [ -z "${ANDROID_FILES_PATH}" ]; then
    echo '';
    echo ' You need to edit your ~/.bashrc to add :';
    echo '  # AndroidFiles';
    echo '  export ANDROID_FILES_PATH=/media/.../AndroidFiles;';
    echo '';
    return;
  fi;

  # Variables
  local path="${1}";
  local target="${2}";

  # Add new file to AndroidFiles
  echo '';
  printf ' \e[1;33mandroidfilesadd:\e[0m ';
  mkdir -p "${ANDROID_FILES_PATH}/${target}";
  cp -fv "${path}" "${ANDROID_FILES_PATH}/${target}";
}

# === AndroidFiles Syncer ===
function androidfilessync()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: androidfilessync <--upload/--download> (Sync AndroidFiles folder)';
    echo '';
    return;
  fi;

  # Check ANDROID_FILES_PATH is defined
  if [ -z "${ANDROID_FILES_PATH}" ]; then
    echo '';
    echo ' You need to edit your ~/.bashrc to add :';
    echo '  # AndroidFiles';
    echo '  export ANDROID_FILES_PATH=/media/.../AndroidFiles;';
    echo '';
    return;
  fi;

  # Use megamirror inside AndroidFiles folder
  local cwd=$(pwd);
  cd "${ANDROID_FILES_PATH}";
  megamirror . '/Root/Android' "${1}" "${2}";
  cd "${cwd}";

  # Reload mega.nz account
  meganzreload;
}

# === AndroidFiles Folder ===
function androidfilesopen()
{
  # Usage: androidfilesopen (Open AndroidFiles folder)

  # Open AndroidFiles folder
  xdg-open "${ANDROID_FILES_PATH}/";
}
