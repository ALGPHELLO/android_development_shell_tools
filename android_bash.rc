#!/bin/bash
# ======================================
#   Developed by Adrian DC - 2015-2017
# ======================================

# === Android Shell Tools Folder ===
bash_android_dir=$(dirname ${BASH_SOURCE[0]});

# === Android Shell Tools Update ===
function bashup()
{
  # Usage: bashup (Reloads android_shell_tools scripts)

  # Reload sources
  source "${bash_android_dir}/android_bash.rc";
  echo '';
  echo -e ' \e[1;33mandroid_shell_tools by AdrianDC: \e[0;33mFunctions loaded properly\e[0m';
  echo '';
}

# === Android Shell Tools Sources ===
bash_android_sources="\
  \
  ${bash_android_dir}/android_adb.rc \
  ${bash_android_dir}/android_adb_assets.rc \
  ${bash_android_dir}/android_adb_debug.rc \
  ${bash_android_dir}/android_adb_flash.rc \
  ${bash_android_dir}/android_adb_installers.rc \
  ${bash_android_dir}/android_adb_logs.rc \
  ${bash_android_dir}/android_adb_tools.rc \
  \
  ${bash_android_dir}/android_changelog.rc \
  \
  ${bash_android_dir}/android_devices.rc \
  \
  ${bash_android_dir}/android_edit.rc \
  \
  ${bash_android_dir}/android_fetch.rc \
  \
  ${bash_android_dir}/android_gerrit.rc \
  ${bash_android_dir}/android_gerritssh.rc \
  \
  ${bash_android_dir}/android_git.rc \
  ${bash_android_dir}/android_git_pick.rc \
  ${bash_android_dir}/android_git_stats.rc \
  \
  ${bash_android_dir}/android_grep.rc \
  \
  ${bash_android_dir}/android_kernel_builders.rc \
  ${bash_android_dir}/android_kernel_defconfig.rc \
  ${bash_android_dir}/android_kernel_editors.rc \
  ${bash_android_dir}/android_kernel_helpers.rc \
  ${bash_android_dir}/android_kernel_tools.rc \
  \
  ${bash_android_dir}/android_linux.rc \
  \
  ${bash_android_dir}/android_push.rc \
  \
  ${bash_android_dir}/android_pushbullet.rc \
  \
  ${bash_android_dir}/android_release_builders.rc \
  ${bash_android_dir}/android_release_helpers.rc \
  ${bash_android_dir}/android_release_packages.rc \
  \
  ${bash_android_dir}/android_remotes.rc \
  \
  ${bash_android_dir}/android_repo_builders.rc \
  ${bash_android_dir}/android_repo_changes.rc \
  ${bash_android_dir}/android_repo_cleaners.rc \
  ${bash_android_dir}/android_repo_compare.rc \
  ${bash_android_dir}/android_repo_helpers.rc \
  ${bash_android_dir}/android_repo_init.rc \
  ${bash_android_dir}/android_repo_referenced.rc \
  \
  ${bash_android_dir}/android_rom_aicp.rc \
  ${bash_android_dir}/android_rom_aosp_sony8960.rc \
  ${bash_android_dir}/android_rom_aosp_sonyaosp.rc \
  ${bash_android_dir}/android_rom_aospcaf.rc \
  ${bash_android_dir}/android_rom_legacyxperia.rc \
  ${bash_android_dir}/android_rom_lineageos.rc \
  ${bash_android_dir}/android_rom_lineageos_sony8996.rc \
  ${bash_android_dir}/android_rom_lineageos_sonysodp.rc \
  ${bash_android_dir}/android_rom_projects.rc \
  \
  ${bash_android_dir}/android_shortcuts.rc \
  \
  ${bash_android_dir}/android_tools.rc \
  \
  ${bash_android_dir}/android_uploads.rc \
  \
  ${bash_android_dir}/megatools_mirror.rc \
  ${bash_android_dir}/megatools_reload.rc \
";

# === Android Shell Tools Importations ===
for bash_source in ${bash_android_sources};
do
  source ${bash_source};
done;

# === Android Shell Tools Prebuilt Files ===
export bash_files_strace_32=${bash_android_dir}/android_files/strace_arm32;
export bash_files_strace_64=${bash_android_dir}/android_files/strace_arm64;
export bash_flashable_android_base=${bash_android_dir}/android_files/flashable_android_base.zip;
export bash_scripts_kernel_injector=${bash_android_dir}/android_files/scripts_kernel_injector;
export bash_sign_apk_dir=${bash_android_dir}/android_signapk;
export bash_updater_flash_boot=${bash_android_dir}/android_files/updater_script_flash_boot;
export bash_updater_flash_fota=${bash_android_dir}/android_files/updater_script_flash_fota;
export bash_updater_install_system=${bash_android_dir}/android_files/updater_script_install_system;
export bash_updater_kernel_injector=${bash_android_dir}/android_files/updater_script_kernel_injector;
export bash_updater_multirom_secondary=${bash_android_dir}/android_files/updater_script_multirom_secondary;

# === Android Shell Tools Functions Editor ===
function bashe()
{
  # Usage: bashe <words> <to> <search> (Direct access to related sources)

  # Variables
  local files='';

  # Study all script files
  for bash_source in ${bash_android_sources}; do
    for word in ${@}; do
      grep -aiq "${word}" "${bash_source}";

      # List found files
      if [ ${?} -eq 0 ]; then
        files="${files} ${bash_source}";
        continue;
      fi;
    done;
  done;

  # Open listed files
  if [ ! -z "${files}" ]; then
    gedit ${files};
  fi;
}

# === Android Shell Tools Syncer ===
function bashsync()
{
  # Usage: bashsync (Download new android_shell_tools changes)

  # Download upstream changes
  local currentdir=${PWD};
  cd "${bash_android_dir}/";
  git fetch origin;
  git reset origin/$(git rev-parse --abbrev-ref HEAD);
  git stash -u;
  git submodule init;
  git submodule update;
  cd "${currentdir}/";
  bashup;
}

# === Android Shell Tools Pusher ===
function bashpush()
{
  # Usage: bashpush (Commit new changes to android_shell_tools)

  # Update README.md
  shtoolsreadme;

  # Commit changes to upstream
  local currentdir=${PWD};
  cd "${bash_android_dir}/";
  git add . -Ap;
  git commit -s;
  git push -f origin HEAD:$(git rev-parse --abbrev-ref HEAD);
  cd "${currentdir}/";
  bashup;
}

# === Android Shell Tools Amend ===
function bashamend()
{
  # Usage: bashamend (Amend new changes to android_shell_tools)

  # Update README.md
  shtoolsreadme;

  # Amend changes to upstream
  local currentdir=${PWD};
  cd "${bash_android_dir}/";
  git add . -Ap;
  git commit -s --amend;
  git push -f origin HEAD:$(git rev-parse --abbrev-ref HEAD);
  cd "${currentdir}/";
  bashup;
}

# === Android Shell Tools Differ ===
function bashdiff()
{
  # Usage: bashdiff (Compare with upstream android_shell_tools)

  # Compare with upstream
  local currentdir=${PWD};
  cd "${bash_android_dir}/";
  git fetch origin;
  git diff HEAD origin/$(git rev-parse --abbrev-ref HEAD);
  git diff HEAD;
  cd "${currentdir}/";
}

# === Android Shell Tools Log ===
function bashlog()
{
  # Usage: bashlog (Displays android_shell_tools history)

  # Display project history
  local currentdir=${PWD};
  cd "${bash_android_dir}/";
  git log --pretty=oneline -n 10;
  cd "${currentdir}/";
}

# === Android Shell Tools Reset ===
function bashreset()
{
  # Usage: bashreset (Reset project to remote HEAD)

  # Reset project to remote HEAD
  cd "${bash_android_dir}/";
  git fetch origin;
  git reset origin/$(git rev-parse --abbrev-ref HEAD);
  git diff --stat HEAD;
}

# === Android Shell Tools README.md Updater ===
function shtoolsreadme()
{
  # Usage: shtoolsreadme (Refresh README.md functions usages)

  # Variables
  local delimiter_start='<!-- Functions Start -->';
  local delimiter_end='<!-- Functions End -->';
  local line;
  local line_function;
  local line_standalone;
  local line_type;
  local line_usage;
  local path;
  local readme_functions='';

  # Read all sources
  for file in "${bash_android_dir}/android_bash.rc" ${bash_android_sources}; do

    # Handle file path
    path=${file//\//\\\/};
    path=${path##*/};

    # Detect standalone ready scripts
    line_standalone=$(grep -a '^# source <(curl -Ls' "${file}");

    # Create source section
    readme_functions+="* #### Source: [${path}](${path})${line_standalone:+  - Ready for standalone import}\n";

    # Inject standalone import script
    if [ ! -z "${line_standalone}" ]; then
      line_standalone=${line_standalone//# source <\(curl -Ls/};
      line_standalone=${line_standalone//)/};
      readme_functions+="    \`\`\`Shell\n";
      for url in ${line_standalone}; do
        readme_functions+="    source \<\(curl -Ls ${url//\//\\\/}\)\n";
      done;
      readme_functions+="    \`\`\`\n";
    fi;

    # Handle source contents
    while read line; do

      # Parse source functions
      line_function=${line};
      line_function=${line_function#function };
      line_function=${line_function#alias };
      line_function=${line_function%%()*};
      line_function=${line_function%%=*};
      line_type=${line};
      line_type=${line_type//*alias*/Alias};
      line_type=${line_type//*function*/Function};
      line_usage='';

      # Parse function content
      if [ "${line_type}" = 'Function' ]; then

        # Parse single line function
        if [[ "${line}" == *"${line_function}()"*"{"*"}" ]]; then
          line_usage=${line#*{ };
          line_usage=${line_usage% \}*};
          line_usage=${line_usage%;};

        # Parse function usage
        else
          line_usage=$(grep -a "Usage: ${line_function}\( \|'\|\"\)" "${file}");
          line_usage=${line_usage#*Usage: };
          line_usage=${line_usage%;};
          line_usage=${line_usage%$"'"};
          line_usage=${line_usage%$'"'};
          line_usage=${line_usage//\(/**\\\(};
          line_usage=${line_usage//\)/\\\)**};

          # Warning about missing description
          if [[ ! "${line_usage}" == *"("*")"* ]]; then
            echo " ${path}: ${line_type} '${line_function}' has no description";
          fi;
        fi;

      # Parse alias content
      elif [ "${line_type}" = 'Alias' ]; then
        line_usage=${line};
        line_usage=${line_usage#*=};
        line_usage=${line_usage%;};
        line_usage=${line_usage#$"'"};
        line_usage=${line_usage#$'"'};
        line_usage=${line_usage%$"'"};
        line_usage=${line_usage%$'"'};
      fi;

      # Apply usage formattings
      if [ ! -z "${line_usage}" ]; then
        line_usage=${line_usage//\</&lt;};
        line_usage=${line_usage//\>/&gt;};
        line_usage=${line_usage//\//\\\/};
        line_usage=${line_usage//\|/\\\\\|};
        line_usage=${line_usage//\&/\\\&};
        line_usage=${line_usage//$"'"/\\$"'"};
        line_usage=${line_usage//$'"'/\\$'"'};
        line_usage=${line_usage//\$/\\\$};
        line_usage=": *${line_usage}*";

      # Warning about missing usages
      else
        echo " ${path}: ${line_type} '${line_function}' has no usage";
      fi;

      # Append function details
      readme_functions+="  * [**${line_function}** (${line_type})](${path})${line_usage}\n";

    done < <(grep -a "^alias.*=\|^function .*()" "${file}");

    # Sections separation
    readme_functions+="\n---\n";

  done;

  # Generation information
  readme_functions+="* #### Automatically generated by [shtoolsreadme](android_bash.rc) for [android_shell_tools](README.md)\n";

  # Inject README.md changes
  sed -i "/${delimiter_start}/{p; :a; N; /${delimiter_end}/!ba; s/.*\n/${readme_functions}/; };" "${bash_android_dir}/README.md";
}
