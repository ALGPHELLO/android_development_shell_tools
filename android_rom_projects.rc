#!/bin/bash
#
# Copyright 2015-2017 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === Git Branch Pusher ===
function gitbranchpusher()
{
  # Usage: gitbranchpusher [y/n] [remote_url] (Push to project specific branch)

  # Variables
  local project_branch;
  local project_dir=${PWD};
  local repo_dir=${PWD};
  local param_send=${1};
  local remote=${2:-project};

  # Check project
  if [ ! -d "${project_dir}/.git" ]; then
    echo '';
    echo ' Current project was not found...';
    echo '';
    return;
  fi;

  # Find repository
  while [[ "${repo_dir}" != '/' && ! -d "${repo_dir}/.repo" ]]; do
    repo_dir=$(readlink -f "${repo_dir}/..");
  done;
  if [ ! -d "${repo_dir}/.repo" ]; then
    echo '';
    echo ' Repository was not found';
    echo '';
    return;
  fi;

  # Status
  project_dir=${project_dir#${repo_dir}/};
  case "${project_dir}" in
    frameworks\/base)
      if [[ "${repo_dir}" =~ 'LineageOS' ]]; then
        project_branch='lineage_sonyaosp';
      elif [[ "${repo_dir}" =~ 'AOSP-CAF' ]]; then
        project_branch='aosp_caf';
      elif [[ "${repo_dir}" =~ 'AOSP-o' ]]; then
        project_branch='aosp_sony8960_o';
      elif [[ "${repo_dir}" =~ 'AOSP-master' ]]; then
        project_branch='aosp_sony8960_master';
      else
        project_branch='aosp_sony8960_n';
      fi;;
    *)
      project_branch=${project_dir//\//_};;
  esac;
  echo '';
  echo " Project directory: ${project_dir}";
  echo " Repository path: ${repo_dir}";
  echo '';

  # Check 'project' remote existence
  if [ "${remote}" = 'project' ]; then
    git ls-remote --exit-code 'project' >/dev/null 2>&1;
    if [ ${?} -ne 0 ]; then
      echo -e " \e[1;33mInformation:\e[0m Remote 'project' not found. Launching 'gitrap'...";
      gitrap;
      echo '';
    fi;
  fi;

  # Fetch upstream remote
  git fetch "${remote}" ${project_branch};
  git rev-list --left-right --count FETCH_HEAD...HEAD;
  echo '';

  # Confirmation
  command="git push -f ${remote} HEAD:refs/heads/${project_branch}";
  echo " ${command}";
  printf '  > Proceed with project push [y/N] ? ';
  notify-send "gitbranchpusher: Push ${project_dir} ?" 2> /dev/null;
  if [ -z "${param_send}" ]; then
    read -t 20 key;
  else
    key='y';
    echo "${key}";
  fi;

  # Upload to remote
  echo '';
  if [ "${key}" = 'y' ] || [ "${key}" = 'Y' ]; then
    ${command};
  elif [ "${key}" = 'n' ] || [ "${key}" = 'N' ]; then
    echo '  < Upload ignored. Consider uploading later';
  else
    echo '  < Upload ignored after timeout... Consider uploading later';
  fi;
  echo '';
}

# === Android Project Patcher ===
function androidprojectpatcher()
{
  # Usage
  if [ -z "${2}" ]; then
    echo '';
    echo ' Usage: androidprojectpatcher <project_name> <project_tag> ["project paths"] [specific_path] (Android project patcher)';
    echo '';
    return;
  fi;

  # Variables
  local project_name="${1}";
  local project_tag="${2}";
  local project_paths="${3}";
  local project_specific="${4}";
  local projects_specific='';
  local currentdir=${PWD};

  # GitHub Credentials
  export GitEMail="user.name@gmail.com";
  export GitFullName="Full Name";
  export GitUserName="Username";

  # Load Android tools
  if [ -z "$(type -t croot)" ]; then
    while [ ! -e './build/envsetup.sh' ]; do
      cd ../;
    done;
    source ./build/envsetup.sh;
  fi;
  cd "${currentdir}";

  # Automated key shortcut
  local key_automated='';
  local key_automated_push='';
  if [[ "${project_specific}" == 'y' ]] || [[ "${project_specific}" == 'n' ]]; then
    key_automated="${project_specific}";
    project_specific='';
  fi;

  # Extract specific projects paths
  if [ ! -z "${project_specific}" ]; then
    local android_top=$(gettop);
    for path in ${project_specific}; do
      path=$(readlink -f "${path}");
      projects_specific="${projects_specific} ${path#${android_top}/}";
    done;
  fi;

  # Create  ~/.bash_android.github.rc with the exports to override the credentials
  if [ -f ~/.bash_android.github.rc ]; then
    source ~/.bash_android.github.rc;
  fi;

  # Automated remote changes detection
  project_paths=$(git ls-remote --heads "https://github.com/AdrianDC/${project_name}.git" \
                | sed 's/.*refs\/heads\///' \
                | grep -v 'local_manifests' \
                | sed 's/_/\//g');

  # ==========================================================
  # Repo root
  croot;

  # ==========================================================
  # Variables
  local commits_list;
  local commits_result;
  local git_revs_count;
  local git_revs_count_local;
  local path_branch;
  local project_github;
  local project_unfinished;

  # Projects loader
  for path in ${projects_specific:-${project_paths}}; do

    # Project selection
    path=${path%/};
    path_branch=${path//\//_};
    echo '';
    echo " === ${path} [${path_branch}] ===";
    croot;

    # Ignore missing git projects
    if [ ! -d ${path}/.git ]; then
      echo '  .git project not found, ignoring...';
      continue;
    fi;
    cd ${path}/;

    # Targets selection
    case "${path}" in
      frameworks\/base)
        project_github='https://github.com/AdrianDC/platform_frameworks_base.git';
        path_branch="${project_tag}";;
      *)
        project_github="https://github.com/AdrianDC/${project_name}.git";;
    esac;

    # Loop until project ready
    project_unfinished=1;
    while [ ${project_unfinished} -eq 1 ]; do

      # Fetch
      git fetch ${project_github} ${path_branch};
      if [ ${?} -ne 0 ]; then
        echo 'Remote project branch not found, ignoring...';
        project_unfinished=2;
        continue;
      fi;

      # Compare
      git_revs_count=$(git rev-list --left-right --count HEAD...FETCH_HEAD | tail -n 1);
      git_revs_count_local=$(echo "${git_revs_count:-0}" | awk '{ print $1 }');
      git_revs_count_remote=$(echo "${git_revs_count:-0}" | awk '{ print $2 }');
      echo " Differences: ${git_revs_count:-Missing history}";

      # Handle unupdated projects
      if [ ${git_revs_count_local} -ne 0 ]; then
        echo '';
        printf '  > Recreate onto newest changes [Y/n/a/l] ? ';
        if [ -z "${key_automated}" ]; then
          read -t 20 key;
        else
          key="${key_automated}";
        fi;
        if [ "${key}" = 'a' ] || [ "${key}" = 'A' ]; then
          key_automated='y';
          key_automated_push='y';
        elif [ "${key}" = 'l' ] || [ "${key}" = 'L' ]; then
          key_automated='y';
          key_automated_push='n';
        fi;

        # Rebase the tree
        if [ ! "${key}" = 'n' ] && [ ! "${key}" = 'N' ]; then
          echo '';
          git cherry-pick --abort &> /dev/null;

          # Detect commits to pick
          commits_list=$(git log --committer="${GitEMail}" --reverse --format=format:%H HEAD);
          if [ -z "${commits_list}" ]; then
            commits_list=$(git log --committer="${GitEMail}" --reverse --format=format:%H FETCH_HEAD);
          else
            commits_list=$(git rev-list --reverse FETCH_HEAD~${git_revs_count_remote}..FETCH_HEAD);
          fi;

          # Pick all commits
          for sha1 in ${commits_list}; do
            git cherry-pick ${sha1};
            commits_result=${?};

            # Failed update
            if [ ${commits_result} -ne 0 ] && [ ${commits_result} -ne 1 ] || ! git diff-index --quiet HEAD --; then
              echo '';
              echo '  < Automatic update failed...';
              echo '     Tried to add following commits: '${sha1} ${commits_list#*${sha1}};
              echo '  > Manually fix then push with :';
              echo "     gitbranchpusher '${key_automated}' '${project_github}';";
              echo '';
              return;
            fi;
          done;

          # Automatic push
          gitbranchpusher "${key_automated_push}" "${project_github}";

        # Project is ready, break the loop
        else
          project_unfinished=0;
        fi;

      # Project is ready, break the loop
      else
        project_unfinished=0;
      fi;

    done;

    # Cleanup
    if [ ${project_unfinished} -eq 0 ]; then
      git reset --hard FETCH_HEAD;
      git stash -u;
    fi;

  done;

  # ==========================================================
  # Return to current folder
  echo '';
  cd "${currentdir}";
}

# === Android Project Rebaser ===
function androidprojectrebaser()
{
  # Usage
  if [ -z "${3}" ]; then
    echo '';
    echo ' Usage: androidprojectrebaser <upstream_repository_if_not_origin> <project_branch> <"project_paths::name::branch"> [specific_path] (Android project rebaser)';
    echo '';
    return;
  fi;

  # Variables
  local upstream_repository="${1}";
  local project_branch="${2}";
  local project_paths="${3}";
  local project_specific="${4}";
  local currentdir=${PWD};

  # Automated key shortcut
  local key_automated='';
  if [[ "${project_specific}" == 'y' ]] || [[ "${project_specific}" == 'n' ]]; then
    key_automated="${project_specific}";
    project_specific='';
  fi;

  # Repo root
  if [ -z "$(type -t croot)" ]; then
    while [ ! -e './build/envsetup.sh' ]; do
      cd ../;
    done;
    source ./build/envsetup.sh;
  fi;
  croot;

  # ==========================================================
  # Variables
  local git_revs_count;
  local git_revs_count_local;
  local git_username=$(githubusername 2>/dev/null);
  local path;
  local path_branch;
  local path_name;
  local path_temp;
  local project_fetch;
  local project_github;
  local project_unfinished;
  local push_command;
  local push_branch;
  local upstream_branch;
  local upstream_project;

  # Username fallback
  git_username=${git_username:-AdrianDC};

  # Projects loader
  for project in ${project_paths}; do

    # Jump to specific project
    if [ ! -z "${project_specific}" ]; then
      if [[ ! "${project}" =~ "${project_specific%/}::" ]]; then
        continue;
      fi;
    fi;

    # Project selection
    path=${project%%::*};
    path_temp=${project#*::};
    path_name="${path_temp%::*}";
    project_fetch='';
    upstream_project=${upstream_repository}/${path_name:-.};
    upstream_branch=${path_temp#*::};
    upstream_branch=${upstream_branch:-${project_branch}};
    push_branch="${upstream_branch}";

    # Variables generic changes
    if [ ! -z "${project_branch}" ]; then
      push_branch="${project_branch}";
    fi;
    if [ -z "${upstream_project}" ]; then
      upstream_project="${upstream_repository}";
    fi;

    # Project introduction
    echo '';
    echo " === ${path} [${upstream_project} @${upstream_branch}] ===";
    croot;

    # Ignore non-git projects
    if [ ! -d ${path}/.git ]; then
      echo '  .git project not found, ignoring...';
      continue;
    fi;
    cd ${path}/;

    # Loop until project ready
    project_unfinished=1;
    while [ ${project_unfinished} -eq 1 ]; do


      # Standard origin repository
      if [[ "${upstream_repository}" == 'origin' ]]; then
        project_fetch='origin';
        git ls-remote --exit-code ${project_fetch} >/dev/null 2>&1;
        if [ $? -ne 0 ]; then
          echo ' Branch origin was not found...';
          gitrao;
          continue;
        fi;

      # SonyXperiaDev origin repository
      elif [[ "${upstream_repository}" == 'sodp' ]]; then
        project_fetch='origin';
        git ls-remote --exit-code ${project_fetch} >/dev/null 2>&1;
        if [ $? -ne 0 ]; then
          echo ' Branch origin was not found...';
          gitraos;
          continue;
        fi;

      # Custom upstream repository
      else
        project_fetch='upstream';
        git ls-remote --exit-code ${project_fetch} >/dev/null 2>&1;
        if [ $? -ne 0 ]; then
          echo ' Branch upstream was not found...';
          gitremoteset upstream https://github.com/${upstream_project};
          continue;
        fi;
      fi;

      # Check private remote
      git ls-remote --exit-code ${git_username} >/dev/null 2>&1;
      if [ $? -ne 0 ]; then
        echo " Branch ${git_username} was not found...";
        gitraa;
        continue;
      fi;

      # Fetch and compare
      git fetch ${project_fetch} ${upstream_branch};
      git_revs_count=$(git rev-list --left-right --count HEAD...FETCH_HEAD | tail -n 1);
      git_revs_count_local=$(echo "${git_revs_count}" | awk '{ print $1 }');
      git_revs_count_remote=$(echo "${git_revs_count}" | awk '{ print $2 }');
      echo " Differences: ${git_revs_count}";

      # Handle unupdated projects
      if [ ${git_revs_count_remote} -ne 0 ]; then
        echo '';
        printf '  > Rebase onto newest changes [Y/a/n] ? ';
        if [ -z "${key_automated}" ]; then
          read -t 20 key;
          if [ "${key}" = 'a' ] || [ "${key}" = 'A' ]; then
            key_automated='y';
          fi;
        else
          key="${key_automated}";
        fi;

        # Rebase the tree
        if [ ! "${key}" = 'n' ] && [ ! "${key}" = 'N' ]; then
          echo '';
          git rebase --abort;
          git rebase FETCH_HEAD;
          push_command="git push -f ${git_username} HEAD:refs/heads/${push_branch}";
          echo '';
          printf "  > ${push_command} [y/a/N] ? ";
          notify-send "androidprojectrebaser: Push ${path} ?" 2> /dev/null;
          if [ -z "${key_automated}" ]; then
            read -t 20 key;
            if [ "${key}" = 'a' ] || [ "${key}" = 'A' ]; then
              key_automated='y';
            fi;
          else
            key="${key_automated}";
          fi;

          # Push the tree
          echo '';
          if [[ "${key}" == 'y' ]] || [[ "${key}" == 'Y' ]]; then
            ${push_command};
          elif [[ ! "${key}" == 'n' ]] && [[ ! "${key}" == 'N' ]]; then
            echo '  < Upload ignored after timeout... Consider uploading later';
            echo '';
          fi;

        # Project is ready, break the loop
        else
          project_unfinished=0;
        fi;

      # Project is ready, break the loop
      else
        project_unfinished=0;
      fi;

    done;

    # Cleanup
    git reset --hard HEAD;
    git stash -u;

  done;

  # ==========================================================
  # Return to current folder
  echo '';
  cd "${currentdir}";
}
