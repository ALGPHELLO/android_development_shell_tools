#!/bin/bash
# ======================================
#   Developed by Adrian DC - 2015-2016
# ======================================

# === AOSP Builder ===
function aospbuild()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: aospbuild device_name [j1,nobuild,init,silent]';
    echo '';
    return;
  fi;

  # ROM variables
  local rom_device="${1}";
  local rom_params="${2}";
  local rom_target=$(codenametotarget "${rom_device}");
  local rom_logs="${ANDROID_DEV_DRIVE}/Logs";
  local rom_logs_output="${rom_logs}/Build.${rom_device}.AOSP.log";

  # Init mode
  if [[ "${1}" =~ 'init' ]]; then
    rom_device='huashan';
    rom_target='huashan';
    rom_params='nobuild';
  fi;

  # CPU handling
  if [[ "${rom_params}" =~ 'j1' ]]; then
    build_cpu_count=1;
  else
    build_cpu_count=$(grep -c ^processor /proc/cpuinfo);
  fi;

  # Compilation preparation
  source ./build/envsetup.sh;
  lunch aosp_${rom_target}-userdebug;

  # Compilation start
  if [[ ! "${rom_params}" =~ 'nobuild' ]]; then
    make -j${build_cpu_count} otapackage | tee -a ${rom_logs_output};

    # Final notification
    if [[ ! "${rom_params}" =~ 'silent' ]]; then
      pushbrom "${rom_device}";
    fi;
  fi;
}

# === AOSP Project Pusher ===
function aospprojectpusher()
{
  # Variables
  local projectbranch;
  local projectdir=${PWD};
  local repodir=${PWD};
  local target_backup;

  # Check project
  if [ ! -d "${projectdir}/.git" ]; then
    echo '';
    echo ' Current project was not found...';
    echo '';
    return;
  fi;

  # Find repository
  while [[ "${repodir}" != '/' && ! -d "${repodir}/.repo" ]]; do
    repodir=$(readlink -f "${repodir}/..");
  done;
  if [ ! -d "${repodir}/.repo" ]; then
    echo '';
    echo ' Repository was not found';
    echo '';
    return;
  fi;

  # Status
  projectdir=${projectdir#${repodir}/};
  case "${projectdir}" in
    frameworks\/base)
      if [[ "${repodir}" =~ 'LineageOS' ]]; then
        projectbranch='lineage_sonyaosp';
      else
        projectbranch='aosp_sony8960';
      fi;;
    *)
      projectbranch=${projectdir//\//_};;
  esac;
  echo '';
  echo " Project directory: ${projectdir}";
  echo " Reporisory path: ${repodir}";
  echo '';

  # Update backup remote
  if [[ "${repodir}" =~ 'LineageOS' ]]; then
    gitrasonylineage;
  elif [[ "${repodir}" =~ 'sony' ]]; then
    gitrasonyaosp;
  else
    gitra8960aosp;
  fi;

  # Fetch upstream backup
  git fetch backup ${projectbranch};
  git rev-list --left-right --count FETCH_HEAD...HEAD;
  echo '';

  # Confirmation
  command="git push -f backup HEAD:refs/heads/${projectbranch}";
  echo " $command";
  printf '  > Proceed with project push [ENTER] ? ';
  read key;

  # Upload to backup
  echo '';
  ${command};
  echo '';
}
