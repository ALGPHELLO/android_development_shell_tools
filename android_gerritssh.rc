#!/bin/bash
# ======================================
#   Developed by Adrian DC - 2015-2017
# ======================================

# === Standalone Source Helper ===
# source <(curl -Ls https://github.com/AdrianDC/android_shell_tools/raw/master/android_gerritssh.rc)

# === Gerrit SSH ===
function gerritssh()
{
  # Gerrit Credentials
  export GerritReview='LineageOS';
  export GerritRemote='review.lineageos.org';
  export GerritUsername='Username';
  export GerritHTTPUsername='Username';
  export GerritHTTPPassword='abcdefgh12345678';

  # Create  ~/.bash_android.gerrit.rc with the exports to override the credentials
  if [ -f ~/.bash_android.gerrit.rc ]; then
    source ~/.bash_android.gerrit.rc;
  fi;

  # Configurations
  local gerritssh="ssh -p 29418 ${GerritUsername}@${GerritRemote} gerrit";
  local projectbranch="${1:-cm-14.1}";
  local projectreversemerge="${2}";
  local projectbranchmerger=false;
  local projectbranchprimary='cm-14.1';
  local projectbranchsecondary='cm-13.0';

  # Splash Text
  echo '';
  echo -e "    \e[1;37mShell Gerrit Reviewer by Adrian DC - Connecting to ${projectbranch}\e[0m";

  # Project Loading
  local projectorigin=$(git remote -v | grep origin | tail -n 1);
  if [ -z "${projectorigin}" ]; then
    projectorigin=$(git remote -v | grep ${GerritReview} | tail -n 1);
  fi;
  local projectname=$(echo "${projectorigin}" | cut -f 2 | sed "s/.*\/\([^.]*\).* .*/\1/");
  local tmpdir=$(mktemp -d);
  local tmpfilestate="${tmpdir}/state";
  local tmpfileids="${tmpdir}/ids";
  local tmpfileidsfor="${tmpdir}/for";
  local tmpfilebranch="${tmpdir}/branch";
  local tmpfilenames="${tmpdir}/names";
  local tmpfileparents="${tmpdir}/parents";
  local tmpfilepatchsets="${tmpdir}/ps";
  local tmpfilepatchinfo="${tmpdir}/pi";
  local tmpfilepatchmessage="${tmpdir}/pm";
  local tmpfilepatchdrafts="${tmpdir}/drafts";

  # Query gerrit through ssh
  ${gerritssh} query --current-patch-set "status:open project:${GerritReview}/${projectname} branch:${projectbranch}" > ${tmpfilestate};

  # Exit on failed ssh connection
  if [ ${?} -ne 0 ]; then
    echo '';
    echo -e "     \e[1;31m> Error... '${gerritssh}' did not connect properly\e[0m";
    echo '';
    rm -rf "${tmpdir}";
    return;
  fi;

  # Parse relevant informations
  cat ${tmpfilestate} | egrep '^\  number' | cut -d' ' -f4- > ${tmpfileids};
  cat ${tmpfilestate} | egrep '^\  branch' | cut -d' ' -f4- > ${tmpfilebranch};
  cat ${tmpfilestate} | egrep '^\  subject' | cut -d' ' -f4- > ${tmpfilenames};
  cat ${tmpfilestate} | egrep '^\ \[' | sed 's/.*\[\(.*\)\].*/\1/' > ${tmpfileparents};
  cat ${tmpfilestate} | egrep '^\    number' | cut -d' ' -f6- > ${tmpfilepatchsets};
  cat ${tmpfilestate} | egrep '^\    isDraft' | cut -d' ' -f6- > ${tmpfilepatchdrafts};
  cat ${tmpfileids} | sort > ${tmpfileidsfor};

  # Handle commit reverse merging
  if [ ! -z "${projectreversemerge}" ]; then

    # Read remote current HEAD
    git fetch "https://${GerritRemote}/${GerritReview}/${projectname}" "${projectbranch}" 2>/dev/null;
    local remotecurrenthead=$(git rev-parse FETCH_HEAD);

    # Reverse merging variables
    local tmpcommitid=${projectreversemerge};
    local tmpcommitidsearch;
    local tmpcommitpos;
    local tmpcommitparent;
    local tmpcommitspattern='';

    # Parse commits SHA1
    local tmpfilesha1="${tmpdir}/sha1";
    cat ${tmpfilestate} | egrep '^\    revision' | cut -d' ' -f6- > ${tmpfilesha1};

    # Parse the reverse indexes
    while true; do
      tmpcommitpos=$(grep -n "${tmpcommitid}" ${tmpfileids} | cut -d : -f 1);
      tmpcommitparent=$(sed "${tmpcommitpos}!d" ${tmpfileparents});
      tmpcommitidsearch=$(grep -n "${tmpcommitparent}" ${tmpfilesha1} | cut -d : -f 1);

      # Reverse to HEAD succesful
      if [ "${tmpcommitparent}" = "${remotecurrenthead}" ]; then
        tmpcommitspattern="${tmpcommitpos} ${tmpcommitspattern}";
        break;

      # Valid ID available to continue
      elif [ ! -z "${tmpcommitidsearch}" ]; then
        tmpcommitid=$(sed "${tmpcommitidsearch}!d" ${tmpfileids});
        tmpcommitspattern="${tmpcommitpos} ${tmpcommitspattern}";

      # Exit on failed reverse search
      elif [ -z "${tmpcommitparent}" ] || [ -z "${tmpcommitidsearch}" ]; then
        echo '';
        echo -e "     \e[1;31m> Aborting... ${projectreversemerge} could not be reversed to HEAD\e[0m";
        echo -e "     \e[1;33m> Commit ${tmpcommitid} has no valid parent ${tmpcommitparent}\e[0m";
        echo '';
        rm -rf "${tmpdir}";
        return;
      fi;
    done;

    # Prepare gerrit state files
    tmpcommitparent=$(sed "${tmpcommitpos}!d" ${tmpfileparents});
    mv ${tmpfileids} ${tmpfileids}.tmp;
    mv ${tmpfilebranch} ${tmpfilebranch}.tmp;
    mv ${tmpfilenames} ${tmpfilenames}.tmp;
    mv ${tmpfileparents} ${tmpfileparents}.tmp;
    mv ${tmpfilepatchsets} ${tmpfilepatchsets}.tmp;
    mv ${tmpfilepatchdrafts} ${tmpfilepatchdrafts}.tmp;
    touch ${tmpfileids};
    touch ${tmpfilebranch};
    touch ${tmpfilenames};
    touch ${tmpfileparents};
    touch ${tmpfilepatchsets};
    touch ${tmpfilepatchdrafts};

    # Regenerate gerrit files
    for lineid in ${tmpcommitspattern}; do
      sed "${lineid}!d" ${tmpfileids}.tmp >> ${tmpfileids};
      sed "${lineid}!d" ${tmpfilebranch}.tmp >> ${tmpfilebranch};
      sed "${lineid}!d" ${tmpfilenames}.tmp >> ${tmpfilenames};
      sed "${lineid}!d" ${tmpfileparents}.tmp >> ${tmpfileparents};
      sed "${lineid}!d" ${tmpfilepatchsets}.tmp >> ${tmpfilepatchsets};
      sed "${lineid}!d" ${tmpfilepatchdrafts}.tmp >> ${tmpfilepatchdrafts};
    done;
    cp ${tmpfileids} ${tmpfileidsfor};
    echo '';
  fi;

  # Branch empty
  if [ ! -s ${tmpfileidsfor} ]; then
    echo '';
    printf '     \e[1;32m> No commit on review. ';

    # Exit on second execution
    if [ ! -z "${2}" ]; then
      echo -e 'Exiting...\e[0m';
      echo '';
      rm -rf "${tmpdir}";
      return;
    fi;

    # Switch branches
    if [[ "${projectbranch}" == "${projectbranchprimary}" ]]; then
      projectbranch="${projectbranchsecondary}";
    elif [[ "${projectbranch}" == "${projectbranchsecondary}" ]]; then
      projectbranch="${projectbranchprimary}";
    fi;
    echo -e "Moving to ${projectbranch}...\e[0m";
    rm -rf "${tmpdir}";
    gerritssh ${projectbranch} true;
    return;

  fi;

  # Project Connected
  echo -e \\033c;
  clear;
  echo -e " \e[1;31m\e[4;31mConnected to Gerrit - ${GerritReview}/${projectname} - ${projectbranch}\e[0m";
  echo '';
  echo -e '    \e[1;37m\e[4;37mShell Gerrit Reviewer by Adrian DC - 2015-2017\e[0m';
  echo -e '      \e[1;37mCommands : y (Yes) / n (No) / q (Quit)';
  echo -e '                 p (Publish, +1+2 only)';
  echo -e '                 s (+1+2 Submit commit)';
  echo -e '                 a (+1+2 Submit all)\e[0m';


  # Commits on Review
  echo '';
  echo -e "  \e[1;34m\e[4;34mChanges on Review\e[0m";
  for i in $(cat ${tmpfileidsfor}); do

    # Commit Details
    local gerritidpos=-1;
    local gerritidcount=0;
    for j in $(cat ${tmpfileids}); do
      gerritidcount=$((gerritidcount+1));
      if [[ "${i}" == "${j}" ]]; then
        gerritidpos=${gerritidcount};
        break;
      fi;
    done;
    local patchbranch=$(sed ${gerritidpos}'!d' ${tmpfilebranch});
    local patchname=$(sed ${gerritidpos}'!d' ${tmpfilenames});
    local patchset=$(sed ${gerritidpos}'!d' ${tmpfilepatchsets});
    local patchdraft=$(sed ${gerritidpos}'!d' ${tmpfilepatchdrafts});
    if [[ ! "${patchdraft}" == 'false' ]]; then
      patchdraft=' [DRAFT]';
    else
      patchdraft='';
    fi;

    # Commit details
    echo -e "    \e[1;33m${i}/${patchset}:\e[0m ${patchname}${patchdraft}";

  done;
  echo '';

  # Commands variables
  local cmd_global=;
  local cmd_rebase=;
  local cmd_publish=;
  local cmd_review=;
  local cmd_submit=;
  local key;

  # Commits Selection
  for i in $(cat ${tmpfileidsfor}); do

    # Commit Details
    local gerritidpos=-1;
    local gerritidcount=0;
    for j in $(cat ${tmpfileids}); do
      gerritidcount=$((gerritidcount+1));
      if [[ "${i}" == "${j}" ]]; then
        gerritidpos=${gerritidcount};
        break;
      fi;
    done;
    local patchbranch=$(sed ${gerritidpos}'!d' ${tmpfilebranch});
    local patchname=$(sed ${gerritidpos}'!d' ${tmpfilenames});
    local patchparent=$(sed ${gerritidpos}'!d' ${tmpfileparents});
    local patchset=$(sed ${gerritidpos}'!d' ${tmpfilepatchsets});
    local patchdraft=$(sed ${gerritidpos}'!d' ${tmpfilepatchdrafts});

    # Commit Work
    echo '';
    echo -e "  \e[1;34m\e[4;34mChange ${i}/${patchset}\e[0m";
    echo "    \"${patchname}\"";
    echo '';
    printf "    \e[1;32m> Work on commit ${patchbranch}/${i} (y/N/p/s/a/q) ?\e[0m ";
    if [ -z "${cmd_global}" ]; then
      read key;
    else
      key=${cmd_global};
      echo "${key}";
    fi;
    if [[ 'qQ' =~ "${key}" ]]; then
      break;
    elif [[ ! 'yYpPsSaA' =~ "${key}" ]]; then
      continue;
    fi;

    # Commands selection
    case ${key} in
      p|P)
        cmd_rebase=n;
        cmd_publish=y;
        cmd_review=y;
        cmd_submit=n;
        ;;
      s|S)
        cmd_rebase=y;
        cmd_publish=y;
        cmd_review=y;
        cmd_submit=y;
        ;;
      a|A)
        cmd_global=${key};
        cmd_rebase=n;
        cmd_publish=y;
        cmd_review=y;
        cmd_submit=y;
        ;;
      *)
        ;;
    esac;

    # Study rebasing if needed
    if [[ ! "${cmd_rebase}" == 'n' ]]; then

      # Read remote current HEAD
      git fetch "https://${GerritRemote}/${GerritReview}/${projectname}" "${projectbranch}" 2>/dev/null;
      local remotecurrenthead=$(git rev-parse FETCH_HEAD);

      # Commit Rebase
      if [[ ! "${remotecurrenthead}" == "${patchparent}" ]]; then
        printf "      \e[1;31m> Rebase on HEAD  \e[1;37m${i}/${patchset}\e[1;31m (y/N) ?\e[0m ";
        if [ -z "${cmd_rebase}" ]; then
          read key;
        else
          echo "${cmd_rebase}";
          key=${cmd_rebase};
        fi;
        if [[ "${key}" == 'y' || "${key}" == 'Y' ]]; then
          ${gerritssh} review --rebase --project ${GerritReview}/${projectname} ${i},${patchset};
          patchset=$(${gerritssh} query --current-patch-set "status:open project:${GerritReview}/${projectname} change:${i}" \
                   | egrep '^\    number' \
                   | cut -d' ' -f6-);
        fi;
      fi;
    fi;

    # Commit Draft Publish
    if [[ ! "${patchdraft}" == 'false' ]]; then
      printf "      \e[1;31m> Publish draft   \e[1;37m${i}/${patchset}\e[1;31m (y/N) ?\e[0m ";
      if [ -z "${cmd_publish}" ]; then
        read key;
      else
        echo "${cmd_publish}";
        key=${cmd_publish};
      fi;
      if [[ "${key}" == 'y' || "${key}" == 'Y' ]]; then
        ${gerritssh} review --publish --project ${GerritReview}/${projectname} ${i},${patchset};
      fi;
    fi;

    # Commit Branch Merger
    if [[ ! "${projectbranchmerger}" == 'false' ]]; then

      # Commit Cherry-Pick Branch
      local projectbranchcp='';
      if [[ "${projectbranch}" == "${projectbranchprimary}" ]]; then
        projectbranchcp="${projectbranchsecondary}";
      elif [[ "${projectbranch}" == "${projectbranchsecondary}" ]]; then
        projectbranchcp="${projectbranchprimary}";
      fi;

      # Commit Cherry-Pick Commit
      if [ ! -z "${projectbranchcp}" ]; then
        printf "      \e[1;31m> Copy to ${projectbranchcp} \e[1;37m${i}/${patchset}\e[1;31m (y/N) ?\e[0m ";
        read key;
        if [[ "${key}" == 'y' || "${key}" == 'Y' ]]; then

          # Get Commit Details
          ${gerritssh} query --current-patch-set "status:open project:${GerritReview}/${projectname} change:${i}" > ${tmpfilepatchinfo};
          local patchcommit=$(cat ${tmpfilepatchinfo} \
                            | egrep '^\    revision' \
                            | cut -d' ' -f6-);
          cat ${tmpfilepatchinfo} \
            | sed -n '/commitMessage/,/createdOn/ p' \
            | sed '${d}' \
            | cut -c 18- > ${tmpfilepatchmessage};
          echo "(cherry picked from commit ${patchcommit})" >> ${tmpfilepatchmessage};
          local patchmessage=$(cat ${tmpfilepatchmessage} \
                             | sed 's/\"/\\\"/g' \
                             | sed ':begin;$!N;s/\n/\\n/;tbegin');
          echo "{\"destination\":\"${projectbranchcp}\",\"message\":\"${patchmessage}\"}" > ${tmpfilepatchmessage};

          # Post Cherry-Pick Request
          curl -X POST --digest \
               -H "Content-Type: application/json" \
               --data @${tmpfilepatchmessage} \
               --user ${GerritHTTPUsername}:${GerritHTTPPassword} \
               http://review.lineageos.org/a/changes/${i}/revisions/${patchcommit}/cherrypick;
        fi;
      fi;
    fi;

    # Commit Review
    printf "      \e[1;31m> Review +1/+2    \e[1;37m${i}/${patchset}\e[1;31m (y/N) ?\e[0m ";
    if [ -z "${cmd_review}" ]; then
      read key;
    else
      echo "${cmd_review}";
      key=${cmd_review};
    fi;
    if [[ "${key}" == 'y' || "${key}" == 'Y' ]]; then
      ${gerritssh} review --verified 1 --code-review 2 --project ${GerritReview}/${projectname} ${i},${patchset};
    fi;

    # Commit Submission
    printf "      \e[1;31m> Submit commit   \e[1;37m${i}/${patchset}\e[1;31m (y/N) ?\e[0m ";
    if [ -z "${cmd_submit}" ]; then
      read key;
    else
      echo "${cmd_submit}";
      key=${cmd_submit};
    fi;
    if [[ "${key}" == 'y' || "${key}" == 'Y' ]]; then
      ${gerritssh} review --submit --project ${GerritReview}/${projectname} ${i},${patchset};
    fi;

    # Commit Finished
    echo -e "    \e[1;32m> Done working on ${i}\e[0m ";

  # End of Project
  done;
  rm -rf "${tmpdir}";
  echo '';
  echo -e "  \e[1;37m\e[4;37mDone with ${GerritReview}/${projectname} - ${projectbranch}\e[0m ";
  echo '';
}

