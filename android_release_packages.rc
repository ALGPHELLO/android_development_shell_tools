#!/bin/bash
# ======================================
#   Developed by Adrian DC - 2015-2016
# ======================================

# === Sign Package ===
function signzip()
{
  # Usage
  local zip_input="${1}";
  local zip_output="${2}";
  echo $zip_input
  if [ ! -f "${zip_input}" ]; then
    echo '';
    echo ' usage: signzip <unsigned_input_zip_or_zip_to_sign> [signed_output_zip]';
    echo '';
    return;
  fi;

  # Direct ZIP signature
  if [ -z "${zip_output}" ]; then
    zip_output="${zip_input}";
    zip_input="${zip_input}.unsigned.zip";
    mv -v "${zip_output}" "${zip_input}";
  fi;

  # Remove output file
  rm -f "${zip_output}";

  # Sign ZIP
  java -jar "${bash_sign_apk_dir}/signapk-cm121.jar" \
      -w "${bash_sign_apk_dir}/testkey.x509.pem" \
      "${bash_sign_apk_dir}/testkey.pk8" \
      "${zip_input}" \
      "${zip_output}";

  # Remove unsigned file if successful
  if [ -f "${zip_input}" ]; then
    rm -f "${zip_input}";
  fi;
}

# === Module Zip Maker ===
function mmmzip()
{
  local CurDir=$(pwd);
  local TmpDir=$(mktemp -d);
  local BuildParams="${@:-.}";
  local BuildPathFirst="${1:-.}";
  local LogFile="${TmpDir}/mmm_logs.txt";
  local OutFile="pack-"$(date +'%Y%m%d-%H%M')"-$(basename $(readlink -f ${BuildPathFirst}))-${TARGET_PRODUCT}.zip";
  local path=$(readlink -f "${BuildPathFirst}");
  local TargetFile="$(xdg-user-dir DESKTOP)/Builds/${OutFile}";
  mkdir -p $(dirname ${TargetFile});
  if [ ! -d "${path}" ]; then
    croot;
  fi;

  # Disable Ninja
  export USE_NINJA=false;

  # Header
  echo '';
  echo -e ' \e[1;37m[ Module Zip Maker by Adrian DC - 2016 ]\e[0m';
  echo '';
  echo '';

  # Make the modules
  if [ -d "$(readlink -f "${path}")" ] || ! $(mms -v >/dev/null 2>&1); then
    mmm -B ${BuildParams} | tee ${LogFile};
  else
    mka ${BuildParams} | tee ${LogFile};
  fi;

  # Files handling
  local Installs=$(grep "target/product/.*/system" ${LogFile} | sort | uniq);
  local FilesList='';
  for FilePath in ${Installs[*]}; do

    # Target selection
    if [[ "${FilePath}" =~ '/system' ]]; then
      FilePath=$(printf "${FilePath}" | tail -1 \
               | sed "s/\x1B\[[0-9;]*[JKmsu]//g" \
               | sed "s/.*\/\([^\[]*.zip\).*/\1/g");
      FileTarget=$(echo ${FilePath} \
                 | sed "s/.*\(system\/.*\)/\1/g");
      FileDir=$(dirname ${FileTarget});
      if [ ! -d "${TmpDir}/${FileDir}" ]; then
        mkdir -p "${TmpDir}/${FileDir}";
      fi;

    # Target copy
      if [ -f "${FilePath}" ]; then
        cp "${FilePath}" "${TmpDir}/${FileTarget}";
        FilesList="${FilesList} ./${FileTarget}";
      fi;
    fi;
  done;

  # Pack zip output
  cd "${TmpDir}/";
  if [ ! -z "${FilesList}" ]; then

    # Partitions
    local SystemPartition=$(androiddevicestarget system);

    # Generate zip, updater-script and include files
    mkdir -p ./META-INF/com/google/android/;
    cp "${bash_flashable_android_base}" "${OutFile}.unsigned.zip";
    cp "${bash_updater_install_system}" ./META-INF/com/google/android/updater-script;
    sed -i "s/ANDROID_SYSTEM_PARTITION/${SystemPartition//\//\\\/}/" ./META-INF/com/google/android/updater-script;
    zip -g "${TmpDir}/${OutFile}.unsigned.zip" ./META-INF/com/google/android/updater-script;
    zip -g "${TmpDir}/${OutFile}.unsigned.zip" ${FilesList};
    rm -rf ./META-INF;

    # Zip signature
    signzip "${TmpDir}/${OutFile}.unsigned.zip" "${TmpDir}/${OutFile}";
    cp "${TmpDir}/${OutFile}" "${TargetFile}";
    export PackageResult="${TargetFile}";

    # End of work
    echo '';
    echo -e " \e[1;37mPackage File:\e[0m ${TargetFile}";
  else
    export PackageResult='';
  fi;
  echo '';

  # Restore Ninja
  export USE_NINJA=;

  # End of work
  rm -rf "${TmpDir}";
  cd "${CurDir}";
}

# === System Zip Maker ===
function systozip()
{
  # Variables
  local CurDir=$(pwd);
  local TmpDir=$(mktemp -d);
  local BuildParams="${1:-.}";
  local BuildPathFirst="${1:-.}";
  local LogFile="${TmpDir}/mmm_logs.txt";
  local OutFile="pack-"$(date +'%Y%m%d-%H%M')"-$(basename $(readlink -f ${BuildPathFirst}))-${TARGET_PRODUCT}.zip";
  local path=$(readlink -f "${BuildPathFirst}");
  local TargetFile="$(xdg-user-dir DESKTOP)/Builds/${OutFile}";
  mkdir -p $(dirname ${TargetFile});

  # Header
  echo '';
  echo -e ' \e[1;37m[ System To Zip Maker by Adrian DC - 2016 ]\e[0m';
  echo '';

  # Files handling
  local Installs=$(find "${BuildParams}" -type f -printf '%P\n');
  local FilesList='';
  for FilePath in ${Installs[*]}; do

    # Target selection
    FilePath=$(printf "${FilePath}" | tail -1 \
             | sed "s/\x1B\[[0-9;]*[JKmsu]//g" \
             | sed "s/.*\/\([^\[]*.zip\).*/\1/g");
    FileTarget="system/${FilePath}";
    FileDir=$(dirname ${FileTarget});
    if [ ! -d "${TmpDir}/${FileDir}" ]; then
      mkdir -p "${TmpDir}/${FileDir}";
    fi;

    # Target copy
    FilePath=$(readlink -f "${BuildParams}/${FilePath}");
    if [ -f "${FilePath}" ]; then
      cp "${FilePath}" "${TmpDir}/${FileTarget}";
      FilesList="${FilesList} ./${FileTarget}";
    fi;
  done;

  # Pack zip output
  cd "${TmpDir}/";
  if [ ! -z "${FilesList}" ]; then

    # Partitions
    local SystemPartition=$(androiddevicestarget system);

    # Generate zip, updater-script and include files
    mkdir -p ./META-INF/com/google/android/;
    cp "${bash_flashable_android_base}" "${OutFile}.unsigned.zip";
    cp "${bash_updater_install_system}" ./META-INF/com/google/android/updater-script;
    sed -i "s/ANDROID_SYSTEM_PARTITION/${SystemPartition//\//\\\/}/" ./META-INF/com/google/android/updater-script;
    zip -g "${TmpDir}/${OutFile}.unsigned.zip" ./META-INF/com/google/android/updater-script;
    zip -g "${TmpDir}/${OutFile}.unsigned.zip" ${FilesList};
    rm -rf ./META-INF;

    # Zip signature
    signzip "${TmpDir}/${OutFile}.unsigned.zip" "${TmpDir}/${OutFile}";
    cp "${TmpDir}/${OutFile}" "${TargetFile}";
    export PackageResult="${TargetFile}";

    # Package result
    echo '';
    echo -e " \e[1;37mPackage File:\e[0m ${TargetFile}";
  else
    export PackageResult='';
  fi;
  echo '';

  # End of work
  rm -rf "${TmpDir}";
  cd "${CurDir}";
}

# === Output Zip Maker ===
function packzip()
{
  # Variables
  local CurDir=$(pwd);
  local TmpDir=$(mktemp -d);
  local BuildParams="${@}";
  local OutFile="pack-"$(date +'%Y%m%d-%H%M')"-$(basename $(readlink -f ${1}))-${TARGET_PRODUCT}.zip";
  local TargetFile="$(xdg-user-dir DESKTOP)/Builds/${OutFile}";
  mkdir -p $(dirname ${TargetFile});

  # Header
  echo '';
  echo -e ' \e[1;37m[ Packed Zip Maker by Adrian DC - 2016 ]\e[0m';
  echo '';

  # Files handling
  local Installs=${@};
  local FilesList='';
  local FileTarget;
  for FilePath in ${Installs[*]}; do

    # Target selection
    FileTarget='';
    if [[ "${FilePath}" =~ '/system' ]]; then
      FilePath=$(printf "${FilePath}" | tail -1 \
               | sed "s/\x1B\[[0-9;]*[JKmsu]//g" \
               | sed "s/.*\/\([^\[]*.zip\).*/\1/g");
      FileTarget=$(echo ${FilePath} \
                 | sed "s/.*\(system\/.*\)/\1/g");
    elif [[ "${FilePath}" =~ '/proprietary' ]]; then
      FilePath=$(printf "${FilePath}" | tail -1 \
               | sed "s/\x1B\[[0-9;]*[JKmsu]//g" \
               | sed "s/.*\/\([^\[]*.zip\).*/\1/g");
      FileTarget=$(echo ${FilePath} \
                 | sed "s/.*proprietary\/\(.*\)/system\/\1/g");
    fi;

    # Target copy
    if [ ! -z "${FileTarget}" ]; then
      FileDir=$(dirname ${FileTarget});
      if [ ! -d "${TmpDir}/${FileDir}" ]; then
        mkdir -p "${TmpDir}/${FileDir}";
      fi;
      if [ -f "${FilePath}" ]; then
        cp "${FilePath}" "${TmpDir}/${FileTarget}";
        FilesList="${FilesList} ./${FileTarget}";
      fi;
    fi;
  done;

  # Partitions
  local SystemPartition=$(androiddevicestarget system);

  # Generate zip, updater-script and include files
  cd "${TmpDir}/";
  mkdir -p ./META-INF/com/google/android/;
  cp "${bash_flashable_android_base}" "${OutFile}.unsigned.zip";
  cp "${bash_updater_install_system}" ./META-INF/com/google/android/updater-script;
  sed -i "s/ANDROID_SYSTEM_PARTITION/${SystemPartition//\//\\\/}/" ./META-INF/com/google/android/updater-script;
  zip -g "${TmpDir}/${OutFile}.unsigned.zip" ./META-INF/com/google/android/updater-script;
  rm -rf ./META-INF;

  # Pack zip output
  if [ ! -z "${FilesList}" ]; then
    zip -g "${TmpDir}/${OutFile}.unsigned.zip" ${FilesList};

    # Zip signature
    signzip "${TmpDir}/${OutFile}.unsigned.zip" "${TmpDir}/${OutFile}";
    cp "${TmpDir}/${OutFile}" "${TargetFile}";

    # End of work
    echo '';
    echo -e " \e[1;37mPackage File:\e[0m ${TargetFile}";
    export PackageResult="${TargetFile}";
  fi;
  echo '';

  # End of work
  rm -rf "${TmpDir}";
  cd "${CurDir}";
}

# === Git Zip Maker ===
function gitzip()
{
  # Variables
  local file_path;
  local files_list='';
  local status;
  local tmpfile=$(mktemp);

  # Files parsing
  git diff-tree --no-commit-id --name-status -r ${1} > ${tmpfile};
  while read line; do
    status=$(echo "${line}" | awk '{ print $1 }');
    file_path=$(echo "${line}" | awk '{ print $2 }');
    if [[ "${status}" =~ 'D' || "${line}" =~ '.mk' ]]; then
      continue;
    fi;
    files_list="${files_list} ${file_path}";
  done < ${tmpfile};

  # Pack into zip
  packzip ${files_list};
  rm -f ${tmpfile};
}
