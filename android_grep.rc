#!/bin/bash
#
# Copyright 2015-2017 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === Standalone Source Helper ===
# source <(curl -Ls https://github.com/AdrianDC/android_development_shell_tools/raw/master/android_grep.rc)

# === Grep Helpers ===
function grepb()
{
  # Usage: grepb [inputs] (Grep through sources)

  # Grep through files
  GREP_COLORS='fn=1;1' grep -air --exclude={*.o,*.a,*.cmd,*.ko} --exclude-dir="\.git" --exclude-dir="\.repo" "${*}" .;
}
alias g='grepb';

# === Grep Binaries Helpers ===
function grepbs()
{
  # Usage: grepbs [inputs] (Grep through sources and binaries)

  # Grep through files
  GREP_COLORS='fn=1;1';
  local strings_params=$(stringsparams);
  for file in $(find . -type f -not -path "*.git/*" -not -path "*.repo/*" | sort); do
    if [ -f "${file}" ]; then
      found=$(strings ${string_params} "$(readlink -f ${file})" | grep -ai "${*}");
      if [ ! -z "${found}" ]; then
        echo -e "\e[1;31m${file} :\e[0m ${found}";
      fi;
    fi;
  done;
}
alias gs='grepbs';

# === Grep Kernel Configurations ===
function gck()
{
  # Usage: gck [inputs] (Grep through kernel configurations)

  # Grep through files
  GREP_COLORS='fn=1;1';
  local strings_params=$(stringsparams);
  for file in $(find . -name "Kconfig" -o -name "Makefile" -not -path "*.git/*" -not -path "*.repo/*" | sort); do
    found=$(strings ${string_params} $(readlink -f ${file}) | grep -ai "${*}");
    if [ ! -z "${found}" ]; then
      echo -e "\e[1;31m${file} :\e[0m ${found}";
    fi;
  done;
}

# === Grep Android Makefiles ===
function gca()
{
  # Usage: gca [inputs] (Grep through Android makefiles)

  # Grep through files
  GREP_COLORS='fn=1;1';
  local strings_params=$(stringsparams);
  for file in $(find . -name "*.mk" -o -name "*.bp" -not -path "*.git/*" -not -path "*.repo/*" | sort); do
    found=$(strings ${string_params} $(readlink -f ${file}) | grep -ai "${*}");
    if [ ! -z "${found}" ]; then
      echo -e "\e[1;31m${file} :\e[0m ${found}";
    fi;
  done;
}

# === Grep Search Helpers ===
alias grepi='grep -ai';
function glc() { GREP_COLORS='fn=1;1' grep --include \*.c --include \*.cpp --include \*.h -anr '.\{80,\}' .; }
function glj() { GREP_COLORS='fn=1;1' grep --include \*.java -anr '.\{100,\}' .; }
function gle() { GREP_COLORS='fn=1;1' grep --include \*.c --include \*.cpp --include \*.h --include \*.java -anr '.* $' .; }

# === Grep Android Modules ===
function gcmodules()
{
  # Usage: gcmodules (List all LOCAL_MODULE elements)

  # Search all build definitions
  local strings_params=$(stringsparams);
  for file in $(find . -name "*.mk" -o -name "*.bp" -not -path "*.git/*" -not -path "*.repo/*" | sort); do
    strings ${strings_params} $(readlink -f ${file}) \
      | grep -ai "LOCAL_MODULE:=\|LOCAL_MODULE :=" \
      | sed 's/[ \t]*\(LOCAL_MODULE:=\|LOCAL_MODULE :=\)[ \t]*//g';
  done;
}

# === Strings Parameters ===
function stringsparams()
{
  # Usage: stringsparams (Get the strings command parameters for variants)

  # Handle Sysinternals strings variant
  if [ ! -z "$(strings -accepteula 2> /dev/null | grep 'sysinternals')" ]; then
    echo '-accepteula -nobanner';
    return;
  fi;

  # Handle generic strings variant
  echo '';
}
