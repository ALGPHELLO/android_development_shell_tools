#!/bin/bash
# ======================================
#   Developed by Adrian DC - 2015-2017
# ======================================

# === ROM Automatic Releaser ===
function romautorelease()
{
  # Usage
  local function_usage='Usage: romautorelease <devicename> <aosp/lineage/lx/caf/rr> [nowipe,j1/j2] (Advanced automated ROM builder)';
  if [ -z "${1}" ] || [ -z "${2}" ]; then
    echo '';
    echo " ${function_usage}";
    echo '';
    return;
  fi;

  # Error with ANDROID_DEV_DRIVE missing
  if [ -z "${ANDROID_DEV_DRIVE}" ]; then
    echo '';
    echo ' Error: ANDROID_DEV_DRIVE is missing.';
    echo '  Please read the README.md from this project...';
    echo '';
    return;
  fi;

  # Logs path handling
  local rom_logs="${ANDROID_DEV_DRIVE}/Logs";
  local rom_logs_output;
  mkdir -p "${rom_logs}";

  # Access ROM root
  local cwd=$(pwd);
  croot;

  # ROM variables
  local rom_device="${1}";
  local rom_name="${2}";
  local rom_params="${3}";
  local rom_phone="${rom_device^}";
  local rom_target=$(codenametotarget "${rom_device}");
  local rom_tag;
  local rom_upload;

  # AOSP 7.1
  if [[ "${rom_name}" == 'aosp' ]]; then
    rom_tag='AOSP71';
    rom_upload="${rom_phone}/AOSP-7.x";

    # Handle Sony AOSP kernel build
    if [ ! "${rom_device}" = "${rom_target}" ]; then
      sonyaospkernelupdate "${rom_device}";
    fi;

  # LineageOS 14.1
  elif [[ "${rom_name}" == 'lineage' ]]; then
    rom_tag='LINEAGE141';
    rom_target="${rom_device}";
    rom_upload="${rom_phone}/LineageOS-14.x";

  # AOSP-CAF 7.x
  elif [[ "${rom_name}" == 'caf' ]]; then
    rom_tag='CAF71';
    rom_upload="${rom_phone}/AOSP-CAF-7.x";

  # LegacyXperia 14.1
  elif [[ "${rom_name}" == 'lx' ]]; then
    rom_tag='LX141';
    rom_upload="LegacyXperia/${rom_device}/LineageOS-14.x";

  # ResurrectionRemix Nougat
  elif [[ "${rom_name}" == 'rr' ]]; then
    rom_tag='RR71';
    rom_upload="${rom_phone}/ResurrectionRemix-N";

  # Automatic per-device selection
  else
    echo '';
    echo ' Error: ROM target has not been found...';
    echo " ${function_usage}";
    echo '';
    return;
  fi;

  # When option enabled, use debuggable bootimages
  if romautorelease-debug-active; then
    bootimagedebuggable "${rom_device}" true;
    export WITH_SU=true;
  fi;

  # Ignore the build
  if [[ "${rom_params}" =~ 'nobuild' ]]; then
    echo ' Cleaning skipped...';

  # When option enabled, clean device out folder
  elif romautorelease-clean-active; then
    rm -rfv './out/target/product';

  # Delete the devices relevant results
  elif [[ ! "${rom_params}" =~ 'nowipe' ]]; then
    outdevcl "${rom_device}";
  fi;

  # CPU handling
  if [[ "${rom_params}" =~ 'j1' ]]; then
    build_cpu_count=1;
  elif [[ "${rom_params}" =~ 'j2' ]]; then
    build_cpu_count=2;
  else
    build_cpu_count=$(grep -c ^processor /proc/cpuinfo);
  fi;

  # Compilation logs
  rom_logs_output="${rom_logs}/Build.${rom_device}.${rom_tag}.log";

  # Ignore the build
  if [[ "${rom_params}" =~ 'nobuild' ]]; then
    echo ' Build skipped...';

  # Build Android AOSP
  elif [[ "${rom_tag}" =~ 'AOSP71' ]]; then
    source ./build/envsetup.sh;
    lunch aosp_${rom_target}-userdebug;
    make -j${build_cpu_count} otapackage | tee ${rom_logs_output};

  # Build Android AOSP-CAF
  elif [[ "${rom_tag}" =~ 'CAF' ]]; then
    source ./build/envsetup.sh;
    lunch aospcaf_${rom_target}-userdebug;
    make -j${build_cpu_count} otapackage | tee ${rom_logs_output};

  # Build Android ResurrectionRemix
  elif [[ "${rom_tag}" =~ 'RR' ]]; then
    export RR_BUILDTYPE=OFFICIAL;
    repos "${rom_target}";
    brunch "${rom_target}" | tee ${rom_logs_output};

  # Build Android Sony AOSP
  elif [[ "${rom_tag}" =~ 'SONY' ]]; then
    source ./build/envsetup.sh;
    lunch aosp_${rom_target}-userdebug;
    make -j${build_cpu_count} otapackage | tee ${rom_logs_output};

  # Build Android LegacyXperia
  elif [[ "${rom_tag}" =~ 'LX' ]]; then
    repos "${rom_target}";
    brunch "${rom_target}" | tee ${rom_logs_output};

  # Build Android LineageOS
  else
    repos "${rom_target}";
    brunch "${rom_target}" | tee ${rom_logs_output};
  fi;

  # When option enabled, use debuggable bootimages
  if romautorelease-debug-active; then
    bootimagedebuggable "${rom_device}" false;
    export WITH_SU=;
  fi;

  # Notify build result
  pushbrom "${rom_device}" "${rom_tag}";

  # Upload ROM when not working locally
  if ! romautorelease-local-active; then

    # Upload in multitasking when possible and allowed
    if ! romautorelease-clean-active && \
       [ "$(type -t gnome-terminal 2> /dev/null)" = 'file' ]; then
      gnome-terminal -x bash -c "\
        source $(shtoolsget)/android_development_shell_tools.rc;\
        devuplrom \"${rom_device}\" \"${rom_upload}\"; \
        if [ ! -z "\${android_development_shell_tools_uploaded_file}" ]; then \
          pushb \"$(hostname): ${rom_tag} for ${rom_device} uploaded\"; \
        fi";

    # Upload inline
    else
      devuplrom "${rom_device}" "${rom_upload}";
      if [ ! -z "${android_development_shell_tools_uploaded_file}" ]; then
        pushb "$(hostname): ${rom_tag} for ${rom_device} uploaded";
      fi;
    fi;
  fi;

  # When option enabled and not local, clean out folder
  if romautorelease-clean-active && ! romautorelease-local-active; then
    rm -rfv './out/target/product';
  fi;

  # Restore original path
  cd "${cwd}";
}

# === ROM Auto Releasers Menu ===
function autorelease()
{
  # Usage: autorelease (Helper menu access to autorelease* functions)

  # Variables
  local cnt=0;
  local key;
  local line_function;
  local line_usage;
  local list_functions=('');

  # Display shtools* menu
  echo '';
  for line_function in $(typeset -F | grep ' autorelease' | cut -d' ' -f 3 | grep -v '^autorelease$'); do

    # Parse usage
    line_usage=$(grep -a "Usage: ${line_function} " ${android_development_shell_tools_sources[@]});
    if [ -z "${line_usage}" ]; then
      continue;
    fi;
    line_usage=${line_usage#*\(};
    line_usage=${line_usage%\)*};
    list_functions+=(${line_function});

    # Item choice
    cnt=$((cnt + 1));
    echo -e "  \e[1;33m${cnt}: \e[1;37m${line_function} \e[1;32m[${line_usage}]\e[0m";

  done;
  echo '';

  # Request user input
  printf " > Command to run [1-${cnt}] : ";
  read key;

  # Execute requested function
  ${list_functions[${key}]};
}
