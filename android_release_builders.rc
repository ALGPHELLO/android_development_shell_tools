#!/bin/bash
# ======================================
#   Developed by Adrian DC - 2015-2017
# ======================================

# === ROM Automatic Releaser ===
function romautorelease()
{
  # Function usage
  local function_usage='romautorelease devicename {aosp/lineage/lx/oms/rr},j1,nowipe/outcl,bringup/dev/local/priv/wipeout]';
  if [ -z "${1}" ]; then
    echo '';
    echo " Usage: ${function_usage}";
    echo '';
    return;
  fi;

  # Internal variables
  local cwd=$(pwd);
  local rom_logs="${ANDROID_DEV_DRIVE}/Logs";
  local rom_logs_output;

  # Access ROM root
  croot;

  # ROM variables
  local rom_device="${1}";
  local rom_params="${2}";
  local rom_phone="${rom_device^}";
  local rom_target=$(codenametotarget "${rom_device}");
  local rom_tag;
  local rom_upload;

  # AOSP 7.1
  if [[ "${rom_params}" =~ 'aosp' ]]; then
    rom_tag='AOSP71';
    rom_upload="${rom_phone}/AOSP-7.1";

    # Handle Sony AOSP kernel build
    if [ ! "${rom_device}" = "${rom_target}" ]; then
      sonyaospkernelupdate "${rom_device}";
    fi;

  # LineageOS 14.1
  elif [[ "${rom_params}" =~ 'lineage' ]]; then
    rom_tag='LINEAGE141';
    rom_target="${rom_device}";
    rom_upload="${rom_phone}/LineageOS-14.x";

  # AOSP-OMS 7.x
  elif [[ "${rom_params}" =~ 'oms' ]]; then
    rom_tag='OMS71';
    rom_upload="${rom_phone}/AOSP-OMS-7.x";

  # LegacyXperia 14.1
  elif [[ "${rom_params}" =~ 'lx' ]]; then
    rom_tag='LX141';
    rom_upload="LegacyXperia/${rom_device}/LineageOS-14.x";

  # ResurrectionRemix Nougat
  elif [[ "${rom_params}" =~ 'rr' ]]; then
    rom_tag='RR71';
    rom_upload="${rom_phone}/ResurrectionRemix-N";

  # Automatic per-device selection
  else
    echo '';
    echo ' Error: ROM target has not been found...';
    echo " Usage: ${function_usage}";
    echo '';
    return;
  fi;

  # Bring-Up build
  if [[ "${rom_params}" =~ 'bringup' ]]; then
    bootimagedebuggable "${rom_device}" true;
  fi;

  # Development build
  if [[ "${rom_params}" =~ 'dev' ]]; then
    rom_upload='Development';

  # Private build
  elif [[ "${rom_params}" =~ 'priv' ]]; then
    rom_upload='.private';
  fi;

  # Ignore the build
  if [[ "${rom_params}" =~ 'nobuild' ]]; then
    echo ' Cleaning skipped...';

  # Delete the product outputs
  elif [[ "${rom_params}" =~ 'outcl' ]]; then
    rm -rfv './out/target/product';

  # Delete the devices relevant results
  elif [[ ! "${rom_params}" =~ 'nowipe' ]]; then
    outdevcl "${rom_device}";
  fi;

  # CPU handling
  if [[ "${rom_params}" =~ 'j1' ]]; then
    build_cpu_count=1;
  else
    build_cpu_count=$(grep -c ^processor /proc/cpuinfo);
  fi;

  # Compilation logs
  rom_logs_output="${rom_logs}/Build.${rom_device}.${rom_tag}.log";

  # Ignore the build
  if [[ "${rom_params}" =~ 'nobuild' ]]; then
    echo ' Build skipped...';

  # Build Android AOSP
  elif [[ "${rom_tag}" =~ 'AOSP71' ]]; then
    source ./build/envsetup.sh;
    lunch aosp_${rom_target}-userdebug;
    make -j${build_cpu_count} otapackage | tee ${rom_logs_output};

  # Build Android AOSP-CAF
  elif [[ "${rom_tag}" =~ 'CAF' ]]; then
    source ./build/envsetup.sh;
    lunch aosp_${rom_target}-userdebug;
    make -j${build_cpu_count} otapackage | tee ${rom_logs_output};

  # Build Android AOSP-OMS
  elif [[ "${rom_tag}" =~ 'OMS' ]]; then
    source ./build/envsetup.sh;
    lunch aosp_${rom_target}-userdebug;
    make -j${build_cpu_count} bacon | tee ${rom_logs_output};

  # Build Android ResurrectionRemix
  elif [[ "${rom_tag}" =~ 'RR' ]]; then
    export RR_BUILDTYPE=OFFICIAL;
    repos "${rom_target}";
    brunch "${rom_target}" | tee ${rom_logs_output};

  # Build Android Sony AOSP
  elif [[ "${rom_tag}" =~ 'SONY' ]]; then
    source ./build/envsetup.sh;
    lunch aosp_${rom_target}-userdebug;
    make -j${build_cpu_count} otapackage | tee ${rom_logs_output};

  # Build Android LegacyXperia
  elif [[ "${rom_tag}" =~ 'LX' ]]; then
    repos "${rom_target}";
    brunch "${rom_target}" | tee ${rom_logs_output};

  # Build Android LineageOS
  else
    repos "${rom_target}";
    brunch "${rom_target}" | tee ${rom_logs_output};
  fi;

  # Bring-Up build
  if [[ "${rom_params}" =~ 'bringup' ]]; then
    bootimagedebuggable "${rom_device}" false;
  fi;

  # Upload the result and notify
  pushbrom "${rom_target}" "${rom_tag}";
  if [[ ! "${rom_params}" =~ 'local' ]] && [[ ! "${rom_params}" =~ 'bringup' ]]; then
    if [ "$(type -t gnome-terminal 2> /dev/null)" = 'file' ]; then
      gnome-terminal -x bash -c "\
        source $(getbash)/android_bash.rc;\
        devuplrom \"${rom_device}\" \"${rom_upload}\"; \
        if [ ! -z "\${bash_android_uploaded_file}" ]; then \
          pushb \"${rom_tag} for ${rom_device} uploaded\"; \
        fi";
    else
      devuplrom "${rom_device}" "${rom_upload}";
      if [ ! -z "${bash_android_uploaded_file}" ]; then
        pushb "${rom_tag} for ${rom_device} uploaded";
      fi;
    fi;
  fi;

  # Wipe product output if requested
  if [[ "${rom_params}" =~ 'wipeout' ]]; then
    outdevcl "${rom_device}";

  # Delete the product outputs
  elif [[ "${rom_params}" =~ 'outcl' ]]; then
    rm -rfv './out/target/product';
  fi;

  # Restore original path
  cd "${cwd}";
}

# === AOSP 8960 Automatic Releaser ===
function aosp8960autorelease()
{
  # AndroidDev
  cdand;

  # Repository sync
  if [ -z "${1}" ]; then
    cdaosp;
    reposy;
  fi;

  # Devices to build
  local devices=${1:-huashan mint hayabusa tsubasa};

  # Walk through devices
  for device in ${devices}; do

    # Device selection
    if echo ${device} | grep -q -e 'hayabusa\|mint\|tsubasa'; then
      cdaosp blue;
    else
      cdaosp ${device};
    fi;

    # Device sync
    if [ -z "${2}" ]; then
      reposy;
    fi;

    # ROM build and release
    aosp8960patcher;
    romautorelease ${device} aosp;

  done;
}

# === AOSP SODP Automatic Releaser ===
function aospsodpautorelease()
{
  # AndroidDev
  cdand;

  # Repository sync
  if [ -z "${1}" ]; then
    cdaosp;
    reposy;
  fi;

  # Project selection, sync and patch
  cdaosp sony;
  if [ -z "${2}" ]; then
    reposy;
  fi;
  aospsonypatcher;

  # Devices to build
  local devices=${1:-dora};

  # Walk through devices
  for device in ${devices}; do

    # ROM build and release
    romautorelease ${device} aosp;

  done;
}

# === LineageOS Automatic Releaser ===
function lineageautorelease()
{
  # AndroidDev
  cdand;

  # Repository sync
  if [ -z "${1}" ]; then
    cdlineage;
    reposy;
  fi;

  # Devices to build
  local devices=${1:-huashan mint hayabusa tsubasa};

  # Walk through devices
  for device in ${devices}; do

    # Device sync
    cdlineage ${device};
    if [ -z "${2}" ]; then
      reposy;
    fi;

    # Import pending reviews
    lineagepatcher;

    # ROM build and release
    romautorelease ${device} lineage;

  done;
}

# === LegacyXperia Automatic Releaser ===
function lxautorelease()
{
  # AndroidDev
  cdand;

  # Repository sync
  if [ -z "${1}" ]; then
    cdlineage;
    reposy;
  fi;

  # Devices to build
  local devices=${1:-anzu haida coconut urushi smultron mango hallon iyokan satsuma zeus phoenix};

  # Devices sync
  cdlineage lx;
  if [ -z "${2}" ]; then
    lineagelxpatcher;
  fi;

  # Walk through devices
  for device in ${devices}; do

    # ROM build and release
    romautorelease ${device} lx,outcl;

  done;
}

# === ResurrectionRemix Automatic Releaser ===
function rrautorelease()
{
  # AndroidDev
  cdand;

  # Repository sync
  if [ -z "${1}" ]; then
    cdlineage;
    reposy;
  fi;

  # Devices to build
  local devices=${1:-huashan mint hayabusa tsubasa nicki taoshan};

  # Walk through devices
  for device in ${devices}; do

    # Device sync
    cdrr ${device};
    if [ -z "${2}" ]; then
      reposy;
    fi;

    # ROM build and release
    romautorelease ${device} rr,outcl;

  done;
}

# === MultiROM Automatic Releaser ===
function mromautorelease()
{
  cdand;
  cdmultirom;
  repomrom 'huashan';
  for device in mint hayabusa tsubasa; do
    repomrom "${device}" 'nosync';
  done;
}

# === TWRP Automatic Releaser ===
function twrpautorelease()
{
  cdand;
  cdtwrp;
  repotwrp 'huashan';
  for device in mint hayabusa tsubasa; do
    repotwrp "${device}" 'nosync';
  done;
}

# === ROM OMS 8x60 Releaser ===
function omsautorelease()
{
  # AndroidDev
  cdand;
  cdaospoms;

  # Repository sync
  if [ -z "${1}" ]; then
    reposycl;
  fi;

  # Devices to build
  local devices=${1:-huashan mint hayabusa tsubasa};

  # Walk through devices
  for device in ${devices}; do

    # ROM build and release
    romautorelease ${device} oms;

  done;
}

# === ROM Logs Viewer ===
function romlogs()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: romlogs <device> <rom> [logs_count_(default_200)]';
    echo '';
    return;
  fi;

  # Variables
  local rom_device="${1}";
  local rom_name="${2}";
  local logs_count="${3:-200}";
  local logs_files;
  local logs_file;

  # Logs detection
  logs_files=$(find "${ANDROID_DEV_DRIVE}/Logs" -maxdepth 1 -iname "Build.*${rom_device}*.*${rom_name}*.log");
  logs_file=$(echo "${logs_files}" | head -n 1);

  # Logs view
  echo '';
  if [ ! -z "${logs_files}" ]; then
    cat "${logs_file}" | tail -n ${logs_count};
    echo '';
    echo "${logs_files}";
  else
    echo " No logs for ${rom_device} / ${rom_name} found...";
  fi;
  echo '';
}
