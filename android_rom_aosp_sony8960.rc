#!/bin/bash
# ======================================
#   Developed by Adrian DC - 2015-2016
# ======================================

# === AOSP 8960 Patcher ===
function aosp8960patcher()
{
  # GitHub Credentials
  export GitEMail="user.name@gmail.com";
  export GitFullName="Full Name";
  export GitUserName="Username";

  # Create  ~/.bash_android.github.rc with the exports to override the credentials
  if [ -f ~/.bash_android.github.rc ]; then
    source ~/.bash_android.github.rc;
  fi;

  # ==========================================================
  # Repo root
  if [ -z "$(type -t croot)" ]; then
    while [ ! -e './build/envsetup.sh' ]; do
      cd ../;
    done;
    source ./build/envsetup.sh;
  fi;
  croot;

  # ==========================================================
  # Constants
  local projects_paths='
    bionic
    bootable/recovery
    build
    device/qcom/common
    device/sony/blue-common
    device/sony/hayabusa
    device/sony/huashan
    device/sony/mint
    device/sony/tsubasa
    external/e2fsprogs
    external/libnfc-nxp
    external/toybox
    frameworks/av
    frameworks/base
    frameworks/native
    frameworks/opt/telephony
    hardware/qcom/audio
    hardware/qcom/display
    hardware/qcom/fm
    hardware/qcom/media
    hardware/ril
    packages/apps/CellBroadcastReceiver
    packages/apps/DeskClock
    packages/apps/Music
    packages/apps/Launcher3
    packages/apps/Nfc
    packages/apps/Settings
    packages/inputmethods/LatinIME
    packages/providers/DownloadProvider
    packages/providers/MediaProvider
    system/core
    system/sepolicy
    ';

  # ==========================================================
  # Variables
  local commits_list;
  local commits_result;
  local git_revs_count;
  local git_revs_count_local;
  local path_branch;
  local project_github;
  local project_unfinished;

  # Projects loader
  for path in ${1:-${projects_paths}}; do

    # Project selection
    path=${path%/};
    path_branch=${path//\//_};
    echo '';
    echo " === ${path} [${path_branch}] ===";
    croot;

    # Ignore missing git projects
    if [ ! -d ${path}/.git ]; then
      echo '  .git project not found, ignoring...';
      continue;
    fi;
    cd ${path}/;

    # Targets selection
    case "${path}" in
      frameworks\/base)
        project_github='https://github.com/AdrianDC/platform_frameworks_base.git';
        path_branch='aosp_sony8960';;
      *)
        project_github='https://github.com/AdrianDC/aosp_development_sony8960.git';;
    esac;

    # Loop until project ready
    project_unfinished=1;
    while [ ${project_unfinished} -eq 1 ]; do

      # Fetch and compare
      git fetch ${project_github} ${path_branch};
      git_revs_count=$(git rev-list --left-right --count HEAD...FETCH_HEAD | tail -n 1);
      git_revs_count_local=$(echo "${git_revs_count}" | awk '{ print $1 }');
      git_revs_count_remote=$(echo "${git_revs_count}" | awk '{ print $2 }');
      echo " Differences: ${git_revs_count}";

      # Handle unupdated projects
      if [ ${git_revs_count_local} -ne 0 ]; then
        echo '';
        printf '  > Recreate onto newest changes [Y/n] ? ';
        read -t 20 key;

        # Update the tree
        if [ ! "${key}" = 'n' ] && [ ! "${key}" = 'N' ]; then
          git cherry-pick --abort &> /dev/null;

          # Detect commits to pick
          commits_list=$(git log --committer="${GitEMail}" --reverse --format=format:%H HEAD);
          if [ -z "${commits_list}" ]; then
            commits_list=$(git log --committer="${GitEMail}" --reverse --format=format:%H FETCH_HEAD);
          else
            commits_list=$(git rev-list --reverse FETCH_HEAD~${git_revs_count_remote}..FETCH_HEAD);
          fi;

          # Pick all commits
          for sha1 in ${commits_list}; do
            git cherry-pick ${sha1};
            commits_result=${?};

            # Failed update
            if [ ${commits_result} -ne 0 ] && [ ${commits_result} -ne 1 ]; then
              echo '';
              echo '  < Automatic update failed...';
              echo '     Tried to add following commits: '${commits_list};
              echo '     Stopping, push with : gitbranchpusher;';
              echo '';
              return;
            fi;
          done;

          # Automatic push
          gitbranchpusher;
        fi;

      # Project is ready, break the loop
      else
        project_unfinished=0;
      fi;

    done;

    # Cleanup
    git reset --hard FETCH_HEAD; git stash -u;

  done;

  # ==========================================================
  # repo root
  echo '';
  croot;
}
