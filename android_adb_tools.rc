#!/bin/bash
#
# Copyright 2015-2017 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === Standalone Source Helper ===
# source <(curl -Ls https://github.com/AdrianDC/android_development_shell_tools/raw/master/android_linux.rc)
# source <(curl -Ls https://github.com/AdrianDC/android_development_shell_tools/raw/master/android_adb_tools.rc)

# === ADB Screenshot ===
function adbscr()
{
  # Usage: adbscr (Take a screenshot from connected device)

  # Take a screenshot from connected device
  mkdir -p ./screenshots;
  adb shell screencap /sdcard/screenshot.png;
  adb pull /sdcard/screenshot.png "./screenshots/screenshot-$(date +%Y%m%d-%H%M%S).png";
  adb shell rm -f /sdcard/screenshot.png;
}

# === ADB Root Mounter ===
function adbr()
{
  # Usage: adbr (adb root and remount rw system)

  # Variables
  local adb_timeout;

  # Get root access and rw system
  adb_timeout="timeout 5 $(adbcmd)";
  ${adb_timeout} 'wait-for-device';
  ${adb_timeout} 'root';
  sleep 2;
  ${adb_timeout} 'wait-for-device';
  ${adb_timeout} 'remount';
  sleep 1;
  ${adb_timeout} 'wait-for-device';
}

# === ADB Root Checked Mounter ===
function adbro()
{
  # Usage: adbro (Verified adb root and remount rw system)

  # Variables
  local adb_cmd;
  local adb_timeout;
  local rootaccess;
  local systemaccess;
  local systemmount;

  # Prepare adb access
  adb_cmd=$(adbcmd);
  adb_timeout="timeout 5 ${adb_cmd}";

  # Verify faulty adb server
  if ${adb_cmd} shell 'echo -n "";' 2>&1 | grep -q 'protocol fault'; then

    # Kill current running adb server
    ${adb_timeout} kill-server;
    sudo killall 'adb' 2>/dev/null;

  fi;

  # Verify sudo requirements
  if ${adb_cmd} shell 'echo -n "";' 2>&1 | grep -q 'insufficient permissions'; then

    # Run adbsudo if permission denied
    adbsudo;
    adb_timeout="timeout 5 $(adbcmd)";

  fi;

  # Get root access
  rootaccess=$(${adb_timeout} shell whoami);
  if [ "${rootaccess:0:4}" != 'root' ] && [ "${rootaccess:16:5}" != 'uid 0' ]; then
    ${adb_timeout} 'wait-for-device';
    ${adb_timeout} 'root';
    sleep 2;
    ${adb_timeout} 'wait-for-device';
  fi;

  # Get rw system
  systemmount=$(${adb_timeout} shell mount | grep '/system ');
  systemaccess=$(echo "${systemmount}" | grep rw);
  if [ ! -z "${systemmount}" ] && [ -z "${systemaccess}" ]; then
    ${adb_timeout} 'wait-for-device';
    ${adb_timeout} 'remount';
    sleep 1;
    ${adb_timeout} 'wait-for-device';
  fi;
}

# === ADB Root Access ===
alias adbroot='adb kill-server; sudo adb start-server; sudo adb root; sudo adb wait-for-device; sudo adb remount';

# === ADB Sudo Switcher ===
function adbsudo()
{
  # Usage: adbsudo (ADB sudo toggle helper)

  # Enable adb sudo
  if ! alias adb &> /dev/null; then
    alias adb='sudo adb';
    sudo echo -n '';

  # Disable adb sudo
  else
    unalias adb;
  fi;

  # Kill adb server
  timeout 5 sudo adb kill-server;
  sudo killall 'adb' 2>/dev/null;

  # Reload scripts
  shtoolsup &> /dev/null;
}

# === ADB Command ===
function adbcmd()
{
  # Usage: adbcmd (Return adb command based on alias)

  # Use regular adb
  if ! alias adb &> /dev/null; then
    echo 'adb';

  # Use aliased adb
  else
    alias adb | sed "s/^alias adb='\(.*\)'$/\1/";
  fi;
}

# === ADB Root Stock ===
function adbrstock()
{
  # Usage: adbrstock (Stock ROM adb root access)

  # Stock ROM adb root access
  adb shell su -c 'setprop ro.secure 0; setprop ro.debuggable 1; setprop persist.service.adb.enable 1';
  adb shell getprop ro.secure;
}

# === ADB Wait For Device ===
function adbwait()
{
  # Usage: adbwait (adb wait for device)

  # Variables
  local adb_timeout;

  # Get root access and rw system
  adb_timeout="timeout 10 $(adbcmd)";
  ${adb_timeout} 'wait-for-device';
}

# === ADB Shell Root ===
function adbsu()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: adbsu <command...> (Run on root adb shell)';
    echo '';
    return;
  fi;

  # Variables
  local cmd=${*};

  # Run as adb root shell
  adb shell 'echo -n "";';
  if adb shell type su | grep -q 'not found' ||
      adb shell 'su -c echo "";' | grep -q 'su: invalid'; then
    adbro;
    adb shell "${cmd}";

  # Run on root adb shell
  else
    if ! mount | grep '/system ' | grep -q rw; then
      adb shell "su -c 'mount -o rw,remount /system'";
    fi;
    adb shell "su -c '${cmd}'";
  fi;
}

# === ADB IP Connector ===
function adbco()
{
  # Relaunch handling
  echo '';
  if [ ! -z "${1}" ]; then
    export ADB_IP_ADDRESS=${1};
  fi;

  # Usage
  if [ -z "${ADB_IP_ADDRESS}" ]; then
    echo '';
    echo ' Usage: adbco [ipaddress_once] (Helper for adb network access)';
    echo '';
    return;
  fi;

  # Variables
  local adb_timeout;

  # Connect and acquire adb root access
  adb_timeout="timeout 5 $(adbcmd)";
  export ADB_IP_PORT=5555;
  echo -e "\e[1;36mConnecting to ${ADB_IP_ADDRESS}:${ADB_IP_PORT}...\e[0m";
  ${adb_timeout} connect "${ADB_IP_ADDRESS}:${ADB_IP_PORT}";
  echo -e '\e[1;36mConnected...\e[0m';
  ${adb_timeout} 'wait-for-device';
  echo -e '\e[1;36mGetting root access...\e[0m';
  ${adb_timeout} root;
  sleep 2;
  echo -e '\e[1;36mReconnecting...\e[0m';
  ${adb_timeout} connect "${ADB_IP_ADDRESS}:${ADB_IP_PORT}";
  echo -e '\e[1;36mConnected...\e[0m';
  ${adb_timeout} 'wait-for-device';
  echo -e '\e[1;36mMounting as root...\e[0m';
  ${adb_timeout} remount;
  sleep 1;
  ${adb_timeout} 'wait-for-device';
  echo -e '\e[1;36mReady...\e[0m';
  echo '';
}

# === ADB File Editor ===
function adbedit()
{
  # Usage: adbedit [file_path] (Edit adb file, default on /system/build.prop)

  # Variables
  local name;
  local path;

  # Initialize variables
  path=${1:-/system/build.prop};
  name=$(basename "${path}");

  # Pull file as root
  adbro;
  adb pull "${path}";

  # Check local file permissions
  if [ ! -r "${name}" ] || [ ! -w "${name}" ]; then
    sudo chown "$(whoami):$(whoami)" "${name}";
    chmod 666 "${name}";
  fi;

  # Edit local file
  fileedit "${name}";
  echo -n ' Ok ? [ENTER] ';
  read -r;

  # Push back file to device
  adb push "${name}" "${path}";
  rm "${name}";
}

# === ADB Inputs Reader ===
function adbinputs()
{
  # Usage: adbinputs (Dump all input devices)

  #grep . /sys/class/input/event*/device/name
  #adbs hexdump -C /dev/input/event7
  command='cat /proc/bus/input/devices';
  echo '';
  echo "adb shell ${command}";
  echo '';
  adb shell "${command}";
}

# === ADB Events Reader ===
function adbreadevents()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: adbreadevents <event_number> (Read input events)';
    echo '';
    return;
  fi;

  # Read input events
  adb shell od -x "/dev/input/${1}" \
   | awk -Wposix '{ if ($7) printf(" Key %4d - State %4d\n", "0x" $7, "0x" $8) }';
}
