#!/bin/bash
# ======================================
#   Developed by Adrian DC - 2015-2017
# ======================================

# === Standalone Source Helper ===
# source <(curl -Ls https://github.com/AdrianDC/android_shell_tools/raw/master/android_kernel_defconfig.rc)

# === Kernel DefConfig Editor ===
function makedefconf()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo '  Usage: makedefconf <device_name> [bool_full_config] [diff_config] [force_config=value]';
    echo '';
    return;
  fi;

  # Variables
  local defconfig=${1};
  local configmode=${2};
  local diffcommon=${3};
  local forceconfig=${4};

  # DiffConfig
  local diffconfig=$(ls "arch/arm"*"/configs/diffconfig/${configmode}_diffconfig" 2> /dev/null);
  if [ ! -z "${diffconfig}" ] && [ -f "${diffconfig}" ]; then
    export ARCH=$(echo "${diffconfig}" | sed 's/.*\(arm[^\/]*\)\/.*/\1/');
    export KBUILD_DIFFCONFIG="${configmode}_diffconfig";
    diffcommon=$(dirname "${diffconfig}")/${diffcommon}_diffconfig;
  fi;

  # Architecture
  export SUBARCH=arm;
  export KCONFIG_NOTIMESTAMP=true;

  # Detect arm / arm64
  export ARCH=arm;
  local DEFCONFIG_CHECKS;
  for arch_check in arm arm64; do
    DEFCONFIG_CHECKS=("./arch/${arch_check}/configs/"*"${defconfig}"*);
    if [ ${#DEFCONFIG_CHECKS[@]} -eq 1 ] && [ -f "${DEFCONFIG_CHECKS}" ]; then
      export ARCH=${arch_check};
      break;
    fi;
  done;

  # Kernel input
  local DEFCONFIG_PATH=./arch/${ARCH}/configs;
  local DEFCONFIG_INPUT=("${DEFCONFIG_PATH}/"*"${defconfig}"*);

  # Handle looped forced config
  if [ ! -z "${forceconfig}" ] && [ ${#DEFCONFIG_INPUT[@]} -gt 1 ]; then
    for defconfig in ${DEFCONFIG_INPUT[*]}; do
      makedefconf "${defconfig##*/}" "${configmode}" "${diffcommon}" "${forceconfig}";
    done;
    return;

  # Handle failed defconfig selection
  elif [ ${#DEFCONFIG_INPUT[@]} -ne 1 ] || [ ! -f "${DEFCONFIG_INPUT}" ]; then
    if [ ${#DEFCONFIG_INPUT[@]} -eq 1 ]; then
      DEFCONFIG_INPUT=();
    fi;
    echo '';
    echo '  Error: makedefconf found '${#DEFCONFIG_INPUT[@]}' defconfigs';
    echo '';
    return;
  fi;

  # Kernel defconfig
  local DEFCONFIG_FILE=$(basename "${DEFCONFIG_INPUT}");

  # Google configurations
  if [[ "${defconfig}" == 'google' ]]; then
    ./scripts/kconfig/merge_config.sh ${DEFCONFIG_PATH}/${DEFCONFIG_FILE} android/configs/android-base.cfg android/configs/android-recommended.cfg
    mv ./.config ./.config_android;
    make ${DEFCONFIG_FILE};
    if [ ! -z "${forceconfig}" ]; then
      kernelconfigupdater "${forceconfig}";
    fi;
    meld ./.config ./.config_android;
    rm ./.config_android;

  # Make full defconfig
  elif [ ! -z "${configmode}" ]; then
    make ${DEFCONFIG_FILE};
    if [ ! -z "${forceconfig}" ]; then
      kernelconfigupdater "${forceconfig}";
    fi;
    if [ -f "${diffconfig}" ]; then
      if [ -f "${diffcommon}" ]; then
        meld ./.config "${diffconfig}" &
          meld ./.config "${diffcommon}" &
          meld ./.config "${DEFCONFIG_PATH}/${DEFCONFIG_FILE}";
      else
        meld ./.config "${diffconfig}" &
          meld ./.config "${DEFCONFIG_PATH}/${DEFCONFIG_FILE}";
      fi;
    else
      meld ./.config "${DEFCONFIG_PATH}/${DEFCONFIG_FILE}";
    fi;

  # Make minimal defconfig
  else
    make "${DEFCONFIG_FILE}";
    if [ ! -z "${forceconfig}" ]; then
      kernelconfigupdater "${forceconfig}";
    fi;
    make savedefconfig;
    meld ./defconfig "${DEFCONFIG_PATH}/${DEFCONFIG_FILE}";
    rm ./defconfig;
  fi;

  # Cleanup
  make mrproper;
  #rm -rf scripts/basic;
  #rm -rf scripts/kconfig;
  #rm -rf .config;
}

# === Kernel Config Updater ===
function kernelconfigupdater()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo '  Usage: kernelconfigupdater <CONFIG_NAME=VALUE_or_# CONFIG_NAME is not set>';
    echo '';
    return;
  fi;

  # Detect .config
  if [ ! -f .config ]; then
    echo '';
    echo '  Error: .config was not found';
    echo '';
    return;
  fi;

  # Configuration variables
  local config_string=(${1})
  local config_name='';
  local config_output='';

  # Configuration parsing
  if [ "${config_string[0]:0:1}" = "#" ]; then
    config_name=${config_string[1]};
    config_output="# ${config_name} is not set";
  else
    config_name=${config_string[@]%%=*};
    config_output="${config_name}=${config_string[@]##*=}";
  fi;

  # Configuration output
  sed -i "/# ${config_name} is not set/d" .config;
  sed -i "/${config_name}=/d" .config;
  echo ${config_output} >> .config;
  rm -f .config.old;
  cp .config .config.old;

  # Update .config
  make oldconfig;
}

# === Kernel DefConfig Setter ===
function makedefconfset()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo '  Usage: makedefconfset <device_name> [force_config=value]';
    echo '';
    return;
  fi;

  # Use makedefconf
  makedefconf "${1}" '' '' "${2}";
}
