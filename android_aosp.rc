#!/bin/bash
# ======================================
#   Developed by Adrian DC - 2015-2016
# ======================================

# === Bash AOSP Sources ===
source $bash_android_dir/android_aosp_marshmallow.rc;
source $bash_android_dir/android_aosp_nougat.rc;
source $bash_android_dir/android_cyanogenmod_14.rc;
source $bash_android_dir/android_sony_nougat.rc;

# === Repo Init AOSP ===
function repoinitaosp()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: repoinitaosp android-7.1.1_r{XX} [referenced,clean]';
    echo '';
    return;
  fi;

  # Variables
  local release="${1}";
  local params="${2}";
  local branch="android-7.1.1_r${release}";

  # Clean repo manifest
  rm -rfv .repo/manifests;
  rm -rfv .repo/manifests.git;
  rm -rfv .repo/manifest.xml;
  rm -rfv .repo/project.list;
  rm -rfv .repo/projects;
  rm -rfv .repo/repo;
  if [[ "${params}" =~ 'clean' ]]; then
    rm -rfv .repo/project-objects;
    find * -maxdepth 0 -not -name 'out' -print0 | xargs -0 rm -rfv;
  fi;

  # Repo init
  if [[ "${params}" =~ 'referenced' ]]; then
    repo init -u http://android.googlesource.com/platform/manifest -b ${branch} \
              --reference=$(readlink -f ../AOSP);
  else
    repo init -u http://android.googlesource.com/platform/manifest -b ${branch};
  fi;

  # Unneeded branches cleanup
  cd .repo/manifests/;
  git tag | grep -v ${branch} | xargs git tag -d > /dev/null;
  echo "repoinitaosp done for ${branch}";
  echo '';
  cd ../../;
}

# === Repo Init CM ===
function repoinitcm()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: repoinitcm {14.0/14.1} [referenced,clean]';
    echo '';
    return;
  fi;

  # Variables
  local release="${1}";
  local params="${2}";
  local branch="cm-${release}";

  # Clean repo manifest
  rm -rfv .repo/manifests;
  rm -rfv .repo/manifests.git;
  rm -rfv .repo/manifest.xml;
  rm -rfv .repo/project.list;
  rm -rfv .repo/projects;
  rm -rfv .repo/repo;
  if [[ "${params}" =~ 'clean' ]]; then
    rm -rfv .repo/project-objects;
    find * -maxdepth 0 -not -name 'out' -print0 | xargs -0 rm -rfv;
  fi;

  # Repo init
  if [[ "${params}" =~ 'referenced' ]]; then
    repo init -u http://github.com/CyanogenMod/android.git -b ${branch} \
              --reference=$(readlink -f ../CyanogenMod);
  else
    repo init -u http://github.com/CyanogenMod/android.git -b ${branch};
  fi;

  # Unneeded branches cleanup
  cd .repo/manifests/;
  git tag | grep -v "${branch}" | xargs git tag -d > /dev/null;
  echo "repoinitcm done for ${branch}";
  echo '';
  cd ../../;
}

# === Repo Init AOSP Devices ===
function repoinitaospall()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: repoinitaospall android-7.1.1_r{XX}';
    echo '';
    return;
  fi;

  # Update common repo
  cdaosp;
  repoinitaosp ${1};
  reposy;

  # Walk through devices
  for device in huashan mint hayabusa tsubasa sony; do

    # Update device repo
    cdaosp ${device};
    repoinitaosp ${1} referenced;
    reposy;

  done;
}

# === Repo Init AOSP Devices ===
function repoinitcmall()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: repoinitcmall {14.0/14.1}';
    echo '';
    return;
  fi;

  # Update common repo
  cdcm;
  repoinitcm ${1};
  reposy;

  # Walk through devices
  for device in huashan mint hayabusa tsubasa sony; do

    # Update device repo
    cdcm ${device};
    repoinitcm ${1} referenced;
    reposy;

  done;
}

# === Repo Init ResurrectionRemix ===
function repoinitrr()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: repoinitrr {nougat} [referenced,clean]';
    echo '';
    return;
  fi;

  # Variables
  local release="${1}";
  local params="${2}";
  local branch="${release}";

  # Clean repo manifest
  rm -rfv .repo/manifests;
  rm -rfv .repo/manifests.git;
  rm -rfv .repo/manifest.xml;
  rm -rfv .repo/project.list;
  rm -rfv .repo/projects;
  rm -rfv .repo/repo;
  if [[ "${params}" =~ 'clean' ]]; then
    rm -rfv .repo/project-objects;
    find * -maxdepth 0 -not -name 'out' -print0 | xargs -0 rm -rfv;
  fi;

  # Repo init
  if [[ "${params}" =~ 'referenced' ]]; then
    repo init -u http://github.com/ResurrectionRemix/platform_manifest.git -b ${branch} \
              --reference=$(readlink -f ../CyanogenMod);
  else
    repo init -u http://github.com/ResurrectionRemix/platform_manifest.git -b ${branch};
  fi;

  # Unneeded branches cleanup
  cd .repo/manifests/;
  git tag | grep -v "${branch}" | xargs git tag -d;
  echo "repoinitrr done for ${branch}";
  cd ../../;
}

# === Repo Init Symlinks ===
function repoinitsymlinks()
{
  # Snapdraggon LLVM prebuilts
  ln -sv ../../CyanogenMod/prebuilts/snapdragon-llvm ./prebuilts/snapdragon-llvm;
}

# === AOSP Builder ===
function aospbuild()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: aospbuild device_name [j1,nobuild,init,silent]';
    echo '';
    return;
  fi;

  # ROM variables
  local rom_device="${1}";
  local rom_params="${2}";
  local rom_target=$(codenametotarget "${rom_device}");
  local rom_logs="${ANDROID_DEV_DRIVE}/Logs";
  local rom_logs_output="${rom_logs}/Build.${rom_device}.AOSP.log";

  # Init mode
  if [[ "${1}" =~ 'init' ]]; then
    rom_device='huashan';
    rom_target='huashan';
    rom_params='nobuild';
  fi;

  # CPU handling
  if [[ "${rom_params}" =~ 'j1' ]]; then
    build_cpu_count=1;
  else
    build_cpu_count=$(grep -c ^processor /proc/cpuinfo);
  fi;

  # Compilation preparation
  source ./build/envsetup.sh;
  lunch aosp_${rom_target}-userdebug;

  # Compilation start
  if [[ ! "${rom_params}" =~ 'nobuild' ]]; then
    make -j${build_cpu_count} otapackage | tee -a ${rom_logs_output};

    # Final notification
    if [[ ! "${rom_params}" =~ 'silent' ]]; then
      pushbrom "${rom_device}";
    fi;
  fi;
}

# === AOSP Project Pusher ===
function aospprojectpusher()
{
  # Variables
  local projectbranch;
  local projectdir=${PWD};
  local repodir=${PWD};
  local target_backup;

  # Check project
  if [ ! -d "${projectdir}/.git" ]; then
    echo '';
    echo ' Current project was not found...';
    echo '';
    return;
  fi;

  # Find repository
  while [[ "${repodir}" != '/' && ! -d "${repodir}/.repo" ]]; do
    repodir=$(readlink -f "${repodir}/..");
  done;
  if [ ! -d "${repodir}/.repo" ]; then
    echo '';
    echo ' Repository was not found';
    echo '';
    return;
  fi;

  # Status
  projectdir=${projectdir#${repodir}/};
  case "${projectdir}" in
    frameworks\/base)
      projectbranch='aosp_sony8960';;
    *)
      projectbranch=${projectdir//\//_};;
  esac;
  echo '';
  echo " Project directory: ${projectdir}";
  echo " Reporisory path: ${repodir}";
  echo '';

  # Checking missing backup remote
  target_backup=$(git remote -v \
               | grep -i backup);
  if [ -z "${target_backup}" ]; then
    if [[ "${repodir}" =~ 'sony' ]]; then
      gitrasonyaosp;
    else
      gitrasony8960;
    fi;
  fi;

  # Fetch upstream backup
  git fetch backup ${projectbranch};
  git rev-list --left-right --count FETCH_HEAD...HEAD;
  echo '';

  # Confirmation
  command="git push -f backup HEAD:refs/heads/${projectbranch}";
  echo " $command";
  printf '  > Proceed with project push [ENTER] ? ';
  read key;

  # Upload to backup
  echo '';
  ${command};
  echo '';
}
