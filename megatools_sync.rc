#!/bin/bash
# ======================================
#   Developed by Adrian DC - 2015-2017
# ======================================

# === Megatools Sync ===
function megasync()
{
  # Usage
  if [ -z "${1}" ] || [ -z "${2}" ] || [ -z "${3}" ]; then
    echo '';
    echo ' Usage: megasync <local_folder> <remote_folder> <--upload/--download> [--copy,-y/-n]';
    echo '';
    echo '  > Upload with --upload (individual), optional --copy (megacopy)';
    echo '  > Download with --download (individual), optional --copy (megacopy)';
    echo '';
    return;
  fi;

  # Ignore missing credentials
  if [ ! -f ~/.megarc ]; then
    echo '';
    echo ' megatools: ~/.megarc is missing, please read megatools documentation';
    echo '';
    return;
  fi;

  # Variables
  local local_folder="${1}";
  local remote_folder="${2%/}";
  local option_direction="${3}";
  local option_params="${4}";
  local tmp_local_ls=$(mktemp);
  local tmp_remote_ls=$(mktemp);
  local flag_delete;
  local key;
  local key_override;
  local line;
  local line_tmp;
  local file_type;
  local file_size;
  local file_path;
  local file_local;
  local file_escaped;
  local time_start;
  local time_span;

  # =======================================================
  # Parameters input
  if [[ "${option_params}" =~ '-y' ]]; then
    key_override='true';
    key='y';
  elif [[ "${option_params}" =~ '-n' ]]; then
    key_override='true';
    key='n';
  else
    key_override='';
  fi;

  # =======================================================
  # Introduction message
  echo '';
  echo -e " \e[1;37mmegasync: Syncing '${local_folder}' and '${remote_folder}'...\e[0m";

  # Remove local megatools cache
  rm -rf /tmp/*.megatools.cache;

  # Retrieve files informations
  find "${local_folder}" -mindepth 1 -printf '%s\t%P#\n' > "${tmp_local_ls}";
  megals -lR "${remote_folder}" > "${tmp_remote_ls}";

  # =======================================================
  # Upload mode
  if [ ! "${option_direction}" = '--download' ]; then

    # Parse all remote files
    while [ -s "${tmp_remote_ls}" ]; do

      # Extract first line
      line=($(sed '1!d' "${tmp_remote_ls}"));
      sed -i '1d' "${tmp_remote_ls}";

      # Ignore empty lines
      if [ -z "${line}" ]; then
        continue;
      fi;

      # Parse line content
      file_type="${line[2]}";
      file_size="${line[3]}";
      file_path="${line[@]:6}";
      file_local="${file_path#${remote_folder}}";
      file_local="${file_local#/}";
      file_escaped="${file_local//\\/\\\\}";
      file_escaped="${file_escaped//\|/\\\|}";
      file_escaped="${file_escaped//\[/\\\[}";
      file_escaped="${file_escaped//\]/\\\]}";
      flag_delete='';

      # Ignore irrelevant paths
      if [ "${file_path}" = "${remote_folder}" ]; then
        continue;
      fi;

      # Verify folder exists
      if [ "${file_type}" = '1' ] && [ "${file_size}" = '-' ]; then
        if [ ! -d "${file_local}" ]; then
          printf " \e[1;31mmegasync: Remote folder '${file_local}/' is missing:\e[0m";
          flag_delete='true';

        # Exclude folder from needed uploads
        else
          sed -i "\|\t${file_escaped}#|d" "${tmp_local_ls}";
        fi;

      # Verify files sizes do not mismatch
      elif [ -f "${file_local}" ]; then
        if [ ${file_size/-/0} -ne $(stat -c "%s" "${file_local}") ]; then
          printf " \e[1;31mmegasync: Remote file '${file_local}' is different:\e[0m";
          flag_delete='true';

        # Exclude file from needed uploads
        else
          sed -i "\|\t${file_escaped}#|d" "${tmp_local_ls}";
        fi;

      # Remote file no longer exist locally
      else
        printf " \e[1;31mmegasync: Remote file '${file_local}' locally removed:\e[0m";
        flag_delete='true';
      fi;

      # Delete remote file
      if [ ! -z "${flag_delete}" ]; then
        printf " Delete remote [y/N] ? ";
        if [ -z "${key_override}" ]; then
          read -t 20 key;
        else
          echo '';
        fi;
        if [ ${?} -ne 0 ]; then
          echo '';
        fi;
        if [ "${key}" = 'Y' ] || [ "${key}" = 'y' ]; then
          megarm "${file_path}";
          echo -e " \e[1;32mmegasync: Removed remote '${file_path}'\e[0m";

          # Remove folder elements
          if [ "${file_type}" = '1' ]; then
            sed -i "\|${file_escaped}|d" "${tmp_remote_ls}";
          fi;
        fi;
      fi;

    done;

    # ===========================================
    # Upload with megacopy to remote
    if [[ "${option_params}" =~ '--copy' ]]; then
      echo -e " \e[1;33mmegasync: megacopy starting...\e[0m";
      rm -rf /tmp/*.megatools.cache;
      megacopy --local "${local_folder}" --remote "${remote_folder}" 2>&1 \
        | grep -v 'ERROR: File already exists at';

    # Upload with megaput to remote
    else

      # Check all files listed for upload
      while [ -s "${tmp_local_ls}" ]; do
        line=($(sed '1!d' "${tmp_local_ls}"));
        sed -i '1d' "${tmp_local_ls}";

        # Parse file informations
        file_local="${line[@]:1}";
        file_local="${file_local#/}";
        file_local="${file_local%#}";
        file_path="${remote_folder}/${file_local}";
        time_start=$(date +%s);

        # Create remote folder
        if [ -d "${file_local}" ]; then
          megamkdir "${file_path}";
          echo -e " \e[1;33mmegasync: Created remote folder '${file_path}/'\e[0m";

        # Upload file to target
        else
          file_path=$(dirname "${file_path}");
          echo -e " \e[1;33mmegasync: Uploading to the server - Path '${file_path}'\e[0m";
          megamkdir "${file_path}" 2>&1 \
            | grep -v 'Directory already exists:';
          megaput --path "${file_path}" "${file_local}";

          # Show upload time
          time_span=$(($(date +%s)-${time_start}));
          echo -e " \e[1;37mmegasync: Upload done in ${time_span} secs\e[0m";

        fi;
      done;
    fi;

  # =======================================================
  # Download mode
  else

    # Parse all local files
    while [ -s "${tmp_local_ls}" ]; do

      # Extract first line
      line=($(sed '1!d' "${tmp_local_ls}"));
      sed -i '1d' "${tmp_local_ls}";

      # Ignore empty lines
      if [ -z "${line}" ]; then
        continue;
      fi;

      # Parse line content
      file_size="${line[0]}";
      file_path="${line[@]:1}";
      file_path="${file_path%#}";
      file_local="${file_path#${local_folder}}";
      file_local="${file_local#/}";
      file_escaped="${file_path//\\/\\\\}";
      file_escaped="${file_escaped//\|/\\\|}";
      file_escaped="${file_escaped//\[/\\\[}";
      file_escaped="${file_escaped//\]/\\\]}";
      flag_delete='';

      # Ignore irrelevant paths
      if [ "${file_path}" = '' ] || [ ! -e "${file_path}" ]; then
        continue;
      fi;

      # Extract remote information
      file_type='0';
      if [ -d "${file_path}" ]; then
        file_type='1';
      fi;
      line_tmp=$(awk "\$3 == ${file_type}" "${tmp_remote_ls}" 2>&1 | grep "${remote_folder}/${file_escaped//\\\|/\|}$");
      line_tmp=(${line_tmp});

      # Verify folder exists
      if [ -d "${file_path}" ]; then
        if [ -z "${line_tmp[2]}" ]; then
          printf " \e[1;31mmegasync: Remote folder '${file_local}/' is missing:\e[0m";
          flag_delete='true';

        # Exclude folder from needed downloads
        else
          sed -i "\|${remote_folder}/${file_escaped}$|d" "${tmp_remote_ls}";
        fi;

      # Verify files sizes do not mismatch
      elif [ ! -z "${line_tmp}" ]; then
        if [ "${line_tmp[3]}" = '-' ] || [ ${file_size} -ne ${line_tmp[3]} ]; then
          printf " \e[1;31mmegasync: Local file '${file_local}' is different:\e[0m";
          flag_delete='true';

        # Exclude file from needed downloads
        else
          sed -i "\|${remote_folder}/${file_escaped}$|d" "${tmp_remote_ls}";
        fi;

      # Local file no longer exist remotely
      else
        printf " \e[1;31mmegasync: Local file '${file_local}' remotely removed:\e[0m";
        flag_delete='true';
      fi;

      # Delete local file
      if [ ! -z "${flag_delete}" ]; then
        printf " Delete local [y/N] ? ";
        if [ -z "${key_override}" ]; then
          read -t 20 key;
        else
          echo '';
        fi;
        if [ ${?} -ne 0 ]; then
          echo '';
        fi;
        if [ "${key}" = 'Y' ] || [ "${key}" = 'y' ]; then
          rm -r "${file_path}";
          echo -e " \e[1;32mmegasync: Removed local '${file_path}'\e[0m";
        fi;
      fi;

    done;

    # ===========================================
    # Download with megacopy to local
    if [[ "${option_params}" =~ '--copy' ]]; then
      echo -e " \e[1;33mmegasync: megacopy starting...\e[0m";
      rm -rf /tmp/*.megatools.cache;
      megacopy --local "${local_folder}" --remote "${remote_folder}" --download 2>&1 \
        | grep -v 'ERROR: File already exists at';

    # Download with megaget to local
    else

      # Check all files listed for upload
      while [ -s "${tmp_remote_ls}" ]; do
        line=($(sed '1!d' "${tmp_remote_ls}"));
        sed -i '1d' "${tmp_remote_ls}";

        # Parse file informations
        file_type="${line[2]}";
        file_path="${line[@]:6}";
        file_local="${file_path#${remote_folder}}";
        file_local="${file_local#/}";
        file_escaped="${file_local//\|/\\\|}";
        file_escaped="${file_escaped//\[/\\\[}";
        file_escaped="${file_escaped//\]/\\\]}";
        time_start=$(date +%s);

        # Ignore irrelevant paths
        if [ -z "${file_local}" ]; then
          continue;
        fi;

        # Create local folder
        if [ "${file_type}" = '1' ]; then
          if [ ! -d "${file_local}" ]; then
            mkdir -p "${file_local}";
            echo -e " \e[1;33mmegasync: Created local folder '${file_local}/'\e[0m";
          fi;

        # Download file
        else

          # Download header informations
          file_local=$(dirname "${file_local}");
          echo -e " \e[1;33mmegasync: Downloading from the server - Path '${file_local}/'\e[0m";

          # Download file to local
          mkdir -p "${file_local}";
          megaget --path "${file_local}" "${file_path}";

          # Show download time
          time_span=$(($(date +%s)-${time_start}));
          echo -e " \e[1;37mmegasync: Download done in ${time_span} secs\e[0m";

        fi;
      done;
    fi;
  fi;

  # =======================================================
  # End message
  echo -e " \e[1;32mmegasync: Synced '${local_folder}' and '${remote_folder}'\e[0m";
  echo '';

  # Cleanup temp files
  rm ${tmp_local_ls};
  rm ${tmp_remote_ls};
}
