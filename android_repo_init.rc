#!/bin/bash
# ======================================
#   Developed by Adrian DC - 2015-2016
# ======================================

# === Repo Init AOSP ===
function repoinitaosp()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: repoinitaosp android-7.1.1_r{XX} [referenced,clean,wipeout]';
    echo '';
    return;
  fi;

  # Variables
  local release="${1}";
  local params="${2}";
  local branch="android-7.1.1_r${release}";

  # Wipe the out folder
  if [[ "${params}" =~ 'wipeout' ]]; then
    rm -rfv out;
  fi;

  # Clean repo manifest
  rm -rfv .repo/manifests;
  rm -rfv .repo/manifests.git;
  rm -rfv .repo/manifest.xml;
  rm -rfv .repo/project.list;
  rm -rfv .repo/projects;
  rm -rfv .repo/repo;
  if [[ "${params}" =~ 'clean' ]]; then
    rm -rfv .repo/project-objects;
    find * -maxdepth 0 -not -name 'out' -print0 | xargs -0 rm -rfv;
  fi;

  # Repo init
  if [[ "${params}" =~ 'referenced' ]]; then
    repo init -u http://android.googlesource.com/platform/manifest -b ${branch} \
              --reference=$(readlink -f ../AOSP);
  else
    repo init -u http://android.googlesource.com/platform/manifest -b ${branch};
  fi;

  # Unneeded branches cleanup
  cd .repo/manifests/;
  git tag | grep -v ${branch} | xargs git tag -d > /dev/null;
  echo "repoinitaosp done for ${branch}";
  echo '';
  cd ../../;
}

# === Repo Init LAOS ===
function repoinitlaos()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: repoinitlaos {13.0/14.1} [referenced,clean,wipeout]';
    echo '';
    return;
  fi;

  # Variables
  local release="${1}";
  local params="${2}";
  local branch="cm-${release}";

  # Wipe the out folder
  if [[ "${params}" =~ 'wipeout' ]]; then
    rm -rfv out;
  fi;

  # Clean repo manifest
  rm -rfv .repo/manifests;
  rm -rfv .repo/manifests.git;
  rm -rfv .repo/manifest.xml;
  rm -rfv .repo/project.list;
  rm -rfv .repo/projects;
  rm -rfv .repo/repo;
  if [[ "${params}" =~ 'clean' ]]; then
    rm -rfv .repo/project-objects;
    find * -maxdepth 0 -not -name 'out' -print0 | xargs -0 rm -rfv;
  fi;

  # Repo init
  if [[ "${params}" =~ 'referenced' ]]; then
    repo init -u http://github.com/LineageOS/android.git -b ${branch} \
              --reference=$(readlink -f ../LineageOS);
  else
    repo init -u http://github.com/LineageOS/android.git -b ${branch};
  fi;

  # Unneeded branches cleanup
  cd .repo/manifests/;
  git tag | grep -v "${branch}" | xargs git tag -d > /dev/null;
  echo "repoinitlaos done for ${branch}";
  echo '';
  cd ../../;
}

# === Repo Init AOSP Devices ===
function repoinitaospall()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: repoinitaospall android-7.1.1_r{XX} [clean,wipeout]';
    echo '';
    return;
  fi;

  # Variables
  local repocommon;

  # Update common repo
  cdaosp;
  repocommon=$(pwd);
  repoinitaosp ${1} ${2};
  reposy;

  # Walk through devices
  for device in ${bash_android_referenced_aosp}; do

    # Select and verify the path existence
    cdaosp ${device};
    if [ ! "$(pwd)" = "${repocommon}" ]; then

      # Update device repo
      repoinitaosp ${1} referenced,${2};
      reposy;

    fi;

  done;
}

# === Repo Init AOSP Devices ===
function repoinitlaosall()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: repoinitlaosall {13.0/14.1} [clean,wipeout]';
    echo '';
    return;
  fi;

  # Variables
  local repocommon;

  # Update common repo
  cdlaos;
  repocommon=$(pwd);
  repoinitlaos ${1} ${2};
  reposy;

  # Walk through devices
  for device in ${bash_android_referenced_laos}; do

    # Select and verify the path existence
    cdlaos ${device};
    if [ ! "$(pwd)" = "${repocommon}" ]; then

      # Update device repo
      repoinitlaos ${1} referenced,${2};
      reposy;

    fi;

  done;
}

# === Repo Init ResurrectionRemix ===
function repoinitrr()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: repoinitrr {nougat} [referenced,clean,wipeout]';
    echo '';
    return;
  fi;

  # Variables
  local release="${1}";
  local params="${2}";
  local branch="${release}";

  # Wipe the out folder
  if [[ "${params}" =~ 'wipeout' ]]; then
    rm -rfv out;
  fi;

  # Clean repo manifest
  rm -rfv .repo/manifests;
  rm -rfv .repo/manifests.git;
  rm -rfv .repo/manifest.xml;
  rm -rfv .repo/project.list;
  rm -rfv .repo/projects;
  rm -rfv .repo/repo;
  if [[ "${params}" =~ 'clean' ]]; then
    rm -rfv .repo/project-objects;
    find * -maxdepth 0 -not -name 'out' -print0 | xargs -0 rm -rfv;
  fi;

  # Repo init
  if [[ "${params}" =~ 'referenced' ]]; then
    repo init -u http://github.com/ResurrectionRemix/platform_manifest.git -b ${branch} \
              --reference=$(readlink -f ../LineageOS);
  else
    repo init -u http://github.com/ResurrectionRemix/platform_manifest.git -b ${branch};
  fi;

  # Unneeded branches cleanup
  cd .repo/manifests/;
  git tag | grep -v "${branch}" | xargs git tag -d;
  echo "repoinitrr done for ${branch}";
  cd ../../;
}
