#!/bin/bash
#
# Copyright 2015-2017 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === Repo Init AOSP ===
function repoinitaosp()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: repoinitaosp <branch_id> [referenced,clean,shallow,example] (repo init for AOSP)';
    echo '';
    echo ' Branch identifications:';
    echo '  - android-7.1.2_r<XX>';
    echo '  - android-<X-preview-X>';
    echo '  - master';
    echo '';
    return;
  fi;

  # Variables
  local release=${1};
  local params=${2};
  local branch;
  local init_command;
  local depth=;

  # Branch selection
  if [ "${release}" = 'master' ]; then
    branch="${release}";
  elif [[ "${release}" == *'-preview-'* ]]; then
    branch="android-${release}";
  else
    branch="android-7.1.2_r${release}";
  fi;

  # Repo shallow
  if [[ "${params}" == *'shallow'* ]]; then
    depth='--depth 1';
  fi;

  # Repo init command
  if [[ "${params}" == *'referenced'* ]]; then
    init_command="repo init -u http://android.googlesource.com/platform/manifest -b ${branch} ${depth} --reference=$(readlink -f "$(getand)/AOSP")";
  else
    init_command="repo init -u http://android.googlesource.com/platform/manifest -b ${branch} ${depth}";
  fi;

  # Output example command
  if [[ "${params}" == *'example'* ]]; then
    echo '';
    echo "${init_command}";
    echo '';
    return;
  fi;

  # Prepare synced objects for migrations
  if [[ ! "${params}" == *'clean'* ]] && [[ ! "${params}" == *'shallow'* ]]; then
    ${init_command};
    reposy;
  fi;

  # Clean repo manifest
  rm -rfv .repo/manifests;
  rm -rfv .repo/manifests.git;
  rm -rfv .repo/manifest.xml;
  rm -rfv .repo/project.list;
  rm -rfv .repo/projects;
  rm -rfv .repo/repo;
  if [[ "${params}" == *'clean'* ]]; then
    rm -rfv .repo/project-objects;
    rm -rfv ./*;
  fi;
  rm -rfv prebuilts/qemu-kernel;
  rm -rfv .repo/projects/prebuilts/qemu-kernel.git;
  rm -rfv .repo/project-objects/prebuilts/qemu-kernel.git;

  # Launch init command
  ${init_command};

  # Exit on repo init failure
  if [ ! -d .repo/manifests ]; then
    echo "repoinitaosp failed for ${branch}";
    return;
  fi;

  # Unneeded branches cleanup
  cd .repo/manifests/;
  git tag | grep -v "${branch}" | xargs git tag -d > /dev/null;
  echo "repoinitaosp done for ${branch}";
  echo '';
  cd ../../;
}

# === Repo Init LineageOS ===
function repoinitlineage()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: repoinitlineage <13.0/14.1> [referenced,clean,shallow,example] (repo init for LineageOS)';
    echo '';
    return;
  fi;

  # Variables
  local release=${1};
  local params=${2};
  local branch=cm-${release};
  local init_command;
  local depth=;

  # Repo shallow
  if [[ "${params}" == *'shallow'* ]]; then
    depth='--depth 1';
  fi;

  # Repo init command
  if [[ "${params}" == *'referenced'* ]]; then
    init_command="repo init -u http://github.com/LineageOS/android.git -b ${branch} ${depth} --reference=$(readlink -f "$(getand)/LineageOS")";
  else
    init_command="repo init -u http://github.com/LineageOS/android.git -b ${branch} ${depth}";
  fi;

  # Output example command
  if [[ "${params}" == *'example'* ]]; then
    echo '';
    echo "${init_command}";
    echo '';
    return;
  fi;

  # Prepare synced objects for migrations
  if [[ ! "${params}" == *'clean'* ]] && [[ ! "${params}" == *'shallow'* ]]; then
    ${init_command};
    reposy;
  fi;

  # Clean repo manifest
  rm -rfv .repo/manifests;
  rm -rfv .repo/manifests.git;
  rm -rfv .repo/manifest.xml;
  rm -rfv .repo/project.list;
  rm -rfv .repo/projects;
  rm -rfv .repo/repo;
  if [[ "${params}" == *'clean'* ]]; then
    rm -rfv .repo/project-objects;
    rm -rfv ./*;
  fi;
  rm -rfv prebuilts/qemu-kernel;
  rm -rfv .repo/projects/prebuilts/qemu-kernel.git;
  rm -rfv .repo/project-objects/prebuilts/qemu-kernel.git;

  # Launch init command
  ${init_command};

  # Exit on repo init failure
  if [ ! -d .repo/manifests ]; then
    echo "repoinitlineage failed for ${branch}";
    return;
  fi;

  # Unneeded branches cleanup
  cd .repo/manifests/;
  git tag | grep -v "${branch}" | xargs git tag -d > /dev/null;
  echo "repoinitlineage done for ${branch}";
  echo '';
  cd ../../;
}

# === Repo Init AOSP Devices ===
function repoinitaospall()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: repoinitaospall <android-7.1.2_r{XX}> [clean] (repo init for referenced AOSP)';
    echo '';
    return;
  fi;

  # Variables
  local repocommon;

  # Update common repo
  cdaosp;
  repocommon=$(pwd);
  repoinitaosp "${1}" "${2}";
  reposy;

  # Walk through devices
  for device in ${ANDROID_DEVELOPMENT_SHELL_TOOLS_REFERENCED_AOSP}; do

    # Verify and update device repo
    cdaosp "${device}";
    if [ ! "$(pwd)" = "${repocommon}" ]; then
      repoinitaosp "${1}" "referenced,${2}";
      reposy;
    fi;

  done;
}

# === Repo Init AOSP Devices ===
function repoinitlineageall()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: repoinitlineageall <13.0/14.1> [clean] (repo init for referenced LineageOS)';
    echo '';
    return;
  fi;

  # Variables
  local repocommon;

  # Update common repo
  cdlineage;
  repocommon=$(pwd);
  repoinitlineage "${1}" "${2}";
  reposy;

  # Walk through devices
  for device in ${ANDROID_DEVELOPMENT_SHELL_TOOLS_REFERENCED_LINEAGE}; do

    # Verify and update device repo
    cdlineage "${device}";
    if [ ! "$(pwd)" = "${repocommon}" ]; then
      repoinitlineage "${1}" "referenced,${2}";
      reposy;
    fi;

  done;
}

# === Repo Init ResurrectionRemix ===
function repoinitrr()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: repoinitrr <nougat> [referenced,clean,shallow] (repo init for ResurrectionRemix)';
    echo '';
    return;
  fi;

  # Variables
  local release=${1};
  local params=${2};
  local branch=${release};
  local depth=;

  # Repo shallow
  if [[ "${params}" == *'shallow'* ]]; then
    depth='--depth 1';
  fi;

  # Prepare synced objects for migrations
  if [[ ! "${params}" == *'clean'* ]] && [[ ! "${params}" == *'shallow'* ]]; then
    reposy;
  fi;

  # Clean repo manifest
  rm -rfv .repo/manifests;
  rm -rfv .repo/manifests.git;
  rm -rfv .repo/manifest.xml;
  rm -rfv .repo/project.list;
  rm -rfv .repo/projects;
  rm -rfv .repo/repo;
  if [[ "${params}" == *'clean'* ]]; then
    rm -rfv .repo/project-objects;
    rm -rfv ./*;
  fi;

  # Repo init
  if [[ "${params}" == *'referenced'* ]]; then
    repo init -u http://github.com/ResurrectionRemix/platform_manifest.git \
              -b "${branch}" \
              "${depth}" \
              --reference="$(readlink -f "$(getand)/LineageOS")";
  else
    repo init -u http://github.com/ResurrectionRemix/platform_manifest.git \
              -b "${branch}" \
              "${depth}";
  fi;

  # Exit on repo init failure
  if [ ! -d .repo/manifests ]; then
    echo "repoinitrr failed for ${branch}";
    return;
  fi;

  # Unneeded branches cleanup
  cd .repo/manifests/;
  git tag | grep -v "${branch}" | xargs git tag -d;
  echo "repoinitrr done for ${branch}";
  cd ../../;
}

# === Repo Init TWRP ===
function repoinittwrp()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: repoinittwrp <twrp-{X.X}> [referenced,clean,shallow] (repo init for TWRP)';
    echo '';
    return;
  fi;

  # Variables
  local release=${1};
  local params=${2};
  local branch=twrp-${release};
  local depth=;

  # Repo shallow
  if [[ "${params}" == *'shallow'* ]]; then
    depth='--depth 1';
  fi;

  # Wipe the out folder
  rm -rfv out;

  # Clean repo manifest
  rm -rfv .repo/manifests;
  rm -rfv .repo/manifests.git;
  rm -rfv .repo/manifest.xml;
  rm -rfv .repo/project.list;
  rm -rfv .repo/projects;
  rm -rfv .repo/repo;
  if [[ "${params}" == *'clean'* ]]; then
    rm -rfv .repo/project-objects;
    rm -rfv ./*;
  fi;

  # Repo init
  if [[ "${params}" == *'referenced'* ]]; then
    repo init -u https://github.com/minimal-manifest-twrp/platform_manifest_twrp_omni.git \
              -b "${branch}" \
              "${depth}" \
              --reference="$(readlink -f "$(getand)/TWRP")";
  else
    repo init -u https://github.com/minimal-manifest-twrp/platform_manifest_twrp_omni.git \
              -b "${branch}" \
              "${depth}";
  fi;

  # Exit on repo init failure
  if [ ! -d .repo/manifests ]; then
    echo "repoinittwrp failed for ${branch}";
    return;
  fi;

  # Unneeded branches cleanup
  cd .repo/manifests/;
  git tag | grep -v "${branch}" | xargs git tag -d;
  echo "repoinittwrp done for ${branch}";
  cd ../../;
}

# === Repo Init Menu ===
function repoinit()
{
  # Usage: repoinit (repo init menu)

  # Variables
  local branch;
  local cnt=0;
  local key;
  local line_function;
  local line_usage;
  local list_functions=('');
  local options;

  # Display exit item
  echo '';
  echo -e "  \e[1;33m0: \e[1;37mKeep current repo \e[1;32m[Exit the configuration]\e[0m";

  # Display shtools* menu
  for line_function in $(typeset -F | grep ' repoinit' | cut -d' ' -f 3 | grep -v '^repoinit$' | grep -v 'all$'); do

    # Parse usage
    line_usage=$(grep -a "Usage: ${line_function} " "${ANDROID_DEVELOPMENT_SHELL_TOOLS_SOURCES[@]}");
    if [ -z "${line_usage}" ]; then
      continue;
    fi;
    line_usage=${line_usage#*\(};
    line_usage=${line_usage%\)*};
    list_functions+=("${line_function}");

    # Item choice
    cnt=$((cnt + 1));
    echo -e "  \e[1;33m${cnt}: \e[1;37m${line_function} \e[1;32m[${line_usage}]\e[0m";

  done;
  echo '';

  # Request user input
  echo -en " \e[1;37m> Command to run [0-${cnt}] :\e[0m ";
  read -r key;

  # Abort on exit
  if [ -z "${key}" ] || [ "${key}" -eq 0 ]; then
    echo '';
    return;
  fi;

  # Show repo init usage
  echo -en "\e[1;33m";
  ${list_functions[${key}]};
  echo -en "\e[0m";

  # Request branch input
  echo -en " \e[1;37m> Branch to track :\e[0m ";
  read -r branch;

  # Request options input
  echo -en " \e[1;37m> Options to use :\e[0m ";
  read -r options;

  # Show repo init command
  echo '';
  echo -e " \e[1;33m> Launching:\e[0m ${list_functions[${key}]} ${branch} ${options}";
  echo '';

  # Launch repo init command
  ${list_functions[${key}]} "${branch}" "${options}";
}
