#!/bin/bash
# ======================================
#   Developed by Adrian DC - 2015-2017
# ======================================

# === Repo Init AOSP ===
function repoinitaosp()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: repoinitaosp <android-7.1.2_r{XX}> [referenced,clean,shallow,noprepare,example]';
    echo '';
    return;
  fi;

  # Variables
  local release="${1}";
  local params="${2}";
  local branch="android-7.1.2_r${release}";
  local init_command;
  local depth=;

  # Repo shallow
  if [[ "${params}" =~ 'shallow' ]]; then
    depth='--depth 1';
  fi;

  # Repo init command
  if [[ "${params}" =~ 'referenced' ]]; then
    init_command="repo init -u http://android.googlesource.com/platform/manifest -b ${branch} ${depth} --reference=$(readlink -f $(getand)/AOSP)";
  else
    init_command="repo init -u http://android.googlesource.com/platform/manifest -b ${branch} ${depth}";
  fi;

  # Output example command
  if [[ "${params}" =~ 'example' ]]; then
    echo '';
    echo "${init_command}";
    echo '';
    return;
  fi;

  # Prepare synced objects for migrations
  if [[ ! "${params}" =~ 'noprepare' ]] && [[ ! "${params}" =~ 'clean' ]]; then
    ${init_command};
    reposy;
  fi;

  # Clean repo manifest
  rm -rfv .repo/manifests;
  rm -rfv .repo/manifests.git;
  rm -rfv .repo/manifest.xml;
  rm -rfv .repo/project.list;
  rm -rfv .repo/projects;
  rm -rfv .repo/repo;
  if [[ "${params}" =~ 'clean' ]]; then
    rm -rfv .repo/project-objects;
    rm -rfv *;
  fi;
  rm -rfv prebuilts/qemu-kernel;
  rm -rfv .repo/projects/prebuilts/qemu-kernel.git;
  rm -rfv .repo/project-objects/prebuilts/qemu-kernel.git;

  # Launch init command
  ${init_command};

  # Exit on repo init failure
  if [ ! -d .repo/manifests ]; then
    echo "repoinitaosp failed for ${branch}";
    return;
  fi;

  # Unneeded branches cleanup
  cd .repo/manifests/;
  git tag | grep -v ${branch} | xargs git tag -d > /dev/null;
  echo "repoinitaosp done for ${branch}";
  echo '';
  cd ../../;
}

# === Repo Init LineageOS ===
function repoinitlineage()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: repoinitlineage <13.0/14.1> [referenced,clean,shallow,noprepare,example]';
    echo '';
    return;
  fi;

  # Variables
  local release="${1}";
  local params="${2}";
  local branch="cm-${release}";
  local init_command;
  local depth=;

  # Repo shallow
  if [[ "${params}" =~ 'shallow' ]]; then
    depth='--depth 1';
  fi;

  # Repo init command
  if [[ "${params}" =~ 'referenced' ]]; then
    init_command="repo init -u http://github.com/LineageOS/android.git -b ${branch} ${depth} --reference=$(readlink -f $(getand)/LineageOS)";
  else
    init_command="repo init -u http://github.com/LineageOS/android.git -b ${branch} ${depth}";
  fi;

  # Output example command
  if [[ "${params}" =~ 'example' ]]; then
    echo '';
    echo "${init_command}";
    echo '';
    return;
  fi;

  # Prepare synced objects for migrations
  if [[ ! "${params}" =~ 'noprepare' ]] && [[ ! "${params}" =~ 'clean' ]]; then
    ${init_command};
    reposy;
  fi;

  # Clean repo manifest
  rm -rfv .repo/manifests;
  rm -rfv .repo/manifests.git;
  rm -rfv .repo/manifest.xml;
  rm -rfv .repo/project.list;
  rm -rfv .repo/projects;
  rm -rfv .repo/repo;
  if [[ "${params}" =~ 'clean' ]]; then
    rm -rfv .repo/project-objects;
    rm -rfv *;
  fi;
  rm -rfv prebuilts/qemu-kernel;
  rm -rfv .repo/projects/prebuilts/qemu-kernel.git;
  rm -rfv .repo/project-objects/prebuilts/qemu-kernel.git;

  # Launch init command
  ${init_command};

  # Exit on repo init failure
  if [ ! -d .repo/manifests ]; then
    echo "repoinitlineage failed for ${branch}";
    return;
  fi;

  # Unneeded branches cleanup
  cd .repo/manifests/;
  git tag | grep -v "${branch}" | xargs git tag -d > /dev/null;
  echo "repoinitlineage done for ${branch}";
  echo '';
  cd ../../;
}

# === Repo Init AOSP Devices ===
function repoinitaospall()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: repoinitaospall <android-7.1.2_r{XX}> [clean]';
    echo '';
    return;
  fi;

  # Variables
  local repocommon;

  # Update common repo
  cdaosp;
  repocommon=$(pwd);
  repoinitaosp ${1} ${2};
  reposy;

  # Walk through devices
  for device in ${android_development_shell_tools_referenced_aosp}; do

    # Verify and update device repo
    cdaosp ${device};
    if [ ! "$(pwd)" = "${repocommon}" ]; then
      repoinitaosp ${1} referenced,${2};
      reposy;
    fi;

  done;
}

# === Repo Init AOSP Devices ===
function repoinitlineageall()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: repoinitlineageall <13.0/14.1> [clean]';
    echo '';
    return;
  fi;

  # Variables
  local repocommon;

  # Update common repo
  cdlineage;
  repocommon=$(pwd);
  repoinitlineage ${1} ${2};
  reposy;

  # Walk through devices
  for device in ${android_development_shell_tools_referenced_lineage}; do

    # Verify and update device repo
    cdlineage ${device};
    if [ ! "$(pwd)" = "${repocommon}" ]; then
      repoinitlineage ${1} referenced,${2};
      reposy;
    fi;

  done;
}

# === Repo Init ResurrectionRemix ===
function repoinitrr()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: repoinitrr <nougat> [referenced,clean,shallow,noprepare]';
    echo '';
    return;
  fi;

  # Variables
  local release="${1}";
  local params="${2}";
  local branch="${release}";
  local depth=;

  # Repo shallow
  if [[ "${params}" =~ 'shallow' ]]; then
    depth='--depth 1';
  fi;

  # Prepare synced objects for migrations
  if [[ ! "${params}" =~ 'noprepare' ]] && [[ ! "${params}" =~ 'clean' ]]; then
    ${init_command};
    reposy;
  fi;

  # Clean repo manifest
  rm -rfv .repo/manifests;
  rm -rfv .repo/manifests.git;
  rm -rfv .repo/manifest.xml;
  rm -rfv .repo/project.list;
  rm -rfv .repo/projects;
  rm -rfv .repo/repo;
  if [[ "${params}" =~ 'clean' ]]; then
    rm -rfv .repo/project-objects;
    rm -rfv *;
  fi;

  # Repo init
  if [[ "${params}" =~ 'referenced' ]]; then
    repo init -u http://github.com/ResurrectionRemix/platform_manifest.git \
              -b ${branch} \
              ${depth} \
              --reference=$(readlink -f $(getand)/LineageOS);
  else
    repo init -u http://github.com/ResurrectionRemix/platform_manifest.git \
              -b ${branch} \
              ${depth};
  fi;

  # Exit on repo init failure
  if [ ! -d .repo/manifests ]; then
    echo "repoinitrr failed for ${branch}";
    return;
  fi;

  # Unneeded branches cleanup
  cd .repo/manifests/;
  git tag | grep -v "${branch}" | xargs git tag -d;
  echo "repoinitrr done for ${branch}";
  cd ../../;
}

# === Repo Init TWRP ===
function repoinittwrp()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: repoinittwrp <twrp-{X.X}> [referenced,clean,shallow]';
    echo '';
    return;
  fi;

  # Variables
  local release="${1}";
  local params="${2}";
  local branch="twrp-${release}";
  local depth=;

  # Repo shallow
  if [[ "${params}" =~ 'shallow' ]]; then
    depth='--depth 1';
  fi;

  # Wipe the out folder
  rm -rfv out;

  # Clean repo manifest
  rm -rfv .repo/manifests;
  rm -rfv .repo/manifests.git;
  rm -rfv .repo/manifest.xml;
  rm -rfv .repo/project.list;
  rm -rfv .repo/projects;
  rm -rfv .repo/repo;
  if [[ "${params}" =~ 'clean' ]]; then
    rm -rfv .repo/project-objects;
    rm -rfv *;
  fi;

  # Repo init
  if [[ "${params}" =~ 'referenced' ]]; then
    repo init -u https://github.com/minimal-manifest-twrp/platform_manifest_twrp_omni.git \
              -b ${branch} \
              ${depth} \
              --reference=$(readlink -f $(getand)/TWRP);
  else
    repo init -u https://github.com/minimal-manifest-twrp/platform_manifest_twrp_omni.git \
              -b ${branch} \
              ${depth};
  fi;

  # Exit on repo init failure
  if [ ! -d .repo/manifests ]; then
    echo "repoinittwrp failed for ${branch}";
    return;
  fi;

  # Unneeded branches cleanup
  cd .repo/manifests/;
  git tag | grep -v "${branch}" | xargs git tag -d;
  echo "repoinittwrp done for ${branch}";
  cd ../../;
}
