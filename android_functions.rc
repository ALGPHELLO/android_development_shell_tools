#!/bin/bash
# ======================================
#   Developed by Adrian DC - 2015-2016
# ======================================

# === Repo shortcuts ===
function reposypb()
{
  repo forall -c 'echo "Syncing project ${REPO_PROJECT}"; \
                  while true; do \
                    timeout 15 repo sync -j1 --current-branch --detach -f --force-broken --force-sync -c --no-clone-bundle --no-tags .; \
                    if [ $? -eq 0 ]; then \
                      echo "";
                      echo " Project ${REPO_PROJECT} : Fallback to old branch"; \
                      git fetch --quiet ${REPO_REMOTE} cm-13.0; \
                      git reset --hard FETCH_HEAD; \
                      break;
                    fi; \
                  done;';
}
function reposyp()
{
  repo forall -c 'echo "Syncing project ${REPO_PROJECT}"; \
                  while true; do \
                    timeout 15 repo sync -j1 --current-branch --detach -f --force-broken --force-sync -c --no-clone-bundle --no-tags .; \
                    if [ $? -eq 0 ]; then break; fi; \
                  done;';
}
alias repolx='nano .repo/local_manifests/updates.sh; .repo/local_manifests/updates.sh';
alias repop='repopick';

function reposyl()
{
  local currentdir=${PWD}; repor;
  if [ ! -z "$1" ] && [ -d "$1" ] && [ ! -z "$2" ] && [ -d "$2" ]; then
    cd "./$1";
    git fetch "$2/$1";
    reposy .;
  fi;
  cd "$currentdir";
}

function repounshallow()
{
  repo forall -c 'gitbranch=${REPO_RREV##*/}; \
    echo ""; echo "Unshallowing project ${REPO_PROJECT} [${REPO_REMOTE}/${gitbranch}]"; \
    git fetch --unshallow ${REPO_REMOTE};';
}
function repothis()
{
  export currentdir=${PWD};
  repo forall -c ' \
    if [ "$currentdir" = "$(pwd)" ]; then \
      echo " Current project: ${REPO_PROJECT} [${REPO_REMOTE}/${REPO_RREV##*/}]"; \
    fi;';
}

function repoupdate()
{
  repo --version;
  echo "";
  if [ ! -d ~/bin ]; then mkdir ~/bin; fi;
  curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo;
  chmod a+x ~/bin/repo;
  echo "";
  repo --version;
}
function .repoupdate()
{
  cd .repo/repo/;
  git log --pretty=oneline -10;
  echo "";
  git fetch origin stable;
  git reset --hard origin/stable;
  echo "";
  git branch -vv;
  echo "";
  git log --pretty=oneline -10;
  cd ../../;
}

# === Android builds ===
function makesep()
{
  cwd=$(pwd);
  repor;
  export USE_NINJA=false;
  if [ -d ./system/sepolicy ]; then
    mmm -B -j$(grep -c ^processor /proc/cpuinfo) ./system/sepolicy/ | tee $LogFile;
  else
    mmm -B -j$(grep -c ^processor /proc/cpuinfo) ./external/sepolicy/ | tee $LogFile;
  fi;
  export USE_NINJA=;
  cd $cwd;
}
function mmmall() { mmm $1 $(find -maxdepth 3 -name 'Android.mk' -printf '%h\n' | grep -v 'test' | uniq -u | sort -u); }

# === Repo mmm Lister ===
function mmml()
{
  logfile=${ANDROID_DEV_DRIVE}/Scripts/script_logs.txt;
  rm -f $logfile;
  mmm -B $@ | tee $logfile;
  InstallLog=$(grep -a "target/product/.*/system" $logfile | sort | uniq);
  for FilePath in ${InstallLog[*]}; do
    if [[ "$FilePath" =~ "/system" && ! "$FilePath" =~ "/NOTICE_FILES" ]]; then
      FilePath=$(printf "$FilePath" | tail -1 \
               | sed "s/\x1B\[[0-9;]*[JKmsu]//g" \
               | sed "s/.*\/\([^\[]*.zip\).*/\1/g");
      if [ -f "$FilePath" ]; then
        printf " \e[1;36m$FilePath\e[0m";
      fi;
    fi;
  done;
  echo "";
  echo "";
}

# === ADB Commit Pusher
function adbpc()
{
  tmpfile=$(mktemp);
  git show --oneline --name-status | tail -n +2 > $tmpfile;
  adbr;
  while read line; do
    mode=$(echo $line | cut -c 1);
    file=$(echo $line | cut -c 3-);
    case $mode in
      A|M)
        adbpf $file;;
      D)
        if [[ "$file" =~ "proprietary" ]]; then
          file=$(printf "$file" | sed "s/.*proprietary\(.*\)/\/system\1/g");
        else
          file=$(printf "$file" | sed "s/.*\(system.*\)/\/\1/g");
        fi;
        echo -e " \e[1;36mDeleting $file...\e[0m";
        printf "   ";
        adb shell rm $file;
        echo "";;
      *);;
   esac;
  done < $tmpfile;
  rm $tmpfile;
}

# === Research shortcuts ===
function highlight() { perl -pe "s/$1/\e[1;0;31m$&\e[0m/ig"; }

# === Updates Helpers ===
function twrpbluekernel()
{
  local cwd=$(pwd);
  cdtwrp;
  repor;

  local devicetree=$(totwrp)/device/sony/hayabusa;
  cp -v $(tocm13)/out/target/product/hayabusa/kernel $devicetree/prebuilts/kernel;
  cd $devicetree;
  git reset;
  git add -Av;
  cd ../../../;
  echo "";

  local devicetree=$(totwrp)/device/sony/mint;
  cp -v $(tocm13)/out/target/product/mint/kernel $devicetree/prebuilts/kernel;
  cd $devicetree;
  git reset;
  git add -Av;
  cd ../../../;
  echo "";

  local devicetree=$(totwrp)/device/sony/tsubasa;
  cp -v $(tocm13)/out/target/product/tsubasa/kernel $devicetree/prebuilts/kernel;
  cd $devicetree;
  git reset;
  git add -Av;
  cd ../../../;
  echo "";

  cd $cwd;
}

# === Kernel Helpers ===
function meldtwo()
{
  read -e var1;
  if [ ! -z "$var1" ]; then var2=$var1; fi;
  meld $1/$var2 $2/$var2;
}

function rmempty()
{
  find . -depth -empty -not -name \*.nomedia -print;
  printf "  \e[1;31mDelete empty files and folders (y/N) ?\e[0m ";
  read key;
  if [[ "$key" == "y" || "$key" == "Y" ]]; then
    find . -depth -empty -not -name \*.nomedia -delete;
  fi;
}

# === Kill and Log Debug ===
function adblk()
{
  printf "Process name : ";
  if [ ! -z "$1" ]; then
    name="$1"; echo "";
  else
    read name;
  fi;
  echo -e \\033c; clear;
  adbs ps | grep -i $name;
  adb logcat -c;
  adb shell pkill -f $name;
  adbs ps | grep -i $name;
  printf "" >adb.log;
  adb logcat | tee -a adb.log;
}

# === WIP shortcuts ===
function meldk() { printf " Subpath : "; read a; meld ./$a $1/$a; }
alias permme='UserName="$(whoami)"; sudo chown -cRv $UserName:$UserName ./';
function dupl() { cat $1 | sort | uniq -cd; }

function meldt() { meld $1 ../msm8960t/$1; }
function adbkillsetup() { adb root; adb wait-for-device; while [ 1 ]; do adb shell kill $(adb shell ps | grep setup | awk '{ print $2 }'); done; }
function adbtinymix() { adb shell /system/bin/tinymix; }

# === Apps shortcuts ===
function adbu() { echo ""; echo " [ Launching '$1' ]"; echo ""; \
                  echo "    Optimizing..."; adb $2 shell pm force-dex-opt $1; \
                  echo "    Killing..."; adb $2 shell pkill $1; echo ""; }
function ntf() { notify-send "$*"; }

# === Git vars ===
gituserdefault='AdrianDC';
gitremotedefault='AdrianDC';
gitreviewdefault='github';

# === Git pushing ===
function gitpu()
{
  remote=${1:-$gitremotedefault};
  if [ ! -z "$2" ]; then
    branch=$2;
  else
    branch=$(repogetbranch);
  fi;
  echo "";
  command="git push -f $remote HEAD:refs/heads/$branch";
  printf "  $command [Enter] ? "; read key;
  echo "";
  git fetch $remote $branch;
  $command;
  echo "";
}
alias gitpa='gitpu $gitremotedefault';
alias gitpa14='gitpu $gitremotedefault cm-14.1';
alias gitpa6='gitpu $gitremotedefault aosp-6.0';
alias gitpaa6='gitpu $gitremotedefault android-6.0';
alias gitpala='gitpu $gitremotedefault LA.UM.5.5_rb1.10';
alias gitpam='gitpu $gitremotedefault multirom';
alias gitpama='gitpu $gitremotedefault master';
alias gitpamm='gitpu $gitremotedefault marshmallow';
alias gitpan='gitpu $gitremotedefault nougat';
alias gitpat='gitpu $gitremotedefault twrp';
alias gitpp='gitpu project master';
alias gitpx='gitpu xperia';
alias gitpb='gitpu backup';
alias gitpaicp='gitpu aicp mm6.0';
alias gitpold='gitpu old';

function gitpo() { command="git push origin ${1:-$(repogetbranch)}"; \
                   echo ""; printf " \e[1;31mTarget: \e[0m";
                   git remote -v | grep origin | head -1 | cut -f2 | cut -d' ' -f1;
                   echo -e " \e[1;37mCommand: $command\e[0m"; printf "    > Proceed with origin push (y/N) ? "; read key; \
                   if [[ "$key" == "y" || "$key" == "Y" ]]; then echo ""; $command; fi; echo ""; }

# === Git rebasing ===
function gitrb()  { branch=${1:-$(repogetbranch)}; git fetch github $branch; git rebase github/$branch; }
function gitrbo() { branch=${1:-$(repogetbranch)}; git fetch origin $branch; git rebase origin/$branch; }
function gitrbs() { branch=${1:-$(repogetbranch)}; git fetch source $branch; git rebase source/$branch; }
function gitrbm() { branch=${1:-LA.AF.1.2.1_rb1.6}; git fetch mifl $branch; git rebase mifl/$branch; }
function gitrbad() { branch=${1:-$(repogetbranch)}; git fetch AdrianDC $branch; git rebase AdrianDC/$branch; }
function gitrbma() { branch=${1:-cm-13.0}; git fetch ADC $branch; git rebase ADC/$branch; }

# === Git branch ===
function gitbc() { branch=${1:-$(repogetbranch)}; review=${2:-${gitreviewdefault}};
                   git fetch $review $branch; git branch $branch --track $review/$branch; git checkout $branch; }
function gitbt() { branch=${1:-$(repogetbranch)}; git branch $branch; git checkout $branch; }
alias gitbaclean='git fetch $gitremotedefault; git branch -r | grep $gitremotedefault | sed "s/$gitremotedefault\/\(.*\)/\1/g" | xargs -L 1 git push $gitremotedefault --delete';

alias g='gedit';
function gitcpl() { while [ 1 ]; do echo ""; printf " Commit : "; read commit; gitcp $commit; done; echo ""; }
function gitcpa() { a="$1"; b="$2"; if [ -z "$b" ] && [ -z "${a##*[!0-9]*}" ]; then b="$a"; a=""; fi;
                    git fetch $gitremotedefault ${b:-$(repogetbranch)}; git cherry-pick FETCH_HEAD~${a:-0}; }
function gitcpal()
{
  # Usage
  if [ -z "${2}" ]; then
    echo "usage: gitcpal branch commitcount";
    return;
  fi;

  # Cherrypick multiple commits
  git cherry-pick --abort;
  git fetch ${gitremotedefault} ${1:-$(repogetbranch)};
  git cherry-pick ${2}^..FETCH_HEAD;
}
function gitcpd()
{
  if [ -z "$3" ]; then
    echo " Usage: gitcpd from_folder to_folder commit_sha1";
    return;
  fi;

  git cherry-pick $3;
  for file in $(git diff-tree --no-commit-id --name-only -r $3); do
    file_target=$(echo $file | sed "s/$1/$2/");
    cp -v $file $file_target;
    git add -v $file_target;
  done;
}
alias gitclone="git clone --single-branch -b cm-13.0";
function gitclonedevice()
{
  if [ -z "$1" ]; then
    echo " Usage: gitclonedevice brand_codename";
  else
    gitclone https://github.com/CyanogenMod/android_device_$1;
  fi;
}
function gitcpaicp()
{
  git fetch aicp mm6.0;
  git reset --hard aicp/mm6.0;
  git fetch origin cm-13.0;
  echo "";
  echo -e "  \e[1;34m\e[4;34mBranch : origin/cm-13.0\e[0m";
  git log --pretty=oneline -n 6 origin/cm-13.0;
  echo "";
  echo -e "  \e[1;34m\e[4;34mBranch : aicp/mm6.0\e[0m";
  git log --pretty=oneline -n 6 aicp/mm6.0;
  echo "";
  printf "  \e[1;34m\e[4;34mNumber of commits :\e[0m ";
  read cnt;
  git cherry-pick FETCH_HEAD~$cnt..FETCH_HEAD;
  echo "";
  printf "  \e[1;34m\e[4;34mPress Enter to diff with origin/cm-13.0 :\e[0m ";
  read key;
  git diff HEAD origin/cm-13.0;
  echo "";
  headsha1=$(git log --max-count=1 --format=format:%H -- .);
  for i in `seq $(($cnt-1)) -1 0`; do
    echo -e " \e[1;34m\e[4;34m===[ $headsha1~$i ]===\e[0m";
    echo '';
    git reset --hard $headsha1~$i;
    git show HEAD;
    gitstat aicp mm6.0;
    gitpushreview http://gerrit.aicp-rom.com AICP for mm6.0;
    gitpushreview http://gerrit.aicp-rom.com AICP heads mm6.0;
    echo "";
  done;
}

# === GitHub Url Cherry-Pick ===
function gitcpu()
{
  if [ -z "$1" ]; then
    echo " Usage: gitcpu githuburltocommit [branch]";
    return;
  fi;

  link="$1";
  project="$(echo "$link" \
           | sed 's/.*\(github.com\/.*\)\/commit\/.*/http:\/\/\1/')";
  commit="$(echo "$link" \
          | sed 's/.*\/commit\/\(.*\)/\1/')";

  if [ ! -z "$2" ]; then
    branch="$2";
  else
    branch="cm-14.1";
  fi;

  if [ -z "$project" ] || [ -z "$commit" ]; then
    echo " Error: Not a GitHub commit url '$link'";
    return;
  fi;

  git fetch $project $branch;
  echo "";
  git show $commit --oneline --stat;
  echo "";
  git cherry-pick $commit;
}

# === GitHub Url Apply Test ===
function gitcpupt()
{
  if [ ! -z "$2" ] && [ ! -z "$3" ]; then
    echo "$2";
    curl $1.patch \
        | sed "s/$2/$3/" \
        | git apply -v --index;
  elif [ ! -z "$1" ]; then
    curl $1.patch \
        | git apply -v --index;
  else
    git am --continue;
  fi;
}

# === Git mergers ===
function gitmerges()
{
  if [ ! -z "$2" ]; then cnt=$2; else cnt=30; fi;
  echo "";
  echo -e " \e[1;37mSearching mergeable commits in $1 tree...\e[0m";
  echo "";
  git rev-list $1 --reverse --pretty=oneline -- . \
    | tail -n $cnt \
    | while read line;
  do
    sha1=$(echo $line | cut -c -40);
    title=$(echo $line | cut -c 42-);
    if [ -z "$(git rev-list HEAD --pretty=oneline -- . \
       | grep -i "$title")" ]; then
      echo -e " \e[1;31m$sha1 : \e[1;37m$title\e[0m";
      git cherry-pick $sha1;
      git reset --hard HEAD;
      echo "";
    fi;
  done;
}
