#!/bin/bash
# ======================================
#   Developed by Adrian DC - 2015-2017
# ======================================

# === ADB Root Mounter ===
function adbr()
{
  # Get root access and rw system
  timeout 5 adb ${1} 'wait-for-devices';
  timeout 5 adb ${1} root; sleep 2;
  timeout 5 adb ${1} 'wait-for-devices';
  timeout 5 adb ${1} remount; sleep 1;
  timeout 5 adb ${1} 'wait-for-devices';
}

# === ADB Root Checked Mounter ===
function adbro()
{
  # Get root access
  local rootaccess=$(adb shell whoami);
  if [ "${rootaccess:0:4}" != 'root' ] && [ "${rootaccess:16:5}" != 'uid 0' ]; then
    timeout 5 adb ${1} 'wait-for-devices';
    timeout 5 adb ${1} root; sleep 2;
    timeout 5 adb ${1} 'wait-for-devices';
  fi;

  # Get rw system
  local systemmount=$(adb shell mount | grep system);
  local systemacess=$(echo "${systemmount}" | grep rw);
  if [ ! -z "${systemmount}" ] && [ -z "${systemacess}" ]; then
    timeout 5 adb ${1} 'wait-for-devices';
    timeout 5 adb ${1} remount; sleep 1;
    timeout 5 adb ${1} 'wait-for-devices';
  fi;
}

# === ADB Sideload Helper ===
function adbside()
{
  # Initiate adb
  echo '';
  adb devices;

  # Reboot to recovery if needed
  if ! timeout 2 sh -c "adb devices | grep -q 'recovery\|sideload'" 2>/dev/null; then
    echo -e '\e[1;33madbside: Rebooting to recovery\e[0m';
    adb reboot recovery;
  fi;

  # Wait for an adb recovery
  while true; do
    if timeout .5 sh -c "adb devices | grep -q 'recovery\|sideload'" 2>/dev/null; then
      break;
    fi;
    echo -e '\e[1;33madbside: Waiting for recovery or sideload\e[0m';
    sleep 2;
  done;

  # Wait for an adb sideload
  while true; do
    if timeout .5 sh -c "adb devices | grep -q 'sideload'" 2>/dev/null; then
      break;
    fi;

    # Start twrp sideload
    echo -e '\e[1;33madbside: Waiting for sideload\e[0m';
    adb shell twrp sideload;
    sleep 2;
  done;

  # Sideload the file
  adb sideload "${1}";

  # Wait for an adb recovery if 2 parameters
  if [ ! -z "${2}" ]; then
    while true; do
      if timeout .5 sh -c "adb devices | grep -q 'recovery'" 2>/dev/null; then
        break;
      fi;
      sleep 1;
    done;

    # Reboot to Android
    echo -e '\e[1;33madbside: Rebooting to Android\e[0m';
    adb shell reboot;
  fi;
  echo '';
}

# === ADB Access Shortcuts ===
alias adbs='adb shell';
alias adbroot='adb kill-server; sudo adb start-server';
alias adbpo='adb shell reboot -p';
alias adbre='adb reboot';
function adbrh() { adb ${1} shell setprop ctl.restart zygote; }
alias adbrr='adb reboot recovery';
alias adbw='adb wait-for-device';
alias adbrb='adb reboot bootloader';
alias adbscr='mkdir -p ./screenshots; adb shell screencap /sdcard/screenshot.png; adb pull /sdcard/screenshot.png ./screenshots/screenshot-$(date +%Y%m%d-%H%M%S).png';
alias adbfotarandom='adb root; adb shell dd if=/dev/random of=/dev/block/platform/msm_sdcc.1/by-name/FOTAKernel';
alias adbfotazero='adb root; adb shell dd if=/dev/zero of=/dev/block/platform/msm_sdcc.1/by-name/FOTAKernel';
alias adbsgdisk='adb shell sgdisk --print /dev/block/mmcblk0';
alias adbinfomem='adb shell dumpsys meminfo';
alias adbblkp='adb shell ls -l /dev/block/bootdevice/by-name/';
alias adbdf='adb shell df -H';
alias adbrcbin='adb shell restorecon -R /sbin';
alias adbmountcache='adb shell mount -t ext4 /dev/block/platform/msm_sdcc.1/by-name/Cache /cache';
alias adbmountdata='adb shell mount -t ext4 /dev/block/platform/msm_sdcc.1/by-name/Userdata /data';
alias adbmountmicrosd='adb shell mkdir -p /storage/ext; adb shell mount -t ext4 /dev/block/mmcblk1p1 /storage/ext';
alias adbumountcache='adb shell umount /cache';
alias adbumountdata='adb shell umount /data';
alias adbumountmicrosd='adb shell umount /storage/ext';
alias adbmount='adbmountcache; adbmountdata; adbmountmicrosd';
alias adbumount='adbumountcache; adbumountdata; adbumountmicrosd';
alias adbemergencycalls='adb shell setprop ril.ecclist';
alias adbemergencylist='adb shell getprop ril.ecclist';

# === ADB IP Connector ===
function adbco()
{
  echo '';
  if [ ! -z "${1}" ]; then
    export ADB_IP_ADDRESS="${1}";
  fi;
  if [ -z "${ADB_IP_ADDRESS}" ]; then
    echo ' Usage: adbco [ipaddressonlyonce]';
    echo '';
    return;
  fi;
  export ADB_IP_PORT='5555';

  echo -e "\e[1;36mConnecting to ${ADB_IP_ADDRESS}:${ADB_IP_PORT}...\e[0m";
  timeout 5 adb connect ${ADB_IP_ADDRESS}:${ADB_IP_PORT};
  echo -e '\e[1;36mConnected...\e[0m';
  timeout 5 adb 'wait-for-devices';
  echo -e '\e[1;36mGetting root access...\e[0m';
  timeout 5 adb root;
  sleep 2;
  echo -e '\e[1;36mReconnecting...\e[0m';
  timeout 5 adb connect ${ADB_IP_ADDRESS}:${ADB_IP_PORT};
  echo -e '\e[1;36mConnected...\e[0m';
  timeout 5 adb 'wait-for-devices';
  echo -e '\e[1;36mMounting as root...\e[0m';
  timeout 5 adb remount;
  sleep 1;
  timeout 5 adb 'wait-for-devices';
  echo -e '\e[1;36mReady...\e[0m';
  echo '';
}

# === ADB File Editor ===
function adbedit()
{
  adbro;
  local path="${1:-/system/build.prop}";
  local name=$(basename "${path}");
  adb pull "${path}";
  gedit "${name}";
  printf ' Ok ? [ENTER] ';
  read key;
  adb push "${name}" "${path}";
  rm "${name}";
}

# === ADB Inputs Reader ===
function adbinputs()
{
  #grep . /sys/class/input/event*/device/name
  #adbs hexdump -C /dev/input/event7
  command='cat /proc/bus/input/devices';
  echo '';
  echo "adb shell ${command}";
  echo '';
  adb shell "${command}";
}

# === ADB Events Reader ===
function adbreadevents()
{
  if [ -z "${1}" ]; then
    echo '';
    echo 'usage: adbreadevents eventNUM';
    echo '';
    return;
  fi;

  adb shell od -x /dev/input/${1} \
   | awk -Wposix '{ if ($7) printf(" Key %4d - State %4d\n", "0x" $7, "0x" $8) }';
}

function adbkp()
{
  adb 'wait-for-device'; adb root; adb 'wait-for-device';
  adb shell ps | grep ${1};
  pid=$(adb shell ps | grep ${1} | awk '{ print $2 }');
  adb shell kill ${pid};
}

alias adbservices='adb shell service list';
alias adbsl='adb shell ls -l';
alias adbslz='adb shell ls -lZ';
alias adbsc='adb shell cat';
alias adbsg='adb shell getprop';
function adbsw() { adbro; adb shell "echo ${1} > ${2}"; }
alias isdone='notify-send "Process execution finished !"';
function adbgitpf()
{
  adbro;
  local tmpfile=$(mktemp);
  git diff-tree --no-commit-id --name-status -r ${1} >"${tmpfile}";
  while read line; do
    local status=$(echo "${line}" | awk '{ print $1 }');
    local file_path=$(echo "${line}" | awk '{ print $2 }');
    if [[ "${status}" =~ "D" || "${file_path}" =~ ".mk" ]]; then
      continue;
    fi;
    adbpf "${file_path}";
  done <${tmpfile};
  rm -f ${tmpfile};
}

# === ADB Shell Root ===
function adbsu()
{
  if [ -z $(adb shell type su | grep 'no found') ]; then
    adbro;
    adb shell ${@};
  else
    adb shell su -c "${@}";
  fi;
}

# === ADB Force Optimization ===
function adbu()
{
  # Introduction
  echo '';
  echo " [ Launching '${1}' ]";
  echo '';

  # Optimize
  echo '    Optimizing...';
  adb ${2} shell pm force-dex-opt ${1};

  # Force close
  echo '    Killing...';
  adb ${2} shell pkill ${1};
  local pid=$(adb shell ps | grep ${1} | awk '{ print $2 }');
  adb shell kill ${pid} >/dev/null;
  echo '';
}
