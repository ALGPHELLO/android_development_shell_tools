#!/bin/bash
#
# Copyright 2015-2017 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === File Uploader Mega.nz ===
function uploadmega()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: uploadmega <file_path> [target_folder] (File to mega.nz server uploader)';
    echo '';
    return;
  fi;

  # Ignore missing credentials
  if [ ! -f ~/.megarc ]; then
    echo '';
    echo ' megatools: ~/.megarc is missing, please read megatools documentation';
    echo '';
    return;
  fi;

  # Variables
  local path="${1}";
  local target="${2:-Development}";
  local time_start=$(date +%s);
  local time_span;

  # Load path from PackageResult
  if [ -z "${path}" ] && [ -f "${PackageResult}" ]; then
    path="${PackageResult}";
  fi;

  # File full path
  if [ -f "${path}" ]; then
    path=$(readlink -f "${path}");
  fi;

  # Detect main target inclusion
  if [[ ! "${target}" =~ '/Root/' ]]; then
    target="/Root/Android/${target}";
  fi;

  # Upload header informations
  echo '';
  echo -e " \e[1;33m[ Uploading to the server - Path '${target}' ]\e[0m";

  # Use AndroidFiles to save the file
  if [ ! -z "${ANDROID_FILES_PATH}" ] && [[ "${target}" =~ 'Root/Android' ]]; then
    androidfilesadd "${path}" "${target#/Root/Android/}";
  fi;

  # Remove local megatools cache
  rm -rf /tmp/*.megatools.cache;

  # Upload file to target
  echo '';
  megarm "${target}/$(basename ${path})" 2>/dev/null;
  megamkdir "${target}" 2>/dev/null;
  megaput --path "${target}" "${path}";

  # Reload mega.nz account
  meganzreload;

  # Show upload time
  time_span=$(($(date +%s)-${time_start}));
  echo -e " \e[1;37m[ Upload done in ${time_span} secs ]\e[0m";
  echo '';
}

# === File Downloader Mega.nz ===
function downloadmega()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: downloadmega <remote_path> [boot_remove_remote] (Download from MEGA.nz)';
    echo '';
    return;
  fi;

  # Ignore missing credentials
  if [ ! -f ~/.megarc ]; then
    echo '';
    echo ' megatools: ~/.megarc is missing, please read megatools documentation';
    echo '';
    return;
  fi;

  # Variables
  local path="${1}";
  local remove_remote="${2}";
  local file_name=$(basename "${path}");
  local time_start=$(date +%s);
  local time_span;

  # Detect main target inclusion
  if [[ ! "${path}" =~ '/Root/' ]]; then
    path="/Root/Android/${path}";
  fi;

  # Upload header informations
  echo '';
  echo -e " \e[1;33m[ Download from the server - Path '${path#/Root/Android/}' ]\e[0m";

  # Remove local megatools cache
  rm -rf /tmp/*.megatools.cache;

  # Save local file
  if [ -f "${file_name}" ]; then
    rm -f "${file_name}.tmp";
    mv "${file_name}" "${file_name}.tmp";
  fi;

  # Download file from target
  echo '';
  megaget --path ./ "${path}";

  # Delete remote file
  if [ "${remove_remote}" = 'true' ] && [ -f "${file_name}" ]; then
    megarm "${path}";
  fi;

  # Clean saved file
  if [ -f "${file_name}" ]; then
    rm -f "${file_name}.tmp";

  # Warn about failed download
  else
    echo '';
    echo -e " \e[1;31m[ Download failed ]\e[0m";
    echo '';
    return;
  fi;

  # Show download time
  echo '';
  time_span=$(($(date +%s)-${time_start}));
  echo -e " \e[1;37m[ Download done in ${time_span} secs ]\e[0m";
  echo '';
}

# === Private Uploader Mega.nz ===
function uploadprivatemega()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: uploadprivatemega <device_name> [none/zip/bootimage] (Make zip and upload)';
    echo '';
    return;
  fi;

  # File upload to Private
  fileupl "${1}" '/Root/Private';
}
