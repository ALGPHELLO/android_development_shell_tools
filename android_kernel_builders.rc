#!/bin/bash
# ======================================
#   Developed by Adrian DC - 2015-2017
# ======================================

# === Kernel Builder ===
function makekernel()
{
  # Environment
  if [ -z "${DEFCONFIG_NAME}" ] || [ ! -z "${1}" ]; then

    # Usage
    if [ -z "${1}" ] || ! ls arch/arm*/configs/*${1}*_defconfig 1> /dev/null 2>&1; then
      echo '';
      echo ' Usage: makekernel [platform_device to init]';
      echo '';
      return;
    fi;

    # Detect arm / arm64
    export ARCH=arm;
    local DEFCONFIG_CHECKS;
    for arch_check in arm arm64; do
      DEFCONFIG_CHECKS=("./arch/${arch_check}/configs/"*"${1}"*);
      if [ ${#DEFCONFIG_CHECKS[@]} -eq 1 ] && [ -f "${DEFCONFIG_CHECKS}" ]; then
        export ARCH=${arch_check};
        break;
      fi;
    done;

    # Defconfig detection
    local DEFCONFIG_PATH=./arch/${ARCH}/configs;
    local DEFCONFIG_INPUT=("${DEFCONFIG_PATH}/"*"${1}"*);
    if [ ${#DEFCONFIG_INPUT[@]} -ne 1 ] || [ ! -f "${DEFCONFIG_INPUT}" ]; then
      if [ ${#DEFCONFIG_INPUT[@]} -eq 1 ]; then
        DEFCONFIG_INPUT=();
      fi;
      echo '';
      echo '  Error: makedefconf found '${#DEFCONFIG_INPUT[@]}' defconfigs';
      echo '';
      return;
    fi;

    # Kernel defconfig
    local DEFCONFIG_NAME=$(basename "${DEFCONFIG_INPUT}");

    # Architecture environment
    local cross_compiler=;
    if [ "${ARCH}" = 'arm64' ]; then
      cross_compiler=$(readlink -f ../../../prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin);
      export CROSS_COMPILE=aarch64-linux-android-;
    else
      cross_compiler=$(readlink -f ../../../prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/bin);
      export CROSS_COMPILE=arm-linux-androideabi-;
    fi;
    if [[ ! "${PATH}" =~ "${cross_compiler}" ]]; then
      export PATH=${cross_compiler}:${PATH};
    fi;

    # Kernel configuration
    make ${DEFCONFIG_NAME};

  fi;

  # CCache usage
  local ccache_prefix='';
  if [ "$(type -t ccache 2> /dev/null)" = 'file' ]; then
    cache_prefix='ccache ';
    export CC='ccache gcc';
    export CXX='ccache g++';
    if [[ ! "${PATH}" =~ '/usr/lib/ccache' ]]; then
      export PATH=/usr/lib/ccache:${PATH}
    fi;
    echo ' CCache enabled';
  fi;

  # Kernel build
  ${cache_prefix}make -j$(grep -c ^processor /proc/cpuinfo);
}

# === Sony Copyleft Kernel Builder ===
function mkcopyleft()
{
  # Environment
  if [ -z "${KBUILD_DIFFCONFIG}" ] || [ ! -z "${1}" ]; then

    # Usage
    if [ -z "${1}" ] || ! ls arch/arm*/configs/diffconfig/${1}_diffconfig 1> /dev/null 2>&1; then
      echo '';
      echo ' Usage: mkcopyleft [device_name_to_init]';
      echo '';
      return;
    fi;

    # Environment
    export ARCH=arm64;
    export CROSS_COMPILE=aarch64-linux-android-;
    export KBUILD_DIFFCONFIG=${1}_diffconfig;

    # Kernel configuration
    make msm-perf_defconfig;

  fi;

  # Environment
  local cross_compiler=$(readlink -f ../../../prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin);
  if [[ ! "${PATH}" =~ "${cross_compiler}" ]]; then
    export PATH=${cross_compiler}:${PATH};
  fi;

  # CCache usage
  local ccache_prefix='';
  if [ "$(type -t ccache 2> /dev/null)" = 'file' ]; then
    cache_prefix='ccache ';
    export CC='ccache gcc';
    export CXX='ccache g++';
    if [[ ! "${PATH}" =~ '/usr/lib/ccache' ]]; then
      export PATH=/usr/lib/ccache:${PATH}
    fi;
    echo ' CCache enabled';
  fi;

  # Kernel build
  ${cache_prefix} make -j$(grep -c ^processor /proc/cpuinfo);
}
