#!/bin/bash
# ======================================
#   Developed by Adrian DC - 2015-2017
# ======================================

# === GitHub Url Cherry-Pick ===
function gitcpu()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: gitcpu <githuburltocommit> [branch]';
    echo '';
    return;
  fi;

  # Variables
  local link="${1}";
  local project=$(echo "${link}" \
                | sed 's/.*\(github.com\/.*\)\/commit\/.*/http:\/\/\1/');
  local commit=$(echo "${link}" \
               | sed 's/.*\/commit\/\(.*\)/\1/');
  local branch=${2:-cm-14.1};

  # Input verification
  if [ -z "${project}" ] || [ -z "${commit}" ]; then
    echo '';
    echo " Error: Not a GitHub commit url '${link}'";
    echo '';
    return;
  fi;

  # Fetch and pick
  git fetch ${project} ${branch};
  echo '';
  git show --oneline --stat ${commit};
  echo '';
  git cherry-pick ${commit};
}

# === Git Merger ===
function gitmerges()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: gitmerges <commit_sha1> [count] (Attempt to merge commit history)';
    echo '';
    return;
  fi;

  # Variables
  cnt=${2:-30};

  # Introduction
  echo '';
  echo -e " \e[1;37mSearching mergeable commits in ${1} tree...\e[0m";
  echo '';

  # Search commits
  git rev-list ${1} --reverse --pretty=oneline -- . \
    | tail -n ${cnt} \
    | while read line;
  do
    sha1=$(echo ${line} | cut -c -40);
    title=$(echo ${line} | cut -c 42-);
    if [ -z "$(git rev-list HEAD --pretty=oneline -- . \
       | grep -i "${title}")" ]; then
      echo -e " \e[1;31m${sha1} : \e[1;37m${title}\e[0m";
      git cherry-pick ${sha1};
      git reset --hard HEAD;
      echo '';
    fi;
  done;
}

# === GitHub Origin Cherry-Pick ===
function gitcpo()
{
  # Configurations
  gitremote='origin';

  # Usage
  echo '';
  if [ -z "${1}" ] || [ -z "${2}" ]; then
    echo -e '  \e[1;37mGit Origin Cherry-Pick.\e[0m';
    echo '    Usage: gitcpo <branch> <amount_of_commits>';
    echo '';
    return;
  fi;

  # Cherry-Pick
  git cherry-pick --abort >/dev/null 2>&1;
  git fetch ${gitremote} ${1};
  if [ ${?} -eq 0 ] && [ ${2} -gt 0 ]; then
    git cherry-pick FETCH_HEAD~$((${2}-1))^..FETCH_HEAD;
  fi;
}


# === GitHub Url Cherry-pick ===
function gitcpup()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: gitcpup <url> (Git URL patch applier)';
    echo '';
    return;
  fi;

  # Variables
  local tmpfile=$(mktemp);
  local tmpurl="${1}";
  echo '';

  # Finish previous one
  if [ -z "${tmpurl}" ]; then
    git am --continue;
    return;
  fi;

  # Remote additional informations
  tmpurl=${tmpurl%%#*};

  # GitHub/GitLab patch
  if [[ ! "${tmpurl}" =~ '.patch' ]]; then
    if [[ "${tmpurl}" =~ 'github.com' ]] || [[ "${tmpurl}" =~ 'gitlab.com' ]] ||
       [[ "${tmpurl}" =~ 'git.bricked.de' ]]; then
      tmpurl="${tmpurl}.patch";
    fi;
  fi;

  # CodeAurora patch
  if [[ "${tmpurl}" =~ 'codeaurora.org' ]]; then
    if [[ ! "${tmpurl}" =~ 'patch/' ]]; then
      tmpurl="${tmpurl/commit\/?*id=/patch\/?id=}";
    fi;
    if [[ ! "${tmpurl}" =~ 'patch/' ]]; then
      echo '';
      echo -e ' \e[1;33mgitcpup: Link incomplete, add "..." around the url\e[0m';
      echo " Failed on ${tmpurl}";
      echo '';
      return;
    fi;
  fi;

  # Git Kernel patch
  if [[ "${tmpurl}" =~ 'kernel.org' ]]; then
    if [[ ! "${tmpurl}" =~ 'patch/' ]]; then
      tmpurl="${tmpurl/commit\/?*id=/patch\/?id=}";
    fi;
    if [[ ! "${tmpurl}" =~ 'patch/' ]]; then
      echo '';
      echo -e ' \e[1;33mgitcpup: Link incomplete, add "..." around the url\e[0m';
      echo " Failed on ${tmpurl}";
      echo '';
      return;
    fi;
  fi;

  # Download patch
  rm -rf .git/rebase-apply;
  curl "${tmpurl}" > ${tmpfile} 2> /dev/null;

  # Files renaming
  if [ ! -z "${2}" ] && [ ! -z "${3}" ]; then
    sed -i "s#${2}#${3}#g" "${tmpfile}";
  fi;

  # Cherry-pick
  git am -3 ${tmpfile};
  if [ ${?} -ne 0 ]; then
    echo '';
    echo " Failed on ${tmpurl}";
    echo '';
    return;
  fi;
  git log --max-count=1 --pretty=oneline;
  echo '';

  # End of process
  rm -f ${tmpfile};
}

# === GitHub Url Cherry-pick Renamed ===
function gitcpur()
{
  # Usage
  if [ -z "${4}" ]; then
    echo '';
    echo ' Usage: gitcpur <githuburltoproject> <branch> <search_text> <replace_text>';
    echo '';
    return;
  fi;

  # Variables
  local tmpfile=$(mktemp);
  local tmpurl="${1}";
  local branch="${2}";
  local search="${3}";
  local replace="${4}";
  echo '';

  # Remote additional informations
  tmpurl=${tmpurl%%#*};

  # GitHub/GitLab patch
  if [[ ! "${tmpurl}" =~ '.patch' ]]; then
    if [[ "${tmpurl}" =~ 'github.com' ]] || [[ "${tmpurl}" =~ 'gitlab.com' ]] ||
       [[ "${tmpurl}" =~ 'git.bricked.de' ]]; then
      tmpurl="${tmpurl}.patch";
    fi;
  fi;

  # Cherry-pick
  rm -rf .git/rebase-apply;
  curl "${tmpurl}" > ${tmpfile} | sed "s/${search}/${replace}/g" 2> /dev/null;
  git am -3 ${tmpfile};
  if [ ${?} -ne 0 ]; then
    echo '';
    echo " Failed on ${tmpurl}";
    echo '';
    return;
  fi;
  git log --max-count=1 --pretty=oneline;
  echo '';

  # End of process
  rm -f ${tmpfile};
}

# === GitHub Url Cherry-pick Helpers ===
function gitcpupprima() { gitcpup "${1}" CORE drivers/staging/prima/CORE; }
