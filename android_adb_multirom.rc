#!/bin/bash
#
# Copyright 2015-2017 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === ADB MultiROM List ===
function adbmromlist()
{
  # Usage: adbmromlist (List available MultiROM installations)

  # Variables
  local enforced;
  local path;
  local roms;

  # Prepare selinux access
  enforced=$(adb shell getenforce);
  if [ "${enforced}" = 'Enforcing' ]; then
    adbsu 'setenforce 0';
  fi;

  # List all MultiROM installations
  roms=$(mktemp);
  adbsu 'find /sdcard/multirom/roms/* /sdcard1/multirom-*/* /external_sd/multirom-*/* /data/media/0/external_multirom/multirom-*/* -maxdepth 0 -type d 2> /dev/null' \
    | grep -v '/sdcard/multirom/roms/Internal' \
    > "${roms}";

  # Create ROMs list
  path=;
  echo '';
  echo -e " \e[1;37m[ MultiROM installations ]\e[0m";
  echo '';
  while read -r path; do
    echo "   ${path}";
  done < "${roms}";
  echo '';

  # Restore selinux access
  if [ "${enforced}" = 'Enforcing' ]; then
    adbsu 'setenforce 1';
  fi;
}

# === ADB MultiROM Selector ===
function adbmromselect()
{
  # Usage: adbmromselect (Select MultiROM installation for path)

  # Variables
  local cnt;
  local enforced;
  local key;
  local options;
  local path;
  local roms;

  # Prepare selinux access
  enforced=$(adb shell getenforce);
  if [ "${enforced}" = 'Enforcing' ]; then
    adbsu 'setenforce 0';
  fi;

  # List all MultiROM installations
  roms=$(mktemp);
  adbsu 'find /sdcard/multirom/roms/* /sdcard1/multirom-*/* /external_sd/multirom-*/* /data/media/0/external_multirom/multirom-*/* -maxdepth 0 -type d 2> /dev/null' \
    | grep -v '/sdcard/multirom/roms/Internal' \
    > "${roms}";

  # Create ROMs selector list
  cnt=0;
  options=('None');
  path=;
  >&2 echo '';
  >&2 echo -e " \e[1;37m[ Select MultiROM installation ]\e[0m";
  >&2 echo '';
  >&2 echo "   ${cnt}: ${options[${cnt}]}";
  while read -r path; do
    cnt=$((cnt + 1));
    options[${cnt}]=${path};
    >&2 echo "   ${cnt}: ${options[${cnt}]}";
  done < "${roms}";
  >&2 echo '';
  >&2 echo -en " \e[1;33mROM to use [0 to ${cnt}] :\e[0m ";
  >&2 read -r key;
  >&2 echo '';

  # Restore selinux access
  if [ "${enforced}" = 'Enforcing' ]; then
    >&2 adbsu 'setenforce 1';
  fi;

  # Return selected ROM path
  if [ "${key}" -gt 0 ] && [ "${key}" -le "${cnt}" ]; then
    echo -n "${options[${key}]}" | tr -d '\r';
  fi;
}

# === ADB MultiROM Kernel Injector ===
function adbmrominjector()
{
  # Variables
  local filepath=${1};

  # Detect zImage file
  if [ -z "${filepath}" ]; then
    if [ -f '.build/arch/arm64/boot/zImage' ]; then
      filepath=.build/arch/arm64/boot/zImage;
    elif [ -f '.build/arch/arm/boot/zImage' ]; then
      filepath=.build/arch/arm/boot/zImage;
    elif [ -f 'arch/arm64/boot/zImage' ]; then
      filepath=arch/arm64/boot/zImage;
    elif [ -f 'arch/arm/boot/zImage' ]; then
      filepath=arch/arm/boot/zImage;
    fi;
  fi;

  # Usage
  if [ -z "${filepath}" ] || [ ! -f "${filepath}" ]; then
    echo '';
    echo '  Usage: adbmrominjector <kernelpath> (MultiROM kernel image injector)';
    echo '';
    return;
  fi;

  # Variables
  local partitiontarget;
  local romtarget;

  # Get ROM and bootimage
  partitiontarget=$(androiddevicestarget boot);
  romtarget=$(adbmromselect)/boot.img;

  # Load ROM bootimage to partition
  echo " Injecting '${romtarget}' to '${partitiontarget}'";
  echo '';
  adbro;
  adbsu "dd if=\"${partitiontarget}\" of=/sdcard/boot.dump";
  adbsu "dd if=\"${romtarget}\" of=\"${partitiontarget}\"";

  # Files to device push
  adbro;
  adb push "${filepath}" /tmp/tmpkernel;
  adb push "${ANDROID_DEVELOPMENT_SHELL_TOOLS_BBOOTIMG}" /tmp/bbootimg;
  adbsu 'chmod +x /tmp/bbootimg; chmod 755 /tmp/bbootimg';

  # Kernel injection
  adbsu "/tmp/bbootimg -i \"${partitiontarget}\"";
  adbsu "/tmp/bbootimg -u \"${partitiontarget}\" -k /tmp/tmpkernel";

  # Restore ROM bootimage to partition
  echo '';
  echo " Restoring '${partitiontarget}' to '${romtarget}'";
  echo '';
  adbsu "dd if=\"${partitiontarget}\" of=\"${romtarget}\"";
  adbsu "dd if=/sdcard/boot.dump of=\"${partitiontarget}\"";
  adbsu 'rm -f /sdcard/boot.dump';

  # Reboot to recovery if requested
  if [ ! -z "${2}" ]; then
    adb reboot recovery;
  fi;
  echo '';
}

# === ADB MultiROM AutoBoot ===
function adbmromautoboot()
{
  # Usage: adbmromautoboot (MultiROM autoboot selection)

  # Read multirom.ini
  echo '';
  adbsu "cat /data/media/0/multirom/multirom.ini";

  # Variables
  local romtarget;

  # Get ROM
  romtarget=$(adbmromselect);

  # Modify multirom.ini
  adbsu "sed -i 's#auto_boot_rom=.*#auto_boot_rom=${romtarget##*/}#' /data/media/0/multirom/multirom.ini";
  adbsu "sed -i 's#current_rom=.*#current_rom=${romtarget##*/}#' /data/media/0/multirom/multirom.ini";
  adbsu "cat /data/media/0/multirom/multirom.ini";

  # Reboot to Android
  adb reboot;
  echo '';
}
