#!/bin/bash
#
# Copyright 2015-2017 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === ADB Database Opened ===
function adbdatabase()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: adbdatabase </data/.../sqlite.db> (Android sqlite3 database opener)';
    echo '';
    return;
  fi;

  # Variables
  local name;
  local path;

  # Pull and open
  adbro;
  path=${1};
  name=$(basename "${path}");
  adb pull "${path}";
  sqlite3 "${name}";
}

# === Sepolicies Extractor ===
function sepaud()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: sepaud <logs_file> (Logs sepolicy analyzer)';
    echo '';
    return;
  fi;

  # Logs sepolicy analyzer
  grep -a 'avc.*denied' "${1}";
  grep -a 'does not have a SELinux domain defined' "${1}";
  grep -a 'avc.*denied' "${1}" | audit2allow -p sepolicy;
}

# === ADB Intents ===
alias adbintents='adb shell dumpsys package r > intents.txt';
alias adbcamera='adb shell pm enable com.android.camera2/com.android.camera.CameraLauncher;
                 adb shell pm enable com.google.android.GoogleCamera/com.android.camera.CameraLauncher;
                 adb shell "am start -a android.media.action.IMAGE_CAPTURE"';
alias adblkl='adb root; adb wait-for-device; adb shell killall zigote; adbl';

# === ADB Kill Process ===
function adbkp()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: adbkp <process_name> (Kill process by name)';
    echo '';
    return;
  fi;

  # Kill process by name
  adb 'wait-for-device'; adb root; adb 'wait-for-device';
  adb shell ps | grep "${1}";
  pid=$(adb shell ps | grep "${1}" | awk '{ print $2 }');
  adb shell kill "${pid}";
}

# === ADB Crash Debuggers ===
function adbpk()
{
  # Usage: adbpk (Android mediaserver debug logger)

  # Variables
  local pid;

  # Android mediaserver debug logger
  pid=$(adb shell ps | grep mediaserver | awk '{ print $2 }');
  adb root; adb 'wait-for-device';
  adb logcat -c;
  adb shell kill "${pid}";
  adb shell ps | grep mediaserver;
  sleep 2;
  adbl;
}
function adbms()
{
  # Usage: adbms (Android mediaserver debug stracer)

  # Android mediaserver debug stracer
  pid=$(adb shell ps | grep mediaserver | awk '{ print $2 }');
  adb root; adb 'wait-for-device';
  adb logcat -c;
  adb shell kill "${pid}";
  pid=$(adb shell ps | grep mediaserver | awk '{ print $2 }');
  adb shell strace -p "${pid}";
}

function adblibs() { adb shell grep -air "${1}" "${2:-/system/lib/}"; }
alias ndkstack='ndk-stack -sym "${ANDROID_DEV_DRIVE}/out/target/product/huashan/symbols" -dump';
function adbwtch() { adbr; while true; do adb shell cat "${1}"; done; }

function adbdu()
{
  # Usage: adbdu (Android /data/ sizes study)

  # Variables
  local tmp;

  # Android /data/ sizes study
  tmp=$(mktemp);
  adbro;
  adbsu 'du /data/ | sort -hr' > "${tmp}";
  fileedit "${tmp}";
}

# === ADB Property Radio Logs ===
function adbpropradiolog()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: adbpropradiolog <value> (Radio debug property overrider)';
    echo '';
    return;
  fi;

  # Variable
  local cmd;
  local property=persist.radio.adb_log_on;
  echo '';

  # Get property
  cmd="adb shell getprop ${property}";
  echo -n " ${cmd} > ";
  ${cmd};

  # Set property
  cmd="adb shell setprop ${property} ${1}";
  echo " ${cmd}";
  adb root;
  ${cmd};

  # Get property
  cmd="adb shell getprop ${property}";
  echo -n " ${cmd} > ";
  ${cmd};
  echo '';
}

# === ADB Alsa Reader ===
function adbalsa()
{
  # Usage: adbalsa (Audio cards advanced study)

  # Audio cards advanced study
  echo -n '' > alsalog;
  adb shell "cat /proc/asound/card0/id" | tee -a alsalog;
  for line in $(adb shell find /proc/asound/card0 -name info); do
    path=$(echo -n "${line}" | tr -dc 'a-zA-Z0-9/');
    echo '' | tee -a alsalog;
    echo "=== ${path} ===" | tee -a alsalog;
    adb shell "cat ${path}" | tee -a alsalog;
    if [[ "${path}" == *'sub'* ]]; then
      folder=$(dirname "${path}");
      adb shell "cat ${folder}/hw_params" | tee -a alsalog;
      adb shell "cat ${folder}/status" | tee -a alsalog;
      adb shell "cat ${folder}/sw_params" | tee -a alsalog;
    fi;
  done;
  adb shell "cat /proc/asound/devices" | tee -a alsalog;
  adb shell "cat /proc/asound/pcm" | tee -a alsalog;
  adb shell "cat /proc/asound/timers" | tee -a alsalog;
}
