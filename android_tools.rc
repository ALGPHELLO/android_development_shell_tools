#!/bin/bash
# ======================================
#   Developed by Adrian DC - 2015-2017
# ======================================

# === Standalone Source Helper ===
# source <(curl -Ls https://github.com/AdrianDC/android_development_shell_tools/raw/master/android_grep.rc)
# source <(curl -Ls https://github.com/AdrianDC/android_development_shell_tools/raw/master/android_tools.rc)

# === Binary Editor ===
function binaryeditor()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: binaryeditor <patternsearch> [binariespath] [replacement] (Binary files parser and editor)';
    echo '';
    return;
  fi;

  # Variables
  local PATTERN="${1}";
  local FILES="${2:-.}";
  local REPLACEMENT="${3}";
  local REPLACE='';
  local STRINGS='';
  PATTERN=${PATTERN//\*/.\*};
  PATTERN=${PATTERN//./.};

  # Handle strings variants
  local strings_param=$(stringsparams);

  # Headers
  echo '';
  if [ ! -z "${REPLACEMENT}" ]; then
    echo -e " \e[1;31m=== Replacing '${PATTERN}' with '${REPLACEMENT}' in ${FILES} ===\e[0m";
  else
    echo -e " \e[1;31m=== Searching '${PATTERN}' in ${FILES} ===\e[0m";
  fi;
  echo '';

  # Search files
  for FILE in $(find ${FILES} -not -path "*.git/*" -not -path "*.repo/*" | sort); do

    # File / directory detection
    FILE=$(readlink -f "${FILE}");
    if [ -d ${FILE} ]; then
      continue;
    fi;

    # Replacement mode
    if [ ! -z "${REPLACEMENT}" ]; then
      STRINGS=$(strings ${strings_param} ${FILE} \
              | grep "${PATTERN}" \
              | sort -u -r);

      # Information found
      if [ ! -z "${STRINGS}" ]; then
        printf "   \e[1;37m${FILE} :\e[0m ${STRINGS} ";
        for OLD_STRING in ${STRINGS};
        do
          NEW_STRING=${OLD_STRING//${PATTERN}/${REPLACEMENT}};

          # String conversions
          OLD_STRING_HEX="$(echo -n ${OLD_STRING} | xxd -g 0 -u -ps -c 256)00";
          NEW_STRING_HEX="$(echo -n ${NEW_STRING} | xxd -g 0 -u -ps -c 256)00";

          # Dimensions security
          if [ ${#NEW_STRING_HEX} -le ${#OLD_STRING_HEX} ]; then
            while [ ${#NEW_STRING_HEX} -lt ${#OLD_STRING_HEX} ];
            do
              NEW_STRING_HEX="${NEW_STRING_HEX}00";
            done;

            # Modification confirmation
            printf '\e[1;36m[y/N] \e[0m';
            read -s -d'' -s -n1 REPLACE;
            if [[ "${REPLACE}" == 'y' || "${REPLACE}" == 'Y' ]]; then
              hexdump -ve '1/1 "%.2X"' ${FILE} | \
                sed "s/${OLD_STRING_HEX}/${NEW_STRING_HEX}/g" | \
                xxd -r -p > ${FILE}.tmp;
              chmod --reference ${FILE} ${FILE}.tmp;
              mv ${FILE}.tmp ${FILE};
              echo -e '\e[1;32mDone!\e[0m';
            else
              echo -e '\e[1;33mIgnored.\e[0m';
            fi;

          # String overflow
          else
            echo -e '\e[1;36m[N] \e[1;33mString too long...\e[0m';
          fi;
        done;

      # Information not found
      else
        STRINGS=$(strings ${strings_param} ${FILE} \
                | grep ${REPLACEMENT} \
                | sort -u -r);
        if [ ! -z "${STRINGS}" ]; then
          echo -e "   \e[1;37m${FILE}:\e[0m ${REPLACEMENT} \e[1;33mFound.\e[0m";
        fi;
      fi;

    # Search mode
    else
      STRINGS=$(strings ${strings_param} ${FILE} \
              | grep "${PATTERN}" \
              | sort -u -r \
              | tr '\n' ',');
      if [ ! -z "${STRINGS}" ]; then
        echo -e "   \e[1;37m${FILE}:\e[1;33m ${STRINGS}\e[0m";
      fi;
    fi;

  done;
  echo '';
}

# === Libraries Hunter ===
function librarieshunter()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: librarieshunter <binariespath> (Libraries linkage analyzer)';
    echo '';
    return;
  fi;

  # Variables
  local FILES="${1}";
  local FILE_NAME='';
  local FILE_REFERENCED='';
  local SYSTEM_PATH='';
  local LIB_ARCH='';
  local LIB_NAME='';
  local DIR_NAMES='';
  local DIR_COMMON_NAMES='';
  local DIR_VENDOR_NAMES='';

  # Handle strings variants
  local strings_param=$(stringsparams);

  # Scan the libraries
  echo '';
  echo -e " \e[1;31m=== Searching missing libraries in ${FILES} ===\e[0m";
  echo '';
  for FILE in $(find ${FILES} -not -path "*.git/*" -not -path "*.repo/*" | sort);
  do
    FILE=$(readlink -f "${FILE}");
    if [ -d ${FILE} ]; then continue; fi;

    # Internal references
    STRINGS=$(strings ${strings_param} ${FILE} \
            | grep "\\.so" \
            | sort -u -r \
            | tr '\n' ',');
    if [ ! -z "${STRINGS}" ]; then
      STRINGS=${STRINGS//,/ };
      echo -e "   \e[1;37m${FILE}:\e[0m";

      # Search missing references
      for LIB in ${STRINGS};
      do
        if [[ ! "${LIB}" == *'lib'*'.so' ]]; then continue; fi;
        if [[ "${LIB}" =~ '%' ]]; then continue; fi;

        LIB_NAME=$(basename ${LIB});
        SYSTEM_PATH=${FILES%system\/*}system;
        LIB_ARCH=${FILES//vendor\//};
        LIB_ARCH=${LIB_ARCH/*system\/lib};
        LIB_ARCH=${LIB_ARCH%%\/*};
        DIR_COMMON_NAMES="${SYSTEM_PATH}/lib${LIB_ARCH}";
        DIR_VENDOR_NAMES="${SYSTEM_PATH}/vendor/lib${LIB_ARCH}";
        DIR_NAMES="${DIR_COMMON_NAMES} ${DIR_COMMON_NAMES}/*/ ${DIR_VENDOR_NAMES} ${DIR_VENDOR_NAMES}/*/";
        if [ -z "$(find ${DIR_NAMES} -name ${LIB_NAME})" ]; then
          echo -e "    \e[1;31m- Missing reference: \e[1;31m${LIB_NAME}\e[0m";
        fi;
      done;

      # Search unused library
      FILE_NAME=$(basename "${FILE}");
      FILE_REFERENCED='';
      for FILE_SUB in $(find ${FILES} -not -path "*.git/*" -not -path "*.repo/*" | sort);
      do
        FILE_SUB=$(readlink -f "${FILE_SUB}");
        if [ -d "${FILE_SUB}" ] || [ "${FILE}" = "${FILE_SUB}" ]; then continue; fi;
        STRINGS_SUB=$(strings ${strings_param} ${FILE_SUB} \
                    | grep "${FILE_NAME}" \
                    | sort -u -r \
                    | tr '\n' ',');
        if [ ! -z "${STRINGS_SUB}" ]; then
          FILE_REFERENCED='true';
          break;
        fi;
      done;
      if [ -z "${FILE_REFERENCED}" ]; then
        echo -e "    \e[1;33m- Unused library: ${FILE_NAME}\e[0m";
      fi;
    fi;
  done;
  echo '';
}

# === Hastebin ===
function haste()
{
  # Usage: haste <file> or | haste (Share hastebin logs)

  # Based upon https://github.com/seejohnrun/haste-client

  # Get output
  local tmp=$(mktemp);
  if [ ! -z "${1}" ] && [ -f "${1}" ]; then
    cat "${1}" | tee ${tmp};
  else
    cat | tee ${tmp};
  fi;
  echo '';

  # Upload to hastebin
  local url=$(timeout 10 curl -X POST -s -d @"${tmp}" https://hastebin.com/documents \
      | awk -F '"' '{ print "http://hastebin.com/"$4; }');
  echo " haste: ${url}";

  # Open url and delete temp file
  xdg-open "${url}" &
  echo '' &
  sleep 1;
  echo '';
  rm ${tmp};
}

# === Overlay Compare ===
function overlaycompare()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: overlaycompare <overlay_file_path> (Compare device overlays against sources)';
    echo '';
    return;
  fi;

  # Variables
  local source_path;

  # Loop through files
  for overlay_path in $(find ${*} -type f); do

    # Launch meld on both paths
    source_path=$(echo "../../../${overlay_path}" \
                | sed 's/radio\/overlay/overlay/' \
                | sed 's/overlay[^\/]*\///');
    meld "${overlay_path}" "${source_path}";

  done;
}
