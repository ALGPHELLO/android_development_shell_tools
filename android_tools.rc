#!/bin/bash
# ======================================
#   Developed by Adrian DC - 2015-2016
# ======================================

# === Binary Editor ===
function binaryeditor()
{
  if [ -z "$2" ]; then
    echo " Usage : binaryeditor binariespath patternsearch [replacement]";
    return;
  fi;

  local FILES="$1";
  local PATTERN="$2";
  local REPLACEMENT="$3";
  local REPLACE="";
  local STRINGS="";
  PATTERN=${PATTERN//\*/.\*};
  PATTERN=${PATTERN//./.};

  echo "";
  if [ ! -z "${REPLACEMENT}" ]; then
    echo -e " \e[1;31m=== Replacing '${PATTERN}' with '${REPLACEMENT}' in ${FILES} ===\e[0m";
  else
    echo -e " \e[1;31m=== Searching '${PATTERN}' in ${FILES} ===\e[0m";
  fi;
  echo "";
  for FILE in $(find $FILES -not -path "*.git/*" -not -path "*.repo/*" | sort);
  do
    FILE=$(readlink -f "$FILE");
    if [ -d $FILE ]; then continue; fi;

    if [ ! -z "${REPLACEMENT}" ]; then
      STRINGS=$(strings ${FILE} | grep "${PATTERN}" | sort -u -r);

      if [ ! -z "${STRINGS}" ]; then
        printf "   \e[1;37m${FILE} :\e[0m ${STRINGS} ";
        for OLD_STRING in ${STRINGS};
        do
          NEW_STRING=${OLD_STRING//${PATTERN}/${REPLACEMENT}};

          OLD_STRING_HEX="$(echo -n ${OLD_STRING} | xxd -g 0 -u -ps -c 256)00";
          NEW_STRING_HEX="$(echo -n ${NEW_STRING} | xxd -g 0 -u -ps -c 256)00";

          if [ ${#NEW_STRING_HEX} -le ${#OLD_STRING_HEX} ]; then
            while [ ${#NEW_STRING_HEX} -lt ${#OLD_STRING_HEX} ];
            do
              NEW_STRING_HEX="${NEW_STRING_HEX}00";
            done;

            printf "\e[1;36m[y/N] \e[0m";
            read -s -d'' -s -n1 REPLACE;
            if [[ "${REPLACE}" == "y" || "${REPLACE}" == "Y" ]]; then
              hexdump -ve '1/1 "%.2X"' ${FILE} | \
                sed "s/${OLD_STRING_HEX}/${NEW_STRING_HEX}/g" | \
                xxd -r -p > ${FILE}.tmp;
              chmod --reference ${FILE} ${FILE}.tmp;
              mv ${FILE}.tmp ${FILE};
              echo -e "\e[1;32mDone!\e[0m";
            else
              echo -e "\e[1;33mIgnored.\e[0m";
            fi;
          else
            echo -e "\e[1;36m[N] \e[1;33mString too long...\e[0m";
          fi;
        done;
      else
        STRINGS=$(strings ${FILE} | grep ${REPLACEMENT} | sort -u -r);
        if [ ! -z "${STRINGS}" ]; then
          echo -e "   \e[1;37m${FILE}:\e[0m ${REPLACEMENT} \e[1;33mFound.\e[0m";
        fi;
      fi;

    else
      STRINGS=$(strings ${FILE} | grep "${PATTERN}" | sort -u -r | tr '\n' ',');
      if [ ! -z "${STRINGS}" ]; then
        echo -e "   \e[1;37m${FILE}:\e[1;33m ${STRINGS}\e[0m";
      fi;
    fi;
  done;
  echo "";
}

# === Libraries Hunter ===
function librarieshunter()
{
  if [ -z "$1" ]; then
    echo " Usage : librarieshunter binariespath";
    return;
  fi;

  local FILES="$1";
  local FILE_NAME='';
  local FILE_REFERENCED='';
  local LIB_NAME='';

  # Scan the libraries
  echo "";
  echo -e " \e[1;31m=== Searching missing libraries in ${FILES} ===\e[0m";
  echo "";
  for FILE in $(find ${FILES} -not -path "*.git/*" -not -path "*.repo/*" | sort);
  do
    FILE=$(readlink -f "${FILE}");
    if [ -d ${FILE} ]; then continue; fi;

    # Internal references
    STRINGS=$(strings ${FILE} | grep "\\.so" | sort -u -r | tr '\n' ',');
    if [ ! -z "${STRINGS}" ]; then
      STRINGS=${STRINGS//,/ };
      echo -e "   \e[1;37m${FILE}:\e[1;33m ${STRINGS}\e[0m";

      # Search missing references
      for LIB in ${STRINGS};
      do
        if [[ ! "${LIB}" =~ '.so' ]]; then continue; fi;

        LIB_NAME=$(basename ${LIB});
        if [ -z "$(find $(dirname ${FILES}) -name ${LIB_NAME})" ]; then
          echo -e "    \e[1;37m- Missing reference: \e[1;31m${LIB_NAME}\e[0m";
        fi;
      done;

      # Search unused library
      FILE_NAME=$(basename "${FILE}");
      FILE_REFERENCED='';
      for FILE_SUB in $(find ${FILES} -not -path "*.git/*" -not -path "*.repo/*" | sort);
      do
        FILE_SUB=$(readlink -f "${FILE_SUB}");
        if [ -d "${FILE_SUB}" ] || [ "${FILE}" = "${FILE_SUB}" ]; then continue; fi;
        STRINGS_SUB=$(strings ${FILE_SUB} | grep "${FILE_NAME}" | sort -u -r | tr '\n' ',');
        if [ ! -z "${STRINGS_SUB}" ]; then
          FILE_REFERENCED='true';
          break;
        fi;
      done;
      if [ -z "${FILE_REFERENCED}" ]; then
        echo -e "    \e[1;31m- Unused library: ${FILE_NAME}\e[0m";
      fi;
    fi;
  done;
  echo "";
}

# === Audio LegacyToHAL helper ===
function audioltoh()
{
  if [ -z "$2" ]; then
    echo " Usage : audioltoh legacy_config hal_mixer [debug]";
    return;
  fi;

  Legacy="$1";
  HAL="$2";
  Debug="$3";
  TempFile=$(mktemp);

  echo "";
  echo -e " \e[1;37m === Checking Legacy rules to HAL presence ===\e[0m";
  echo "";
  grep -i -e "'.*'" "$Legacy" | uniq \
    | sed "s/^[ \t]*'\(.*\)'\:\(.*\)\:\(.*\)/\1/" \
    | sort | uniq >$TempFile;
  kate $TempFile;
  while read line; do
    if ! grep -q "$line" $HAL; then
      echo -e "   \e[1;33mLegacy: \e[1;34m$line - \e[1;31mMissing\e[0m";
    elif [ ! -z "$Debug" ]; then
      echo -e "   \e[1;33mLegacy: \e[1;34m$line - \e[1;34mFound\e[0m";
    fi;
  done < "$TempFile";
  echo "";
  echo -e " \e[1;34m > Done checking Legacy rules to HAL\e[0m";
  echo "";

  echo "";
  echo -e " \e[1;37m === Checking HAL rules to Legacy presence ===\e[0m";
  echo "";

return;

  grep -i -e "<ctl name=\"".*"\" value=\".*\" \/>" "$HAL" \
    | sort | uniq -u \
    | sed "s/.*name=\"\(.*\)\" .*value=\"\(.*\)\" \/>/\1 | \2/" >$TempFile;
  while read line;
  do
    if [ -z $(grep -q "$Line" "$HAL") ]; then
      echo -e "   \e[1;33mHAL: \e[1;34m$line - \e[1;31mMissing\e[0m";
    elif [ ! -z "$Debug" ]; then
      echo -e "   \e[1;33mHAL: \e[1;34m$line - \e[1;34mFound\e[0m";
    fi;
  done <$TempFile;
  echo "";
  echo -e " \e[1;34m > Done checking HAL rules to Legacy\e[0m";
  echo "";

  rm -f $TempFile;
}

# === Hastebin ===
haste()
{
  # Based upon https://github.com/seejohnrun/haste-client
  # Usage : command | haste or haste file
  tmp=$(mktemp);
  if [ ! -z "$1" ] && [ -f "$1" ]; then
    cat "$1" | tee $tmp;
  else
    cat | tee $tmp;
  fi;
  echo "";
  url=$(timeout 10 curl -X POST -s --data-binary @"${tmp}" --connect-timeout 5 http://hastebin.com/documents \
      | awk -F '"' '{ print "http://hastebin.com/"$4; }');
  echo "$url";
  xdg-open "$url" &
  echo "";
  rm $tmp;
}

