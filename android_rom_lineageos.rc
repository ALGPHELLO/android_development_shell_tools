#!/bin/bash
# ======================================
#   Developed by Adrian DC - 2015-2016
# ======================================

# === LineageOS Rebaser ===
function lineagerebaser()
{
  # Repo root
  if [ -z "$(type -t croot)" ]; then
    while [ ! -e './build/envsetup.sh' ]; do
      cd ../;
    done;
    source ./build/envsetup.sh;
  fi;
  croot;

  # ==========================================================
  # Constants
  local projects_branch='cm-14.1';
  local projects_paths='
    device/sony/huashan
    device/sony/blue-common
    device/sony/hayabusa
    device/sony/mint
    device/sony/tsubasa
    kernel/sony/msm8960t
    kernel/sony/msm8x60
    vendor/sony
    ';

  # ==========================================================
  # Variables
  local git_revs_count;
  local git_revs_count_local;
  local git_username=$(githubusername);
  local path_name;
  local project_github;
  local project_unfinished;
  local push_command;

  # Projects loader
  for path in ${1:-${projects_paths}}; do

    # Project selection
    echo '';
    echo " === ${path} [${projects_branch}] ===";
    croot;

    # Ignore non-git projects
    if [ ! -d ${path}/.git ]; then
      echo '  .git project not found, ignoring...';
      continue;
    fi;
    cd ${path}/;

    # Loop until project ready
    project_unfinished=1;
    while [ ${project_unfinished} -eq 1 ]; do

      # Check origin remote
      git ls-remote --exit-code origin >/dev/null 2>&1;
      if [ $? -ne 0 ]; then
        echo ' Branch origin was not found...';
        gitrao;
        continue;
      fi;

      # Check private remote
      git ls-remote --exit-code ${git_username} >/dev/null 2>&1;
      if [ $? -ne 0 ]; then
        echo " Branch ${git_username} was not found...";
        gitraa;
        continue;
      fi;

      # Fetch and compare
      git fetch origin ${projects_branch};
      git_revs_count=$(git rev-list --left-right --count HEAD...FETCH_HEAD | tail -n 1);
      git_revs_count_local=$(echo "${git_revs_count}" | awk '{ print $1 }');
      git_revs_count_remote=$(echo "${git_revs_count}" | awk '{ print $2 }');
      echo " Differences: ${git_revs_count}";

      # Handle unupdated projects
      if [ ${git_revs_count_remote} -ne 0 ]; then
        echo '';
        printf '  > Rebase onto newest changes [Y/n] ? ';
        read -t 20 key;

        # Rebase the tree
        if [ ! "${key}" = 'n' ] && [ ! "${key}" = 'N' ]; then
          echo '';
          git rebase --abort;
          git rebase FETCH_HEAD;
          push_command="git push -f ${git_username} HEAD:refs/heads/${projects_branch}";
          echo '';
          printf "  > ${push_command} [y/N] ? ";
          read -t 20 key;

          # Push the tree
          echo '';
          if [ "${key}" = 'y' ] || [ "${key}" = 'Y' ]; then
            ${push_command};
          else
            echo '  < Upload ignored after timeout... Consider uploading later';
            echo '';
          fi;

        # Project is ready, break the loop
        else
          project_unfinished=0;
        fi;

      # Project is ready, break the loop
      else
        project_unfinished=0;
      fi;

    done;

    # Cleanup
    git reset --hard HEAD;
    git stash -u;

  done;

  # ==========================================================
  # repo root
  echo '';
  croot;
}

# === LineageOS SONY Open Devices Rebaser ===
function lineagesonyrebaser()
{
  # Repo root
  if [ -z "$(type -t croot)" ]; then
    while [ ! -e './build/envsetup.sh' ]; do
      cd ../;
    done;
    source ./build/envsetup.sh;
  fi;
  croot;

  # ==========================================================
  # Constants
  local projects_branch='cm-14.1';
  local projects_paths='
    device/sony/common-aosp::device-sony-common::master
    device/sony/dora::device-sony-dora::master
    device/sony/honami::device-sony-honami::master
    device/sony/ivy::device-sony-ivy::master
    device/sony/kagura::device-sony-kagura::master
    device/sony/kugo::device-sony-kugo::master
    device/sony/loire-common::device-sony-loire::master
    device/sony/rhine-common::device-sony-rhine::master
    device/sony/satsuki::device-sony-satsuki::master
    device/sony/sepolicy::device-sony-sepolicy::master
    device/sony/shinano-common::device-sony-shinano::master
    device/sony/sirius::device-sony-sirius::master
    device/sony/suzu::device-sony-suzu::master
    device/sony/tone-common::device-sony-tone::master
    device/sony/z3::device-sony-leo::master
    device/sony/z3c::device-sony-aries::master
    hardware/sony/camera::camera::aosp/LA.UM.5.5.r1
    hardware/sony/camera_3.10::camera::aosp/LA.BR.1.3.3_rb2.14
    hardware/sony/dataservices::vendor-qcom-opensource-dataservices::master
    kernel/sony/msm::kernel::aosp/LA.UM.5.5.r1
    kernel/sony/msm8974::kernel::aosp/LA.BR.1.3.3_rb2.14
    ';

  # ==========================================================
  # Variables
  local git_revs_count;
  local git_revs_count_local;
  local git_username=$(githubusername);
  local path;
  local path_temp;
  local project_github;
  local project_unfinished;
  local push_command;
  local upstream_branch;
  local upstream_project;

  # Projects loader
  for project in ${1:-${projects_paths}}; do

    # Project selection
    path=${project%%::*};
    path_temp=${project#*::};
    upstream_project=sonyxperiadev/${path_temp%::*};
    upstream_branch=${path_temp#*::};
    echo '';
    echo " === ${path} [${upstream_project} @${upstream_branch}] ===";
    croot;

    # Ignore non-git projects
    if [ ! -d ${path}/.git ]; then
      echo '  .git project not found, ignoring...';
      continue;
    fi;
    cd ${path}/;

    # Loop until project ready
    project_unfinished=1;
    while [ ${project_unfinished} -eq 1 ]; do

      # Check upstream remote
      git ls-remote --exit-code upstream >/dev/null 2>&1;
      if [ $? -ne 0 ]; then
        echo ' Branch upstream was not found...';
        gitremoteset upstream https://github.com/${upstream_project};
        continue;
      fi;

      # Check private remote
      git ls-remote --exit-code ${git_username} >/dev/null 2>&1;
      if [ $? -ne 0 ]; then
        echo " Branch ${git_username} was not found...";
        gitraa;
        continue;
      fi;

      # Fetch and compare
      git fetch upstream ${upstream_branch};
      git_revs_count=$(git rev-list --left-right --count HEAD...FETCH_HEAD | tail -n 1);
      git_revs_count_local=$(echo "${git_revs_count}" | awk '{ print $1 }');
      git_revs_count_remote=$(echo "${git_revs_count}" | awk '{ print $2 }');
      echo " Differences: ${git_revs_count}";

      # Handle unupdated projects
      if [ ${git_revs_count_remote} -ne 0 ]; then
        echo '';
        printf '  > Rebase onto newest changes [Y/n] ? ';
        read -t 20 key;

        # Rebase the tree
        if [ ! "${key}" = 'n' ] && [ ! "${key}" = 'N' ]; then
          echo '';
          git rebase --abort;
          git rebase FETCH_HEAD;
          push_command="git push -f ${git_username} HEAD:refs/heads/${projects_branch}";
          echo '';
          printf "  > ${push_command} [y/N] ? ";
          read -t 20 key;

          # Push the tree
          echo '';
          if [ "${key}" = 'y' ] || [ "${key}" = 'Y' ]; then
            ${push_command};
          else
            echo '  < Upload ignored after timeout... Consider uploading later';
            echo '';
          fi;

        # Project is ready, break the loop
        else
          project_unfinished=0;
        fi;

      # Project is ready, break the loop
      else
        project_unfinished=0;
      fi;

    done;

    # Cleanup
    git reset --hard HEAD;
    git stash -u;

  done;

  # ==========================================================
  # repo root
  echo '';
  croot;
}

# === LineageOS Commits Patcher ===
function lineagepatcher()
{
  # Build environment
  while [ ! -e './build/envsetup.sh' ]; do
    cd ../;
  done;
  source ./build/envsetup.sh;

  # Import commits from topic "rebrand"
  repopick -i -t rebrand;

  # Import commits from topic "network-traffic"
  repopick -i -t network-traffic;

  # Import commits from topic "long-press-power-torch"
  repopick -i -t long-press-power-torch;

  # Enable SU inclusion for now
  export WITH_SU=true;
}

# === LineageOS SONY Open Devices Patcher ===
function lineagesonypatcher()
{
  # GitHub Credentials
  export GitEMail="user.name@gmail.com";
  export GitFullName="Full Name";
  export GitUserName="Username";

  # Create  ~/.bash_android.github.rc with the exports to override the credentials
  if [ -f ~/.bash_android.github.rc ]; then
    source ~/.bash_android.github.rc;
  fi;

  # ==========================================================
  # Repo root
  if [ -z "$(type -t croot)" ]; then
    while [ ! -e './build/envsetup.sh' ]; do
      cd ../;
    done;
    source ./build/envsetup.sh;
  fi;
  croot;

  # ==========================================================
  # Constants
  local projects_paths='
    hardware/qcom/audio/default
    hardware/qcom/display
    packages/apps/FMRadio
    vendor/cm
    ';

  # ==========================================================
  # Variables
  local commits_list;
  local commits_result;
  local git_revs_count;
  local git_revs_count_local;
  local path_branch;
  local project_github;
  local project_unfinished;

  # Projects loader
  for path in ${1:-${projects_paths}}; do

    # Project selection
    path=${path%/};
    path_branch=${path//\//_};
    echo '';
    echo " === ${path} [${path_branch}] ===";
    croot;
    cd ${path}/;

    # Targets selection
    project_github='https://github.com/AdrianDC/lineage_development_sonyaosp.git';

    # Loop until project ready
    project_unfinished=1;
    while [ ${project_unfinished} -eq 1 ]; do

      # Fetch and compare
      git fetch ${project_github} ${path_branch};
      git_revs_count=$(git rev-list --left-right --count HEAD...FETCH_HEAD | tail -n 1);
      git_revs_count_local=$(echo "${git_revs_count}" | awk '{ print $1 }');
      git_revs_count_remote=$(echo "${git_revs_count}" | awk '{ print $2 }');
      echo " Differences: ${git_revs_count}";

      # Handle unupdated projects
      if [ ${git_revs_count_local} -ne 0 ]; then
        echo '';
        printf '  > Recreate onto newest changes [Y/n] ? ';
        read -t 20 key;

        # Rebase the tree
        if [ ! "${key}" = 'n' ] && [ ! "${key}" = 'N' ]; then
          echo '';
          git cherry-pick --abort &> /dev/null;

          # Detect commits to pick
          commits_list=$(git log --committer="${GitEMail}" --reverse --format=format:%H HEAD);
          if [ -z "${commits_list}" ]; then
            commits_list=$(git log --committer="${GitEMail}" --reverse --format=format:%H FETCH_HEAD);
          else
            commits_list=$(git rev-list --reverse FETCH_HEAD~${git_revs_count_remote}..FETCH_HEAD);
          fi;

          # Pick all commits
          for sha1 in ${commits_list}; do
            git cherry-pick ${sha1};
            commits_result=${?};

            # Failed update
            if [ ${commits_result} -ne 0 ] && [ ${commits_result} -ne 1 ]; then
              echo '';
              echo '  < Automatic update failed...';
              echo '     Tried to add following commits: '${commits_list};
              echo '     Stopping, push with : gitbranchpusher;';
              echo '';
              return;
            fi;
          done;

          # Automatic push
          gitbranchpusher;

        # Project is ready, break the loop
        else
          project_unfinished=0;
        fi;

      # Project is ready, break the loop
      else
        project_unfinished=0;
      fi;

    done;

    # Cleanup
    git reset --hard FETCH_HEAD;
    git stash -u;

  done;

  # ==========================================================
  # repo root
  echo '';
  croot;
}

# === LineageOS Web Jekyll ===
function lineagewebjekyll()
{
  # Open webviewer
  xdg-open "http://127.0.0.1:4001" &

  # Launch Jekyll
  jekyll serve --port 4001;
}
